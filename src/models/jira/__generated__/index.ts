/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/* eslint-disable */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ActorInputBean: {
            /** @description The name of the group to add as a default actor. This parameter cannot be used with the `groupId` parameter. As a group's name can change,use of `groupId` is recommended. This parameter accepts a comma-separated list. For example, `"group":["project-admin", "jira-developers"]`. */
            group?: string[];
            /** @description The ID of the group to add as a default actor. This parameter cannot be used with the `group` parameter This parameter accepts a comma-separated list. For example, `"groupId":["77f6ab39-e755-4570-a6ae-2d7a8df0bcb8", "0c011f85-69ed-49c4-a801-3b18d0f771bc"]`. */
            groupId?: string[];
            /** @description The account IDs of the users to add as default actors. This parameter accepts a comma-separated list. For example, `"user":["5b10a2844c20165700ede21g", "5b109f2e9729b51b54dc274d"]`. */
            user?: string[];
        };
        ActorsMap: {
            /** @description The name of the group to add. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended. */
            group?: string[];
            /** @description The ID of the group to add. This parameter cannot be used with the `group` parameter. */
            groupId?: string[];
            /** @description The user account ID of the user to add. */
            user?: string[];
        };
        AddAtlassianTeamRequest: {
            /**
             * Format: double
             * @description The capacity for the Atlassian team.
             */
            capacity?: number;
            /** @description The Atlassian team ID. */
            id: string;
            /**
             * Format: int64
             * @description The ID of the issue source for the Atlassian team.
             */
            issueSourceId?: number;
            /**
             * @description The planning style for the Atlassian team. This must be "Scrum" or "Kanban".
             * @enum {string}
             */
            planningStyle: "Scrum" | "Kanban";
            /**
             * Format: int64
             * @description The sprint length for the Atlassian team.
             */
            sprintLength?: number;
        };
        AddFieldBean: {
            /** @description The ID of the field to add. */
            fieldId: string;
        };
        AddGroupBean: {
            /** @description The name of the group. */
            name: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of notifications which should be added to the notification scheme. */
        AddNotificationsDetails: {
            /** @description The list of notifications which should be added to the notification scheme. */
            notificationSchemeEvents: components["schemas"]["NotificationSchemeEventDetails"][];
        } & {
            [key: string]: unknown;
        };
        AddSecuritySchemeLevelsRequestBean: {
            /** @description The list of scheme levels which should be added to the security scheme. */
            levels?: components["schemas"]["SecuritySchemeLevelBean"][];
        };
        /** @description Announcement banner configuration. */
        AnnouncementBannerConfiguration: {
            /** @description Hash of the banner data. The client detects updates by comparing hash IDs. */
            readonly hashId?: string;
            /** @description Flag indicating if the announcement banner can be dismissed by the user. */
            readonly isDismissible?: boolean;
            /** @description Flag indicating if the announcement banner is enabled or not. */
            readonly isEnabled?: boolean;
            /** @description The text on the announcement banner. */
            readonly message?: string;
            /**
             * @description Visibility of the announcement banner.
             * @enum {string}
             */
            readonly visibility?: "PUBLIC" | "PRIVATE";
        };
        /** @description Configuration of the announcement banner. */
        AnnouncementBannerConfigurationUpdate: {
            /** @description Flag indicating if the announcement banner can be dismissed by the user. */
            isDismissible?: boolean;
            /** @description Flag indicating if the announcement banner is enabled or not. */
            isEnabled?: boolean;
            /** @description The text on the announcement banner. */
            message?: string;
            /** @description Visibility of the announcement banner. Can be public or private. */
            visibility?: string;
        };
        /** @description The application the linked item is in. */
        Application: {
            /** @description The name of the application. Used in conjunction with the (remote) object icon title to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank items are excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link". Grouping and sorting of links may place links without an application name last. */
            name?: string;
            /** @description The name-spaced type of the application, used by registered rendering apps. */
            type?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of an application property. */
        ApplicationProperty: {
            /** @description The allowed values, if applicable. */
            allowedValues?: string[];
            /** @description The default value of the application property. */
            defaultValue?: string;
            /** @description The description of the application property. */
            desc?: string;
            example?: string;
            /** @description The ID of the application property. The ID and key are the same. */
            id?: string;
            /** @description The key of the application property. The ID and key are the same. */
            key?: string;
            /** @description The name of the application property. */
            name?: string;
            /** @description The data type of the application property. */
            type?: string;
            /** @description The new value. */
            value?: string;
        };
        /** @description Details of an application role. */
        ApplicationRole: {
            /** @description The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups. */
            defaultGroups?: string[];
            /** @description The groups that are granted default access for this application role. */
            defaultGroupsDetails?: components["schemas"]["GroupName"][];
            /** @description Deprecated. */
            defined?: boolean;
            /** @description The groups associated with the application role. */
            groupDetails?: components["schemas"]["GroupName"][];
            /** @description The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups. */
            groups?: string[];
            hasUnlimitedSeats?: boolean;
            /** @description The key of the application role. */
            key?: string;
            /** @description The display name of the application role. */
            name?: string;
            /**
             * Format: int32
             * @description The maximum count of users on your license.
             */
            numberOfSeats?: number;
            /** @description Indicates if the application role belongs to Jira platform (`jira-core`). */
            platform?: boolean;
            /**
             * Format: int32
             * @description The count of users remaining on your license.
             */
            remainingSeats?: number;
            /** @description Determines whether this application role should be selected by default on user creation. */
            selectedByDefault?: boolean;
            /**
             * Format: int32
             * @description The number of users counting against your license.
             */
            userCount?: number;
            /** @description The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license. */
            userCountDescription?: string;
        };
        /** @description The approval configuration of a status within a workflow. Applies only to Jira Service Management approvals. */
        ApprovalConfiguration: {
            /**
             * @description Whether the approval configuration is active.
             * @enum {string}
             */
            active: "true" | "false";
            /**
             * @description How the required approval count is calculated. It may be configured to require a specific number of approvals, or approval by a percentage of approvers. If the approvers source field is Approver groups, you can configure how many approvals per group are required for the request to be approved. The number will be the same across all groups.
             * @enum {string}
             */
            conditionType: "number" | "percent" | "numberPerPrincipal";
            /** @description The number or percentage of approvals required for a request to be approved. If `conditionType` is `number`, the value must be 20 or less. If `conditionType` is `percent`, the value must be 100 or less. */
            conditionValue: string;
            /**
             * @description A list of roles that should be excluded as possible approvers.
             * @enum {array|null}
             */
            exclude?: "assignee" | "reporter" | null;
            /** @description The custom field ID of the "Approvers" or "Approver Groups" field. */
            fieldId: string;
            /** @description The custom field ID of the field used to pre-populate the Approver field. Only supports the "Affected Services" field. */
            prePopulatedFieldId?: string | null;
            /** @description The numeric ID of the transition to be executed if the request is approved. */
            transitionApproved: string;
            /** @description The numeric ID of the transition to be executed if the request is declined. */
            transitionRejected: string;
        } | null;
        /** @description A workflow transition rule. */
        AppWorkflowTransitionRule: {
            configuration: components["schemas"]["RuleConfiguration"];
            /** @description The ID of the transition rule. */
            id: string;
            /** @description The key of the rule, as defined in the Connect or the Forge app descriptor. */
            readonly key: string;
            readonly transition?: components["schemas"]["WorkflowTransition"];
        };
        /** @description Details of a filter for exporting archived issues. */
        ArchivedIssuesFilterRequest: {
            /** @description List archived issues archived by a specified account ID. */
            archivedBy?: string[];
            archivedDateRange?: components["schemas"]["DateRangeFilterRequest"];
            /** @description List archived issues with a specified issue type ID. */
            issueTypes?: string[];
            /** @description List archived issues with a specified project key. */
            projects?: string[];
            /** @description List archived issues where the reporter is a specified account ID. */
            reporters?: string[];
        } & {
            [key: string]: unknown;
        };
        ArchiveIssueAsyncRequest: {
            jql?: string;
        };
        /** @description Details of an item associated with the changed record. */
        AssociatedItemBean: {
            /** @description The ID of the associated record. */
            readonly id?: string;
            /** @description The name of the associated record. */
            readonly name?: string;
            /** @description The ID of the associated parent record. */
            readonly parentId?: string;
            /** @description The name of the associated parent record. */
            readonly parentName?: string;
            /** @description The type of the associated record. */
            readonly typeName?: string;
        };
        /** @description Details of a field configuration to issue type mappings. */
        AssociateFieldConfigurationsWithIssueTypesRequest: {
            /** @description Field configuration to issue type mappings. */
            mappings: components["schemas"]["FieldConfigurationToIssueTypeMapping"][];
        };
        /** @description Issue security scheme, project, and remapping details. */
        AssociateSecuritySchemeWithProjectDetails: {
            /** @description The list of scheme levels which should be remapped to new levels of the issue security scheme. */
            oldToNewSecurityLevelMappings?: components["schemas"]["OldToNewSecurityLevelMappingsBean"][];
            /** @description The ID of the project. */
            projectId: string;
            /** @description The ID of the issue security scheme. Providing null will clear the association with the issue security scheme. */
            schemeId: string;
        };
        /** @description Details about an attachment. */
        Attachment: {
            /** @description Details of the user who added the attachment. */
            readonly author?: components["schemas"]["UserDetails"];
            /** @description The content of the attachment. */
            readonly content?: string;
            /**
             * Format: date-time
             * @description The datetime the attachment was created.
             */
            readonly created?: string;
            /** @description The file name of the attachment. */
            readonly filename?: string;
            /** @description The ID of the attachment. */
            readonly id?: string;
            /** @description The MIME type of the attachment. */
            readonly mimeType?: string;
            /** @description The URL of the attachment details response. */
            readonly self?: string;
            /**
             * Format: int64
             * @description The size of the attachment.
             */
            readonly size?: number;
            /** @description The URL of a thumbnail representing the attachment. */
            readonly thumbnail?: string;
        } & {
            [key: string]: unknown;
        };
        AttachmentArchive: {
            entries?: components["schemas"]["AttachmentArchiveEntry"][];
            moreAvailable?: boolean;
            /** Format: int32 */
            totalEntryCount?: number;
            /** Format: int32 */
            totalNumberOfEntriesAvailable?: number;
        };
        AttachmentArchiveEntry: {
            abbreviatedName?: string;
            /** Format: int64 */
            entryIndex?: number;
            mediaType?: string;
            name?: string;
            /** Format: int64 */
            size?: number;
        };
        AttachmentArchiveImpl: {
            /** @description The list of the items included in the archive. */
            entries?: components["schemas"]["AttachmentArchiveEntry"][];
            /**
             * Format: int32
             * @description The number of items in the archive.
             */
            totalEntryCount?: number;
        };
        /** @description Metadata for an item in an attachment archive. */
        AttachmentArchiveItemReadable: {
            /**
             * Format: int64
             * @description The position of the item within the archive.
             */
            readonly index?: number;
            /** @description The label for the archive item. */
            readonly label?: string;
            /** @description The MIME type of the archive item. */
            readonly mediaType?: string;
            /** @description The path of the archive item. */
            readonly path?: string;
            /** @description The size of the archive item. */
            readonly size?: string;
        };
        /** @description Metadata for an archive (for example a zip) and its contents. */
        AttachmentArchiveMetadataReadable: {
            /** @description The list of the items included in the archive. */
            readonly entries?: components["schemas"]["AttachmentArchiveItemReadable"][];
            /**
             * Format: int64
             * @description The ID of the attachment.
             */
            readonly id?: number;
            /** @description The MIME type of the attachment. */
            readonly mediaType?: string;
            /** @description The name of the archive file. */
            readonly name?: string;
            /**
             * Format: int64
             * @description The number of items included in the archive.
             */
            readonly totalEntryCount?: number;
        };
        /** @description Metadata for an issue attachment. */
        AttachmentMetadata: {
            /** @description Details of the user who attached the file. */
            readonly author?: components["schemas"]["User"];
            /** @description The URL of the attachment. */
            readonly content?: string;
            /**
             * Format: date-time
             * @description The datetime the attachment was created.
             */
            readonly created?: string;
            /** @description The name of the attachment file. */
            readonly filename?: string;
            /**
             * Format: int64
             * @description The ID of the attachment.
             */
            readonly id?: number;
            /** @description The MIME type of the attachment. */
            readonly mimeType?: string;
            /** @description Additional properties of the attachment. */
            readonly properties?: {
                [key: string]: unknown;
            };
            /**
             * Format: uri
             * @description The URL of the attachment metadata details.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The size of the attachment.
             */
            readonly size?: number;
            /** @description The URL of a thumbnail representing the attachment. */
            readonly thumbnail?: string;
        };
        /** @description Details of the instance's attachment settings. */
        AttachmentSettings: {
            /** @description Whether the ability to add attachments is enabled. */
            readonly enabled?: boolean;
            /**
             * Format: int64
             * @description The maximum size of attachments permitted, in bytes.
             */
            readonly uploadLimit?: number;
        };
        /** @description An audit record. */
        AuditRecordBean: {
            /** @description The list of items associated with the changed record. */
            readonly associatedItems?: components["schemas"]["AssociatedItemBean"][];
            /** @description Deprecated, use `authorAccountId` instead. The key of the user who created the audit record. */
            readonly authorKey?: string;
            /** @description The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM). */
            readonly category?: string;
            /** @description The list of values changed in the record event. */
            readonly changedValues?: components["schemas"]["ChangedValueBean"][];
            /**
             * Format: date-time
             * @description The date and time on which the audit record was created.
             */
            readonly created?: string;
            /** @description The description of the audit record. */
            readonly description?: string;
            /** @description The event the audit record originated from. */
            readonly eventSource?: string;
            /**
             * Format: int64
             * @description The ID of the audit record.
             */
            readonly id?: number;
            objectItem?: components["schemas"]["AssociatedItemBean"];
            /** @description The URL of the computer where the creation of the audit record was initiated. */
            readonly remoteAddress?: string;
            /** @description The summary of the audit record. */
            readonly summary?: string;
        };
        /** @description Container for a list of audit records. */
        AuditRecords: {
            /**
             * Format: int32
             * @description The requested or default limit on the number of audit items to be returned.
             */
            readonly limit?: number;
            /**
             * Format: int32
             * @description The number of audit items skipped before the first item in this list.
             */
            readonly offset?: number;
            /** @description The list of audit items. */
            readonly records?: components["schemas"]["AuditRecordBean"][];
            /**
             * Format: int64
             * @description The total number of audit items returned.
             */
            readonly total?: number;
        };
        /** @description A field auto-complete suggestion. */
        AutoCompleteSuggestion: {
            /** @description The display name of a suggested item. If `fieldValue` or `predicateValue` are provided, the matching text is highlighted with the HTML bold tag. */
            displayName?: string;
            /** @description The value of a suggested item. */
            value?: string;
        };
        /** @description The results from a JQL query. */
        AutoCompleteSuggestions: {
            /** @description The list of suggested item. */
            results?: components["schemas"]["AutoCompleteSuggestion"][];
        };
        /** @description The details of the available dashboard gadget. */
        AvailableDashboardGadget: {
            /** @description The module key of the gadget type. */
            readonly moduleKey?: string;
            /** @description The title of the gadget. */
            readonly title: string;
            /** @description The URI of the gadget type. */
            readonly uri?: string;
        };
        /** @description The list of available gadgets. */
        AvailableDashboardGadgetsResponse: {
            /** @description The list of available gadgets. */
            readonly gadgets: components["schemas"]["AvailableDashboardGadget"][];
        };
        /** @description The Connect provided ecosystem rules available. */
        AvailableWorkflowConnectRule: {
            /** @description The add-on providing the rule. */
            addonKey?: string;
            /** @description The URL creation path segment defined in the Connect module. */
            createUrl?: string;
            /** @description The rule description. */
            description?: string;
            /** @description The URL edit path segment defined in the Connect module. */
            editUrl?: string;
            /** @description The module providing the rule. */
            moduleKey?: string;
            /** @description The rule name. */
            name?: string;
            /** @description The rule key. */
            ruleKey?: string;
            /**
             * @description The rule type.
             * @enum {string}
             */
            ruleType?: "Condition" | "Validator" | "Function" | "Screen";
            /** @description The URL view path segment defined in the Connect module. */
            viewUrl?: string;
        };
        /** @description The Forge provided ecosystem rules available. */
        AvailableWorkflowForgeRule: {
            /** @description The rule description. */
            description?: string;
            /** @description The unique ARI of the forge rule type. */
            id?: string;
            /** @description The rule name. */
            name?: string;
            /** @description The rule key. */
            ruleKey?: string;
            /**
             * @description The rule type.
             * @enum {string}
             */
            ruleType?: "Condition" | "Validator" | "Function" | "Screen";
        };
        /** @description The Atlassian provided system rules available. */
        AvailableWorkflowSystemRule: {
            /** @description The rule description. */
            description: string;
            /** @description List of rules that conflict with this one. */
            incompatibleRuleKeys: string[];
            /** @description Whether the rule can be added added to an initial transition. */
            isAvailableForInitialTransition: boolean;
            /** @description Whether the rule is visible. */
            isVisible: boolean;
            /** @description The rule name. */
            name: string;
            /** @description The rule key. */
            ruleKey: string;
            /**
             * @description The rule type.
             * @enum {string}
             */
            ruleType: "Condition" | "Validator" | "Function" | "Screen";
        };
        /** @description The trigger rules available. */
        AvailableWorkflowTriggers: {
            /** @description The list of available trigger types. */
            availableTypes: components["schemas"]["AvailableWorkflowTriggerTypes"][];
            /** @description The rule key of the rule. */
            ruleKey: string;
        };
        /** @description The list of available trigger types. */
        AvailableWorkflowTriggerTypes: {
            /** @description The description of the trigger rule. */
            description?: string;
            /** @description The name of the trigger rule. */
            name?: string;
            /** @description The type identifier of trigger rule. */
            type?: string;
        };
        /** @description Details of an avatar. */
        Avatar: {
            /** @description The file name of the avatar icon. Returned for system avatars. */
            readonly fileName?: string;
            /** @description The ID of the avatar. */
            id: string;
            /** @description Whether the avatar can be deleted. */
            readonly isDeletable?: boolean;
            /** @description Whether the avatar is used in Jira. For example, shown as a project's avatar. */
            readonly isSelected?: boolean;
            /** @description Whether the avatar is a system avatar. */
            readonly isSystemAvatar?: boolean;
            /** @description The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user. */
            readonly owner?: string;
            /** @description The list of avatar icon URLs. */
            readonly urls?: {
                [key: string]: string;
            };
        } & {
            [key: string]: unknown;
        };
        /** @description Details about system and custom avatars. */
        Avatars: {
            /** @description Custom avatars list. */
            readonly custom?: components["schemas"]["Avatar"][];
            /** @description System avatars list. */
            readonly system?: components["schemas"]["Avatar"][];
        };
        AvatarUrlsBean: {
            /**
             * Format: uri
             * @description The URL of the item's 16x16 pixel avatar.
             */
            "16x16"?: string;
            /**
             * Format: uri
             * @description The URL of the item's 24x24 pixel avatar.
             */
            "24x24"?: string;
            /**
             * Format: uri
             * @description The URL of the item's 32x32 pixel avatar.
             */
            "32x32"?: string;
            /**
             * Format: uri
             * @description The URL of the item's 48x48 pixel avatar.
             */
            "48x48"?: string;
        };
        /** @description Request bean for bulk changelog retrieval */
        BulkChangelogRequestBean: {
            /** @description List of field IDs to filter changelogs */
            fieldIds?: string[];
            /** @description List of issue IDs/keys to fetch changelogs for */
            issueIdsOrKeys: string[];
            /**
             * Format: int32
             * @description The maximum number of items to return per page
             * @default 1000
             */
            maxResults: number;
            /** @description The cursor for pagination */
            nextPageToken?: string;
        };
        /** @description A page of changelogs which is designed to handle multiple issues */
        BulkChangelogResponseBean: {
            /** @description The list of issues changelogs. */
            readonly issueChangeLogs?: components["schemas"]["IssueChangeLog"][];
            /** @description Continuation token to fetch the next page. If this result represents the last or the only page, this token will be null. */
            readonly nextPageToken?: string;
        };
        /** @description Details for changing owners of shareable entities */
        BulkChangeOwnerDetails: {
            /** @description Whether the name is fixed automatically if it's duplicated after changing owner. */
            autofixName: boolean;
            /** @description The account id of the new owner. */
            newOwner: string;
        };
        /** @description Details of the contextual configuration for a custom field. */
        BulkContextualConfiguration: {
            /** @description The field configuration. */
            configuration?: unknown;
            /** @description The ID of the custom field. */
            customFieldId: string;
            /** @description The ID of the field context the configuration is associated with. */
            readonly fieldContextId: string;
            /** @description The ID of the configuration. */
            id: string;
            /** @description The field value schema. */
            schema?: unknown;
        };
        /** @description Details of the options to create for a custom field. */
        BulkCustomFieldOptionCreateRequest: {
            /** @description Details of options to create. */
            options?: components["schemas"]["CustomFieldOptionCreate"][];
        };
        /** @description Details of the options to update for a custom field. */
        BulkCustomFieldOptionUpdateRequest: {
            /** @description Details of the options to update. */
            options?: components["schemas"]["CustomFieldOptionUpdate"][];
        };
        /** @description Errors of bulk edit action. */
        BulkEditActionError: {
            /** @description The error messages. */
            errorMessages: string[];
            /** @description The errors. */
            errors: {
                [key: string]: string;
            };
        };
        /** @description Bulk Edit Get Fields Response. */
        BulkEditGetFields: {
            /** @description The end cursor for use in pagination. */
            readonly endingBefore?: string;
            /** @description List of all the fields */
            readonly fields?: components["schemas"]["IssueBulkEditField"][];
            /** @description The start cursor for use in pagination. */
            readonly startingAfter?: string;
        };
        /** @description Details of a request to bulk edit shareable entity. */
        BulkEditShareableEntityRequest: {
            /**
             * @description Allowed action for bulk edit shareable entity
             * @enum {string}
             */
            action: "changeOwner" | "changePermission" | "addPermission" | "removePermission";
            /** @description The details of change owner action. */
            changeOwnerDetails?: components["schemas"]["BulkChangeOwnerDetails"];
            /** @description The id list of shareable entities to be changed. */
            entityIds: number[];
            /** @description Whether the actions are executed by users with Administer Jira global permission. */
            extendAdminPermissions?: boolean;
            /** @description The permission details to be changed. */
            permissionDetails?: components["schemas"]["PermissionDetails"];
        };
        /** @description Details of a request to bulk edit shareable entity. */
        BulkEditShareableEntityResponse: {
            /**
             * @description Allowed action for bulk edit shareable entity
             * @enum {string}
             */
            action: "changeOwner" | "changePermission" | "addPermission" | "removePermission";
            /** @description The mapping dashboard id to errors if any. */
            entityErrors?: {
                [key: string]: components["schemas"]["BulkEditActionError"];
            };
        };
        BulkFetchIssueRequestBean: {
            /** @description Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
             *
             *      *  `renderedFields` Returns field values rendered in HTML format.
             *      *  `names` Returns the display name of each field.
             *      *  `schema` Returns the schema describing a field type.
             *      *  `transitions` Returns all possible transitions for the issue.
             *      *  `operations` Returns all possible operations for the issue.
             *      *  `editmeta` Returns information about how each field can be edited.
             *      *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
             *      *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version. */
            expand?: string[];
            /** @description A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
             *
             *      *  `*all` Returns all fields.
             *      *  `*navigable` Returns navigable fields.
             *      *  Any issue field, prefixed with a minus to exclude.
             *
             *     The default is `*navigable`.
             *
             *     Examples:
             *
             *      *  `summary,comment` Returns the summary and comments fields only.
             *      *  `-description` Returns all navigable (default) fields except description.
             *      *  `*all,-comment` Returns all fields except comments.
             *
             *     Multiple `fields` parameters can be included in a request.
             *
             *     Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields. */
            fields?: string[];
            /** @description Reference fields by their key (rather than ID). The default is `false`. */
            fieldsByKeys?: boolean;
            /** @description An array of issue IDs or issue keys to fetch. You can mix issue IDs and keys in the same query. */
            issueIdsOrKeys: string[];
            /** @description A list of issue property keys of issue properties to be included in the results. A maximum of 5 issue property keys can be specified. */
            properties?: string[];
        };
        /** @description A container for the watch status of a list of issues. */
        BulkIssueIsWatching: {
            /** @description The map of issue ID to boolean watch status. */
            readonly issuesIsWatching?: {
                [key: string]: boolean;
            };
        };
        /** @description Bulk issue property update request details. */
        BulkIssuePropertyUpdateRequest: {
            /** @description EXPERIMENTAL. The Jira expression to calculate the value of the property. The value of the expression must be an object that can be converted to JSON, such as a number, boolean, string, list, or map. The context variables available to the expression are `issue` and `user`. Issues for which the expression returns a value whose JSON representation is longer than 32768 characters are ignored. */
            expression?: string;
            /** @description The bulk operation filter. */
            filter?: components["schemas"]["IssueFilterForBulkPropertySet"];
            /** @description The value of the property. The value must be a [valid](https://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters. */
            value?: unknown;
        };
        /** @description The list of requested issues & fields. */
        BulkIssueResults: {
            /** @description When Jira can't return an issue enumerated in a request due to a retriable error or payload constraint, we'll return the respective issue ID with a corresponding error message. This list is empty when there are no errors Issues which aren't found or that the user doesn't have permission to view won't be returned in this list. */
            readonly issueErrors?: components["schemas"]["IssueError"][];
            /** @description The list of issues. */
            readonly issues?: components["schemas"]["IssueBean"][];
        };
        BulkOperationErrorResponse: {
            errors?: components["schemas"]["ErrorMessage"][];
        };
        BulkOperationErrorResult: {
            elementErrors?: components["schemas"]["ErrorCollection"];
            /** Format: int32 */
            failedElementNumber?: number;
            /** Format: int32 */
            status?: number;
        };
        BulkOperationProgress: {
            /**
             * Format: date-time
             * @description A timestamp of when the task was submitted.
             */
            created?: string;
            /** @description Map of issue IDs for which the operation failed and that the user has permission to view, to their one or more reasons for failure. These reasons are open-ended text descriptions of the error and are not selected from a predefined list of standard reasons. */
            failedAccessibleIssues?: {
                [key: string]: string[];
            };
            /**
             * Format: int32
             * @description The number of issues that are either invalid or issues that the user doesn't have permission to view, regardless of the success or failure of the operation.
             */
            invalidOrInaccessibleIssueCount?: number;
            /** @description List of issue IDs for which the operation was successful and that the user has permission to view. */
            processedAccessibleIssues?: number[];
            /**
             * Format: int64
             * @description Progress of the task as a percentage.
             */
            progressPercent?: number;
            /**
             * Format: date-time
             * @description A timestamp of when the task was started.
             */
            started?: string;
            /**
             * @description The status of the task.
             * @enum {string}
             */
            status?: "ENQUEUED" | "RUNNING" | "COMPLETE" | "FAILED" | "CANCEL_REQUESTED" | "CANCELLED" | "DEAD";
            submittedBy?: components["schemas"]["User"];
            /** @description The ID of the task. */
            readonly taskId?: string;
            /**
             * Format: int32
             * @description The number of issues that the bulk operation was attempted on.
             */
            totalIssueCount?: number;
            /**
             * Format: date-time
             * @description A timestamp of when the task progress was last updated.
             */
            updated?: string;
        };
        /** @description Details of global and project permissions granted to the user. */
        BulkPermissionGrants: {
            /** @description List of permissions granted to the user. */
            globalPermissions: string[];
            /** @description List of project permissions and the projects and issues those permissions provide access to. */
            projectPermissions: components["schemas"]["BulkProjectPermissionGrants"][];
        };
        /** @description Details of global permissions to look up and project permissions with associated projects and issues to look up. */
        BulkPermissionsRequestBean: {
            /** @description The account ID of a user. */
            accountId?: string;
            /** @description Global permissions to look up. */
            globalPermissions?: string[];
            /** @description Project permissions with associated projects and issues to look up. */
            projectPermissions?: components["schemas"]["BulkProjectPermissions"][];
        };
        /** @description List of project permissions and the projects and issues those permissions grant access to. */
        BulkProjectPermissionGrants: {
            /** @description IDs of the issues the user has the permission for. */
            issues: number[];
            /** @description A project permission, */
            permission: string;
            /** @description IDs of the projects the user has the permission for. */
            projects: number[];
        };
        /** @description Details of project permissions and associated issues and projects to look up. */
        BulkProjectPermissions: {
            /** @description List of issue IDs. */
            issues?: number[];
            /** @description List of project permissions. */
            permissions: string[];
            /** @description List of project IDs. */
            projects?: number[];
        };
        /** @description Bulk Transition Get Available Transitions Response. */
        BulkTransitionGetAvailableTransitions: {
            /** @description List of available transitions for bulk transition operation for requested issues grouped by workflow */
            readonly availableTransitions?: components["schemas"]["IssueBulkTransitionForWorkflow"][];
            /** @description The end cursor for use in pagination. */
            readonly endingBefore?: string;
            /** @description The start cursor for use in pagination. */
            readonly startingAfter?: string;
        };
        BulkTransitionSubmitInput: {
            /** @description List of all the issue IDs or keys that are to be bulk transitioned. */
            selectedIssueIdsOrKeys: string[];
            /** @description The ID of the transition that is to be performed on the issues. */
            transitionId: string;
        };
        /** @description A change item. */
        ChangeDetails: {
            /** @description The name of the field changed. */
            readonly field?: string;
            /** @description The ID of the field changed. */
            readonly fieldId?: string;
            /** @description The type of the field changed. */
            readonly fieldtype?: string;
            /** @description The details of the original value. */
            readonly from?: string;
            /** @description The details of the original value as a string. */
            readonly fromString?: string;
            /** @description The details of the new value. */
            readonly to?: string;
            /** @description The details of the new value as a string. */
            readonly toString?: string;
        };
        /** @description Details of names changed in the record event. */
        ChangedValueBean: {
            /** @description The value of the field before the change. */
            readonly changedFrom?: string;
            /** @description The value of the field after the change. */
            readonly changedTo?: string;
            /** @description The name of the field changed. */
            readonly fieldName?: string;
        };
        /** @description Details of a changed worklog. */
        ChangedWorklog: {
            /** @description Details of properties associated with the change. */
            readonly properties?: components["schemas"]["EntityProperty"][];
            /**
             * Format: int64
             * @description The datetime of the change.
             */
            readonly updatedTime?: number;
            /**
             * Format: int64
             * @description The ID of the worklog.
             */
            readonly worklogId?: number;
        };
        /** @description List of changed worklogs. */
        ChangedWorklogs: {
            lastPage?: boolean;
            /**
             * Format: uri
             * @description The URL of the next list of changed worklogs.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of this changed worklogs list.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The datetime of the first worklog item in the list.
             */
            readonly since?: number;
            /**
             * Format: int64
             * @description The datetime of the last worklog item in the list.
             */
            readonly until?: number;
            /** @description Changed worklog list. */
            readonly values?: components["schemas"]["ChangedWorklog"][];
        };
        /** @description The account ID of the new owner. */
        ChangeFilterOwner: {
            /** @description The account ID of the new owner. */
            accountId: string;
        };
        /** @description A log of changes made to issue fields. Changelogs related to workflow associations are currently being deprecated. */
        Changelog: {
            /** @description The user who made the change. */
            readonly author?: components["schemas"]["UserDetails"];
            /**
             * Format: date-time
             * @description The date on which the change took place.
             */
            readonly created?: string;
            /** @description The history metadata associated with the changed. */
            readonly historyMetadata?: components["schemas"]["HistoryMetadata"];
            /** @description The ID of the changelog. */
            readonly id?: string;
            /** @description The list of items changed. */
            readonly items?: components["schemas"]["ChangeDetails"][];
        };
        /** @description Details of an issue navigator column item. */
        ColumnItem: {
            /** @description The issue navigator column label. */
            label?: string;
            /** @description The issue navigator column value. */
            value?: string;
        };
        ColumnRequestBody: {
            columns?: string[];
        };
        /** @description A comment. */
        Comment: {
            /** @description The ID of the user who created the comment. */
            readonly author?: components["schemas"]["UserDetails"];
            /** @description The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). */
            body?: unknown;
            /**
             * Format: date-time
             * @description The date and time at which the comment was created.
             */
            readonly created?: string;
            /** @description The ID of the comment. */
            readonly id?: string;
            /** @description Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature. */
            readonly jsdAuthorCanSeeRequest?: boolean;
            /** @description Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation. */
            readonly jsdPublic?: boolean;
            /** @description A list of comment properties. Optional on create and update. */
            properties?: components["schemas"]["EntityProperty"][];
            /** @description The rendered version of the comment. */
            readonly renderedBody?: string;
            /** @description The URL of the comment. */
            readonly self?: string;
            /** @description The ID of the user who updated the comment last. */
            readonly updateAuthor?: components["schemas"]["UserDetails"];
            /**
             * Format: date-time
             * @description The date and time at which the comment was updated last.
             */
            readonly updated?: string;
            /** @description The group or role to which this comment is visible. Optional on create and update. */
            visibility?: components["schemas"]["Visibility"];
        } & {
            [key: string]: unknown;
        };
        /** @description Count of issues assigned to a component. */
        ComponentIssuesCount: {
            /**
             * Format: int64
             * @description The count of issues assigned to a component.
             */
            readonly issueCount?: number;
            /**
             * Format: uri
             * @description The URL for this count of issues for a component.
             */
            readonly self?: string;
        };
        ComponentJsonBean: {
            ari?: string;
            description?: string;
            id?: string;
            metadata?: {
                [key: string]: string;
            };
            name?: string;
            self?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details about a component with a count of the issues it contains. */
        ComponentWithIssueCount: {
            /** @description The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component. */
            assignee?: components["schemas"]["User"];
            /**
             * @description The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:
             *
             *      *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
             *      *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
             *      *  `UNASSIGNED` an assignee is not set for issues created with this component.
             *      *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
             * @enum {string}
             */
            readonly assigneeType?: "PROJECT_DEFAULT" | "COMPONENT_LEAD" | "PROJECT_LEAD" | "UNASSIGNED";
            /** @description The description for the component. */
            readonly description?: string;
            /** @description The unique identifier for the component. */
            readonly id?: string;
            /** @description Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned. */
            readonly isAssigneeTypeValid?: boolean;
            /**
             * Format: int64
             * @description Count of issues for the component.
             */
            readonly issueCount?: number;
            /** @description The user details for the component's lead user. */
            lead?: components["schemas"]["User"];
            /** @description The name for the component. */
            readonly name?: string;
            /** @description The key of the project to which the component is assigned. */
            readonly project?: string;
            /**
             * Format: int64
             * @description Not used.
             */
            readonly projectId?: number;
            /** @description The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee. */
            realAssignee?: components["schemas"]["User"];
            /**
             * @description The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
             *
             *      *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
             *      *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
             *      *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
             *      *  `PROJECT_DEFAULT` when none of the preceding cases are true.
             * @enum {string}
             */
            readonly realAssigneeType?: "PROJECT_DEFAULT" | "COMPONENT_LEAD" | "PROJECT_LEAD" | "UNASSIGNED";
            /**
             * Format: uri
             * @description The URL for this count of the issues contained in the component.
             */
            readonly self?: string;
        };
        /** @description A JQL query clause that consists of nested clauses. For example, `(labels in (urgent, blocker) OR lastCommentedBy = currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, "A OR B AND C" is parsed as "(A OR B) AND C". See Setting the precedence of operators for more information about precedence in JQL queries.` */
        CompoundClause: {
            /** @description The list of nested clauses. */
            clauses: components["schemas"]["JqlQueryClause"][];
            /**
             * @description The operator between the clauses.
             * @enum {string}
             */
            operator: "and" | "or" | "not";
        };
        /** @description The conditions group associated with the transition. */
        ConditionGroupConfiguration: {
            /** @description The nested conditions of the condition group. */
            conditionGroups?: components["schemas"]["ConditionGroupConfiguration"][];
            /** @description The rules for this condition. */
            conditions?: components["schemas"]["WorkflowRuleConfiguration"][];
            /**
             * @description Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
             * @enum {string}
             */
            operation?: "ANY" | "ALL";
        } | null;
        /** @description The conditions group associated with the transition. */
        ConditionGroupUpdate: {
            /** @description The nested conditions of the condition group. */
            conditionGroups?: components["schemas"]["ConditionGroupUpdate"][];
            /** @description The rules for this condition. */
            conditions?: components["schemas"]["WorkflowRuleConfiguration"][];
            /**
             * @description Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
             * @enum {string}
             */
            operation: "ANY" | "ALL";
        } | null;
        /** @description Details about the configuration of Jira. */
        Configuration: {
            /** @description Whether the ability to add attachments to issues is enabled. */
            readonly attachmentsEnabled?: boolean;
            /** @description Whether the ability to link issues is enabled. */
            readonly issueLinkingEnabled?: boolean;
            /** @description Whether the ability to create subtasks for issues is enabled. */
            readonly subTasksEnabled?: boolean;
            /** @description The configuration of time tracking. */
            readonly timeTrackingConfiguration?: components["schemas"]["TimeTrackingConfiguration"];
            /** @description Whether the ability to track time is enabled. This property is deprecated. */
            readonly timeTrackingEnabled?: boolean;
            /** @description Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details. */
            readonly unassignedIssuesAllowed?: boolean;
            /** @description Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details. */
            readonly votingEnabled?: boolean;
            /** @description Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details. */
            readonly watchingEnabled?: boolean;
        };
        /** @description List of custom fields identifiers which will be used to filter configurations */
        ConfigurationsListParameters: {
            /** @description List of IDs or keys of the custom fields. It can be a mix of IDs and keys in the same query. */
            fieldIdsOrKeys: string[];
        };
        /** @description A list of custom field details. */
        ConnectCustomFieldValue: {
            /**
             * @description The type of custom field.
             * @enum {string}
             */
            _type: "StringIssueField" | "NumberIssueField" | "RichTextIssueField" | "SingleSelectIssueField" | "MultiSelectIssueField" | "TextIssueField";
            /** @description The custom field ID. */
            fieldID: number;
            /** @description The issue ID. */
            issueID: number;
            /** @description The value of number type custom field when `_type` is `NumberIssueField`. */
            number?: number;
            /** @description The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`. */
            optionID?: string;
            /** @description The value of richText type custom field when `_type` is `RichTextIssueField`. */
            richText?: string;
            /** @description The value of string type custom field when `_type` is `StringIssueField`. */
            string?: string;
            /** @description The value of of text custom field type when `_type` is `TextIssueField`. */
            text?: string;
        };
        /** @description Details of updates for a custom field. */
        ConnectCustomFieldValues: {
            /** @description The list of custom field update details. */
            updateValueList?: components["schemas"]["ConnectCustomFieldValue"][];
        };
        /**
         * @description A [Connect module](https://developer.atlassian.com/cloud/jira/platform/about-jira-modules/) in the same format as in the
         *     [app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
         * @example {
         *       "description": {
         *         "value": "field with team"
         *       },
         *       "type": "single_select",
         *       "extractions": [
         *         {
         *           "path": "category",
         *           "type": "text",
         *           "name": "categoryName"
         *         }
         *       ],
         *       "name": {
         *         "value": "Team"
         *       },
         *       "key": "team-field"
         *     }
         */
        ConnectModule: Record<string, never>;
        /** @example {
         *       "jiraEntityProperties": [
         *         {
         *           "keyConfigurations": [
         *             {
         *               "extractions": [
         *                 {
         *                   "objectName": "extension",
         *                   "type": "text",
         *                   "alias": "attachmentExtension"
         *                 }
         *               ],
         *               "propertyKey": "attachment"
         *             }
         *           ],
         *           "entityType": "issue",
         *           "name": {
         *             "value": "Attachment Index Document"
         *           },
         *           "key": "dynamic-attachment-entity-property"
         *         }
         *       ],
         *       "jiraIssueFields": [
         *         {
         *           "description": {
         *             "value": "A dynamically added single-select field"
         *           },
         *           "type": "single_select",
         *           "extractions": [
         *             {
         *               "path": "category",
         *               "type": "text",
         *               "name": "categoryName"
         *             }
         *           ],
         *           "name": {
         *             "value": "Dynamic single select"
         *           },
         *           "key": "dynamic-select-field"
         *         }
         *       ]
         *     } */
        ConnectModules: {
            /** @description A list of app modules in the same format as the `modules` property in the
             *     [app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/). */
            modules: components["schemas"]["ConnectModule"][];
        };
        /** @description A workflow transition rule. */
        ConnectWorkflowTransitionRule: {
            configuration: components["schemas"]["RuleConfiguration"];
            /**
             * @description The ID of the transition rule.
             * @example 123
             */
            id: string;
            /**
             * @description The key of the rule, as defined in the Connect app descriptor.
             * @example WorkflowKey
             */
            key: string;
            transition?: components["schemas"]["WorkflowTransition"];
        };
        /** @description The list of features on a project. */
        ContainerForProjectFeatures: {
            /** @description The project features. */
            features?: components["schemas"]["ProjectFeature"][];
        };
        /** @description Container for a list of registered webhooks. Webhook details are returned in the same order as the request. */
        ContainerForRegisteredWebhooks: {
            /** @description A list of registered webhooks. */
            webhookRegistrationResult?: components["schemas"]["RegisteredWebhook"][];
        };
        /** @description Container for a list of webhook IDs. */
        ContainerForWebhookIDs: {
            /** @description A list of webhook IDs. */
            webhookIds: number[];
        };
        /** @description A container for a list of workflow schemes together with the projects they are associated with. */
        ContainerOfWorkflowSchemeAssociations: {
            /** @description A list of workflow schemes together with projects they are associated with. */
            values: components["schemas"]["WorkflowSchemeAssociations"][];
        };
        /** @description A context. */
        Context: {
            /**
             * Format: int64
             * @description The ID of the context.
             */
            readonly id?: number;
            /** @description The name of the context. */
            readonly name?: string;
            /** @description The scope of the context. */
            scope?: components["schemas"]["Scope"];
        };
        /** @description The project and issue type mapping with a matching custom field context. */
        ContextForProjectAndIssueType: {
            /** @description The ID of the custom field context. */
            contextId: string;
            /** @description The ID of the issue type. */
            issueTypeId: string;
            /** @description The ID of the project. */
            projectId: string;
        };
        /** @description Details of the contextual configuration for a custom field. */
        ContextualConfiguration: {
            /** @description The field configuration. */
            configuration?: unknown;
            /** @description The ID of the field context the configuration is associated with. */
            readonly fieldContextId: string;
            /** @description The ID of the configuration. */
            id: string;
            /** @description The field value schema. */
            schema?: unknown;
        };
        /** @description The converted JQL queries. */
        ConvertedJQLQueries: {
            /** @description List of queries containing user information that could not be mapped to an existing user */
            queriesWithUnknownUsers?: components["schemas"]["JQLQueryWithUnknownUsers"][];
            /** @description The list of converted query strings with account IDs in place of user identifiers. */
            queryStrings?: string[];
        };
        CreateCrossProjectReleaseRequest: {
            /** @description The cross-project release name. */
            name: string;
            /** @description The IDs of the releases to include in the cross-project release. */
            releaseIds?: number[];
        };
        /** @description The details of a created custom field context. */
        CreateCustomFieldContext: {
            /** @description The description of the context. */
            description?: string;
            /** @description The ID of the context. */
            readonly id?: string;
            /** @description The list of issue types IDs for the context. If the list is empty, the context refers to all issue types. */
            issueTypeIds?: string[];
            /** @description The name of the context. */
            name: string;
            /** @description The list of project IDs associated with the context. If the list is empty, the context is global. */
            projectIds?: string[];
        };
        CreateCustomFieldRequest: {
            /**
             * Format: int64
             * @description The custom field ID.
             */
            customFieldId: number;
            /** @description Allows filtering issues based on their values for the custom field. */
            filter?: boolean;
        };
        CreateDateFieldRequest: {
            /**
             * Format: int64
             * @description A date custom field ID. This is required if the type is "DateCustomField".
             */
            dateCustomFieldId?: number;
            /**
             * @description The date field type. This must be "DueDate", "TargetStartDate", "TargetEndDate" or "DateCustomField".
             * @enum {string}
             */
            type: "DueDate" | "TargetStartDate" | "TargetEndDate" | "DateCustomField";
        };
        /** @description Details about a created issue or subtask. */
        CreatedIssue: {
            /** @description The ID of the created issue or subtask. */
            readonly id?: string;
            /** @description The key of the created issue or subtask. */
            readonly key?: string;
            /** @description The URL of the created issue or subtask. */
            readonly self?: string;
            /** @description The response code and messages related to any requested transition. */
            readonly transition?: components["schemas"]["NestedResponse"];
            /** @description The response code and messages related to any requested watchers. */
            readonly watchers?: components["schemas"]["NestedResponse"];
        };
        /** @description Details about the issues created and the errors for requests that failed. */
        CreatedIssues: {
            /** @description Error details for failed issue creation requests. */
            readonly errors?: components["schemas"]["BulkOperationErrorResult"][];
            /** @description Details of the issues created. */
            readonly issues?: components["schemas"]["CreatedIssue"][];
        };
        CreateExclusionRulesRequest: {
            /** @description The IDs of the issues to exclude from the plan. */
            issueIds?: number[];
            /** @description The IDs of the issue types to exclude from the plan. */
            issueTypeIds?: number[];
            /**
             * Format: int32
             * @description Issues completed this number of days ago will be excluded from the plan.
             */
            numberOfDaysToShowCompletedIssues?: number;
            /** @description The IDs of the releases to exclude from the plan. */
            releaseIds?: number[];
            /** @description The IDs of the work status categories to exclude from the plan. */
            workStatusCategoryIds?: number[];
            /** @description The IDs of the work statuses to exclude from the plan. */
            workStatusIds?: number[];
        };
        /** @description Issue security scheme and it's details */
        CreateIssueSecuritySchemeDetails: {
            /** @description The description of the issue security scheme. */
            description?: string;
            /** @description The list of scheme levels which should be added to the security scheme. */
            levels?: components["schemas"]["SecuritySchemeLevelBean"][];
            /** @description The name of the issue security scheme. Must be unique (case-insensitive). */
            name: string;
        } & {
            [key: string]: unknown;
        };
        CreateIssueSourceRequest: {
            /**
             * @description The issue source type. This must be "Board", "Project" or "Filter".
             * @enum {string}
             */
            type: "Board" | "Project" | "Filter";
            /**
             * Format: int64
             * @description The issue source value. This must be a board ID if the type is "Board", a project ID if the type is "Project" or a filter ID if the type is "Filter".
             */
            value: number;
        };
        /** @description Details of an notification scheme. */
        CreateNotificationSchemeDetails: {
            /** @description The description of the notification scheme. */
            description?: string;
            /** @description The name of the notification scheme. Must be unique (case-insensitive). */
            name: string;
            /** @description The list of notifications which should be added to the notification scheme. */
            notificationSchemeEvents?: components["schemas"]["NotificationSchemeEventDetails"][];
        } & {
            [key: string]: unknown;
        };
        CreatePermissionHolderRequest: {
            /**
             * @description The permission holder type. This must be "Group" or "AccountId".
             * @enum {string}
             */
            type: "Group" | "AccountId";
            /** @description The permission holder value. This must be a group name if the type is "Group" or an account ID if the type is "AccountId". */
            value: string;
        };
        CreatePermissionRequest: {
            /** @description The permission holder. */
            holder: components["schemas"]["CreatePermissionHolderRequest"];
            /**
             * @description The permission type. This must be "View" or "Edit".
             * @enum {string}
             */
            type: "View" | "Edit";
        };
        CreatePlanOnlyTeamRequest: {
            /**
             * Format: double
             * @description The capacity for the plan-only team.
             */
            capacity?: number;
            /**
             * Format: int64
             * @description The ID of the issue source for the plan-only team.
             */
            issueSourceId?: number;
            /** @description The account IDs of the plan-only team members. */
            memberAccountIds?: string[];
            /** @description The plan-only team name. */
            name: string;
            /**
             * @description The planning style for the plan-only team. This must be "Scrum" or "Kanban".
             * @enum {string}
             */
            planningStyle: "Scrum" | "Kanban";
            /**
             * Format: int64
             * @description The sprint length for the plan-only team.
             */
            sprintLength?: number;
        };
        CreatePlanRequest: {
            /** @description The cross-project releases to include in the plan. */
            crossProjectReleases?: components["schemas"]["CreateCrossProjectReleaseRequest"][];
            /** @description The custom fields for the plan. */
            customFields?: components["schemas"]["CreateCustomFieldRequest"][];
            /** @description The exclusion rules for the plan. */
            exclusionRules?: components["schemas"]["CreateExclusionRulesRequest"];
            /** @description The issue sources to include in the plan. */
            issueSources: components["schemas"]["CreateIssueSourceRequest"][];
            /** @description The account ID of the plan lead. */
            leadAccountId?: string;
            /** @description The plan name. */
            name: string;
            /** @description The permissions for the plan. */
            permissions?: components["schemas"]["CreatePermissionRequest"][];
            /** @description The scheduling settings for the plan. */
            scheduling: components["schemas"]["CreateSchedulingRequest"];
        };
        /** @description Details of an issue priority. */
        CreatePriorityDetails: {
            /**
             * Format: int64
             * @description The ID for the avatar for the priority. Either the iconUrl or avatarId must be defined, but not both. This parameter is nullable and will become mandatory once the iconUrl parameter is deprecated.
             */
            avatarId?: number;
            /** @description The description of the priority. */
            description?: string | null;
            /**
             * @description The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used. Either the iconUrl or avatarId must be defined, but not both.
             * @enum {string|null}
             */
            iconUrl?: "/images/icons/priorities/blocker.png" | "/images/icons/priorities/critical.png" | "/images/icons/priorities/high.png" | "/images/icons/priorities/highest.png" | "/images/icons/priorities/low.png" | "/images/icons/priorities/lowest.png" | "/images/icons/priorities/major.png" | "/images/icons/priorities/medium.png" | "/images/icons/priorities/minor.png" | "/images/icons/priorities/trivial.png" | "/images/icons/priorities/blocker_new.png" | "/images/icons/priorities/critical_new.png" | "/images/icons/priorities/high_new.png" | "/images/icons/priorities/highest_new.png" | "/images/icons/priorities/low_new.png" | "/images/icons/priorities/lowest_new.png" | "/images/icons/priorities/major_new.png" | "/images/icons/priorities/medium_new.png" | "/images/icons/priorities/minor_new.png" | "/images/icons/priorities/trivial_new.png" | null;
            /** @description The name of the priority. Must be unique. */
            name: string;
            /** @description The status color of the priority in 3-digit or 6-digit hexadecimal format. */
            statusColor: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of a new priority scheme */
        CreatePrioritySchemeDetails: {
            /**
             * Format: int64
             * @description The ID of the default priority for the priority scheme.
             */
            defaultPriorityId: number;
            /** @description The description of the priority scheme. */
            description?: string;
            /** @description Instructions to migrate the priorities of issues.
             *
             *     `in` mappings are used to migrate the priorities of issues to priorities used within the priority scheme.
             *
             *     `out` mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.
             *
             *      *  When **priorities** are **added** to the new priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.
             *      *  When **priorities** are **removed** from the new priority scheme, no mapping needs to be provided as the removed priorities are not used by any issues.
             *      *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)' priority scheme(s).
             *
             *          *  An `in` mapping must be provided for each of these priorities.
             *      *  When **projects** are **removed** from the priority scheme, no mapping needs to be provided as the removed projects are not using the priorities of the new priority scheme.
             *
             *     For more information on `in` and `out` mappings, see the child properties documentation for the `PriorityMapping` object below. */
            mappings?: components["schemas"]["PriorityMapping"];
            /** @description The name of the priority scheme. Must be unique. */
            name: string;
            /** @description The IDs of priorities in the scheme. */
            priorityIds: number[];
            /** @description The IDs of projects that will use the priority scheme. */
            projectIds?: number[];
        };
        /** @description Details about the project. */
        CreateProjectDetails: {
            /**
             * @description The default assignee when creating issues for this project.
             * @enum {string}
             */
            assigneeType?: "PROJECT_LEAD" | "UNASSIGNED";
            /**
             * Format: int64
             * @description An integer value for the project's avatar.
             */
            avatarId?: number;
            /**
             * Format: int64
             * @description The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.
             */
            categoryId?: number;
            /** @description A brief description of the project. */
            description?: string;
            /**
             * Format: int64
             * @description The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-3-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.
             */
            fieldConfigurationScheme?: number;
            /**
             * Format: int64
             * @description The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
             */
            issueSecurityScheme?: number;
            /**
             * Format: int64
             * @description The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-3-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.
             */
            issueTypeScheme?: number;
            /**
             * Format: int64
             * @description The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-3-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.
             */
            issueTypeScreenScheme?: number;
            /** @description Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters. */
            key: string;
            /** @description This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`. */
            lead?: string;
            /** @description The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`. */
            leadAccountId?: string;
            /** @description The name of the project. */
            name: string;
            /**
             * Format: int64
             * @description The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
             */
            notificationScheme?: number;
            /**
             * Format: int64
             * @description The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
             */
            permissionScheme?: number;
            /**
             * @description A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
             * @enum {string}
             */
            projectTemplateKey?: "com.pyxis.greenhopper.jira:gh-simplified-agility-kanban" | "com.pyxis.greenhopper.jira:gh-simplified-agility-scrum" | "com.pyxis.greenhopper.jira:gh-simplified-basic" | "com.pyxis.greenhopper.jira:gh-simplified-kanban-classic" | "com.pyxis.greenhopper.jira:gh-simplified-scrum-classic" | "com.pyxis.greenhopper.jira:gh-cross-team-template" | "com.pyxis.greenhopper.jira:gh-cross-team-planning-template" | "com.atlassian.servicedesk:simplified-it-service-management" | "com.atlassian.servicedesk:simplified-it-service-management-basic" | "com.atlassian.servicedesk:simplified-it-service-management-operations" | "com.atlassian.servicedesk:simplified-general-service-desk" | "com.atlassian.servicedesk:simplified-general-service-desk-it" | "com.atlassian.servicedesk:simplified-general-service-desk-business" | "com.atlassian.servicedesk:simplified-internal-service-desk" | "com.atlassian.servicedesk:simplified-external-service-desk" | "com.atlassian.servicedesk:simplified-hr-service-desk" | "com.atlassian.servicedesk:simplified-facilities-service-desk" | "com.atlassian.servicedesk:simplified-legal-service-desk" | "com.atlassian.servicedesk:simplified-marketing-service-desk" | "com.atlassian.servicedesk:simplified-finance-service-desk" | "com.atlassian.servicedesk:simplified-analytics-service-desk" | "com.atlassian.servicedesk:simplified-design-service-desk" | "com.atlassian.servicedesk:simplified-sales-service-desk" | "com.atlassian.servicedesk:simplified-halp-service-desk" | "com.atlassian.servicedesk:simplified-blank-project-it" | "com.atlassian.servicedesk:simplified-blank-project-business" | "com.atlassian.servicedesk:next-gen-it-service-desk" | "com.atlassian.servicedesk:next-gen-hr-service-desk" | "com.atlassian.servicedesk:next-gen-legal-service-desk" | "com.atlassian.servicedesk:next-gen-marketing-service-desk" | "com.atlassian.servicedesk:next-gen-facilities-service-desk" | "com.atlassian.servicedesk:next-gen-general-service-desk" | "com.atlassian.servicedesk:next-gen-general-it-service-desk" | "com.atlassian.servicedesk:next-gen-general-business-service-desk" | "com.atlassian.servicedesk:next-gen-analytics-service-desk" | "com.atlassian.servicedesk:next-gen-finance-service-desk" | "com.atlassian.servicedesk:next-gen-design-service-desk" | "com.atlassian.servicedesk:next-gen-sales-service-desk" | "com.atlassian.jira-core-project-templates:jira-core-simplified-content-management" | "com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval" | "com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking" | "com.atlassian.jira-core-project-templates:jira-core-simplified-process-control" | "com.atlassian.jira-core-project-templates:jira-core-simplified-procurement" | "com.atlassian.jira-core-project-templates:jira-core-simplified-project-management" | "com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment" | "com.atlassian.jira-core-project-templates:jira-core-simplified-task-";
            /**
             * @description The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
             * @enum {string}
             */
            projectTypeKey?: "software" | "service_desk" | "business";
            /** @description A link to information about this project, such as project documentation */
            url?: string;
            /**
             * Format: int64
             * @description The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-3-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.
             */
            workflowScheme?: number;
        };
        /** @description Details of an issue resolution. */
        CreateResolutionDetails: {
            /** @description The description of the resolution. */
            description?: string;
            /** @description The name of the resolution. Must be unique (case-insensitive). */
            name: string;
        } & {
            [key: string]: unknown;
        };
        CreateSchedulingRequest: {
            /**
             * @description The dependencies for the plan. This must be "Sequential" or "Concurrent".
             * @enum {string}
             */
            dependencies?: "Sequential" | "Concurrent";
            /** @description The end date field for the plan. */
            endDate?: components["schemas"]["CreateDateFieldRequest"];
            /**
             * @description The estimation unit for the plan. This must be "StoryPoints", "Days" or "Hours".
             * @enum {string}
             */
            estimation: "StoryPoints" | "Days" | "Hours";
            /**
             * @description The inferred dates for the plan. This must be "None", "SprintDates" or "ReleaseDates".
             * @enum {string}
             */
            inferredDates?: "None" | "SprintDates" | "ReleaseDates";
            /** @description The start date field for the plan. */
            startDate?: components["schemas"]["CreateDateFieldRequest"];
        };
        /** @description The details of a UI modification. */
        CreateUiModificationDetails: {
            /** @description List of contexts of the UI modification. The maximum number of contexts is 1000. */
            contexts?: components["schemas"]["UiModificationContextDetails"][];
            /** @description The data of the UI modification. The maximum size of the data is 50000 characters. */
            data?: string;
            /** @description The description of the UI modification. The maximum length is 255 characters. */
            description?: string;
            /** @description The name of the UI modification. The maximum length is 255 characters. */
            name: string;
        };
        CreateUpdateRoleRequestBean: {
            /** @description A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role. */
            description?: string;
            /** @description The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role. */
            name?: string;
        };
        /** @description A workflow transition condition. */
        CreateWorkflowCondition: {
            /** @description The list of workflow conditions. */
            conditions?: components["schemas"]["CreateWorkflowCondition"][];
            /** @description EXPERIMENTAL. The configuration of the transition rule. */
            configuration?: {
                [key: string]: unknown;
            };
            /**
             * @description The compound condition operator.
             * @enum {string}
             */
            operator?: "AND" | "OR";
            /** @description The type of the transition rule. */
            type?: string;
        };
        /** @description The details of a workflow. */
        CreateWorkflowDetails: {
            /** @description The description of the workflow. The maximum length is 1000 characters. */
            description?: string;
            /** @description The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace. */
            name: string;
            /** @description The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition. */
            statuses: components["schemas"]["CreateWorkflowStatusDetails"][];
            /** @description The transitions of the workflow. For the request to be valid, these transitions must:
             *
             *      *  include one *initial* transition.
             *      *  not use the same name for a *global* and *directed* transition.
             *      *  have a unique name for each *global* transition.
             *      *  have a unique 'to' status for each *global* transition.
             *      *  have unique names for each transition from a status.
             *      *  not have a 'from' status on *initial* and *global* transitions.
             *      *  have a 'from' status on *directed* transitions.
             *
             *     All the transition statuses must be included in `statuses`. */
            transitions: components["schemas"]["CreateWorkflowTransitionDetails"][];
        };
        /** @description The details of a transition status. */
        CreateWorkflowStatusDetails: {
            /** @description The ID of the status. */
            id: string;
            /** @description The properties of the status. */
            properties?: {
                [key: string]: string;
            };
        };
        /** @description The details of a workflow transition. */
        CreateWorkflowTransitionDetails: {
            /** @description The description of the transition. The maximum length is 1000 characters. */
            description?: string;
            /** @description The statuses the transition can start from. */
            from?: string[];
            /** @description The name of the transition. The maximum length is 60 characters. */
            name: string;
            /** @description The properties of the transition. */
            properties?: {
                [key: string]: string;
            };
            /** @description The rules of the transition. */
            rules?: components["schemas"]["CreateWorkflowTransitionRulesDetails"];
            /** @description The screen of the transition. */
            screen?: components["schemas"]["CreateWorkflowTransitionScreenDetails"];
            /** @description The status the transition goes to. */
            to: string;
            /**
             * @description The type of the transition.
             * @enum {string}
             */
            type: "global" | "initial" | "directed";
        };
        /** @description A workflow transition rule. */
        CreateWorkflowTransitionRule: {
            /** @description EXPERIMENTAL. The configuration of the transition rule. */
            configuration?: {
                [key: string]: unknown;
            };
            /** @description The type of the transition rule. */
            type: string;
        };
        /** @description The details of a workflow transition rules. */
        CreateWorkflowTransitionRulesDetails: {
            /** @description The workflow conditions. */
            conditions?: components["schemas"]["CreateWorkflowCondition"];
            /** @description The workflow post functions.
             *
             *     **Note:** The default post functions are always added to the *initial* transition, as in:
             *
             *         "postFunctions": [
             *             {
             *                 "type": "IssueCreateFunction"
             *             },
             *             {
             *                 "type": "IssueReindexFunction"
             *             },
             *             {
             *                 "type": "FireIssueEventFunction",
             *                 "configuration": {
             *                     "event": {
             *                         "id": "1",
             *                         "name": "issue_created"
             *                     }
             *                 }
             *             }
             *         ]
             *
             *     **Note:** The default post functions are always added to the *global* and *directed* transitions, as in:
             *
             *         "postFunctions": [
             *             {
             *                 "type": "UpdateIssueStatusFunction"
             *             },
             *             {
             *                 "type": "CreateCommentFunction"
             *             },
             *             {
             *                 "type": "GenerateChangeHistoryFunction"
             *             },
             *             {
             *                 "type": "IssueReindexFunction"
             *             },
             *             {
             *                 "type": "FireIssueEventFunction",
             *                 "configuration": {
             *                     "event": {
             *                         "id": "13",
             *                         "name": "issue_generic"
             *                     }
             *                 }
             *             }
             *         ] */
            postFunctions?: components["schemas"]["CreateWorkflowTransitionRule"][];
            /** @description The workflow validators.
             *
             *     **Note:** The default permission validator is always added to the *initial* transition, as in:
             *
             *         "validators": [
             *             {
             *                 "type": "PermissionValidator",
             *                 "configuration": {
             *                     "permissionKey": "CREATE_ISSUES"
             *                 }
             *             }
             *         ] */
            validators?: components["schemas"]["CreateWorkflowTransitionRule"][];
        };
        /** @description The details of a transition screen. */
        CreateWorkflowTransitionScreenDetails: {
            /** @description The ID of the screen. */
            id: string;
        };
        CustomContextVariable: {
            /** @description Type of custom context variable. */
            type: string;
        } & (components["schemas"]["UserContextVariable"] | components["schemas"]["IssueContextVariable"] | components["schemas"]["JsonContextVariable"]);
        /** @description Details of configurations for a custom field. */
        CustomFieldConfigurations: {
            /** @description The list of custom field configuration details. */
            configurations: components["schemas"]["ContextualConfiguration"][];
        };
        /** @description The details of a custom field context. */
        CustomFieldContext: {
            /** @description The description of the context. */
            description: string;
            /** @description The ID of the context. */
            id: string;
            /** @description Whether the context apply to all issue types. */
            isAnyIssueType: boolean;
            /** @description Whether the context is global. */
            isGlobalContext: boolean;
            /** @description The name of the context. */
            name: string;
        };
        CustomFieldContextDefaultValue: components["schemas"]["CustomFieldContextDefaultValueCascadingOption"] | components["schemas"]["CustomFieldContextDefaultValueMultipleOption"] | components["schemas"]["CustomFieldContextDefaultValueSingleOption"] | components["schemas"]["CustomFieldContextSingleUserPickerDefaults"] | components["schemas"]["CustomFieldContextDefaultValueMultiUserPicker"] | components["schemas"]["CustomFieldContextDefaultValueSingleGroupPicker"] | components["schemas"]["CustomFieldContextDefaultValueMultipleGroupPicker"] | components["schemas"]["CustomFieldContextDefaultValueDate"] | components["schemas"]["CustomFieldContextDefaultValueDateTime"] | components["schemas"]["CustomFieldContextDefaultValueURL"] | components["schemas"]["CustomFieldContextDefaultValueProject"] | components["schemas"]["CustomFieldContextDefaultValueFloat"] | components["schemas"]["CustomFieldContextDefaultValueLabels"] | components["schemas"]["CustomFieldContextDefaultValueTextField"] | components["schemas"]["CustomFieldContextDefaultValueTextArea"] | components["schemas"]["CustomFieldContextDefaultValueReadOnly"] | components["schemas"]["CustomFieldContextDefaultValueSingleVersionPicker"] | components["schemas"]["CustomFieldContextDefaultValueMultipleVersionPicker"] | components["schemas"]["CustomFieldContextDefaultValueForgeStringField"] | components["schemas"]["CustomFieldContextDefaultValueForgeMultiStringField"] | components["schemas"]["CustomFieldContextDefaultValueForgeObjectField"] | components["schemas"]["CustomFieldContextDefaultValueForgeDateTimeField"] | components["schemas"]["CustomFieldContextDefaultValueForgeGroupField"] | components["schemas"]["CustomFieldContextDefaultValueForgeMultiGroupField"] | components["schemas"]["CustomFieldContextDefaultValueForgeNumberField"] | components["schemas"]["CustomFieldContextDefaultValueForgeUserField"] | components["schemas"]["CustomFieldContextDefaultValueForgeMultiUserField"];
        /** @description The default value for a cascading select custom field. */
        CustomFieldContextDefaultValueCascadingOption: {
            /** @description The ID of the default cascading option. */
            cascadingOptionId?: string;
            /** @description The ID of the context. */
            contextId: string;
            /** @description The ID of the default option. */
            optionId: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "option.cascading";
        };
        /** @description The default value for a Date custom field. */
        CustomFieldContextDefaultValueDate: {
            /** @description The default date in ISO format. Ignored if `useCurrent` is true. */
            date?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "datepicker";
            /**
             * @description Whether to use the current date.
             * @default false
             */
            useCurrent: boolean;
        };
        /** @description The default value for a date time custom field. */
        CustomFieldContextDefaultValueDateTime: {
            /** @description The default date-time in ISO format. Ignored if `useCurrent` is true. */
            dateTime?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "datetimepicker";
            /**
             * @description Whether to use the current date.
             * @default false
             */
            useCurrent: boolean;
        };
        /** @description Default value for a float (number) custom field. */
        CustomFieldContextDefaultValueFloat: {
            /**
             * Format: double
             * @description The default floating-point number.
             */
            number: number;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "float";
        };
        /** @description The default value for a Forge date time custom field. */
        CustomFieldContextDefaultValueForgeDateTimeField: {
            /** @description The ID of the context. */
            contextId: string;
            /** @description The default date-time in ISO format. Ignored if `useCurrent` is true. */
            dateTime?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "forge.datetime";
            /**
             * @description Whether to use the current date.
             * @default false
             */
            useCurrent: boolean;
        };
        /** @description The default value for a Forge group custom field. */
        CustomFieldContextDefaultValueForgeGroupField: {
            /** @description The ID of the context. */
            contextId: string;
            /** @description The ID of the the default group. */
            groupId: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "forge.group";
        };
        /** @description The default value for a Forge collection of groups custom field. */
        CustomFieldContextDefaultValueForgeMultiGroupField: {
            /** @description The ID of the context. */
            contextId: string;
            /** @description The IDs of the default groups. */
            groupIds: string[];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "forge.group.list";
        };
        /** @description The default text for a Forge collection of strings custom field. */
        CustomFieldContextDefaultValueForgeMultiStringField: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "forge.string.list";
            /** @description List of string values. The maximum length for a value is 254 characters. */
            values?: string[];
        };
        /** @description Defaults for a Forge collection of users custom field. */
        CustomFieldContextDefaultValueForgeMultiUserField: {
            /** @description The IDs of the default users. */
            accountIds: string[];
            /** @description The ID of the context. */
            contextId: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "forge.user.list";
        };
        /** @description Default value for a Forge number custom field. */
        CustomFieldContextDefaultValueForgeNumberField: {
            /** @description The ID of the context. */
            contextId: string;
            /**
             * Format: double
             * @description The default floating-point number.
             */
            number: number;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "forge.number";
        };
        /** @description The default value for a Forge object custom field. */
        CustomFieldContextDefaultValueForgeObjectField: {
            /** @description The default JSON object. */
            object?: Record<string, never>;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "forge.object";
        };
        /** @description The default text for a Forge string custom field. */
        CustomFieldContextDefaultValueForgeStringField: {
            /** @description The ID of the context. */
            contextId: string;
            /** @description The default text. The maximum length is 254 characters. */
            text?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "forge.string";
        };
        /** @description Defaults for a Forge user custom field. */
        CustomFieldContextDefaultValueForgeUserField: {
            /** @description The ID of the default user. */
            accountId: string;
            /** @description The ID of the context. */
            contextId: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "forge.user";
            userFilter: components["schemas"]["UserFilter"];
        };
        /** @description Default value for a labels custom field. */
        CustomFieldContextDefaultValueLabels: {
            /** @description The default labels value. */
            labels: string[];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "labels";
        };
        /** @description The default value for a multiple group picker custom field. */
        CustomFieldContextDefaultValueMultipleGroupPicker: {
            /** @description The ID of the context. */
            contextId: string;
            /** @description The IDs of the default groups. */
            groupIds: string[];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "grouppicker.multiple";
        };
        /** @description The default value for a multi-select custom field. */
        CustomFieldContextDefaultValueMultipleOption: {
            /** @description The ID of the context. */
            contextId: string;
            /** @description The list of IDs of the default options. */
            optionIds: string[];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "option.multiple";
        };
        /** @description The default value for a multiple version picker custom field. */
        CustomFieldContextDefaultValueMultipleVersionPicker: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "version.multiple";
            /** @description The IDs of the default versions. */
            versionIds: string[];
            /** @description The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`. */
            versionOrder?: string;
        };
        /** @description The default value for a User Picker (multiple) custom field. */
        CustomFieldContextDefaultValueMultiUserPicker: {
            /** @description The IDs of the default users. */
            accountIds: string[];
            /** @description The ID of the context. */
            contextId: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "multi.user.select";
        };
        /** @description The default value for a project custom field. */
        CustomFieldContextDefaultValueProject: {
            /** @description The ID of the context. */
            contextId: string;
            /** @description The ID of the default project. */
            projectId: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "project";
        };
        /** @description The default text for a read only custom field. */
        CustomFieldContextDefaultValueReadOnly: {
            /** @description The default text. The maximum length is 255 characters. */
            text?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "readonly";
        };
        /** @description The default value for a group picker custom field. */
        CustomFieldContextDefaultValueSingleGroupPicker: {
            /** @description The ID of the context. */
            contextId: string;
            /** @description The ID of the the default group. */
            groupId: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "grouppicker.single";
        };
        /** @description The default value for a single select custom field. */
        CustomFieldContextDefaultValueSingleOption: {
            /** @description The ID of the context. */
            contextId: string;
            /** @description The ID of the default option. */
            optionId: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "option.single";
        };
        /** @description The default value for a version picker custom field. */
        CustomFieldContextDefaultValueSingleVersionPicker: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "version.single";
            /** @description The ID of the default version. */
            versionId: string;
            /** @description The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`. */
            versionOrder?: string;
        };
        /** @description The default text for a text area custom field. */
        CustomFieldContextDefaultValueTextArea: {
            /** @description The default text. The maximum length is 32767 characters. */
            text?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "textarea";
        };
        /** @description The default text for a text custom field. */
        CustomFieldContextDefaultValueTextField: {
            /** @description The default text. The maximum length is 254 characters. */
            text?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "textfield";
        };
        /** @description Default values to update. */
        CustomFieldContextDefaultValueUpdate: {
            defaultValues?: components["schemas"]["CustomFieldContextDefaultValue"][];
        };
        /** @description The default value for a URL custom field. */
        CustomFieldContextDefaultValueURL: {
            /** @description The ID of the context. */
            contextId: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "url";
            /** @description The default URL. */
            url: string;
        };
        /** @description Details of the custom field options for a context. */
        CustomFieldContextOption: {
            /** @description Whether the option is disabled. */
            disabled: boolean;
            /** @description The ID of the custom field option. */
            id: string;
            /** @description For cascading options, the ID of the custom field option containing the cascading option. */
            optionId?: string;
            /** @description The value of the custom field option. */
            value: string;
        };
        /** @description Details of a context to project association. */
        CustomFieldContextProjectMapping: {
            /** @description The ID of the context. */
            readonly contextId: string;
            /** @description Whether context is global. */
            readonly isGlobalContext?: boolean;
            /** @description The ID of the project. */
            readonly projectId?: string;
        };
        /** @description Defaults for a User Picker (single) custom field. */
        CustomFieldContextSingleUserPickerDefaults: {
            /** @description The ID of the default user. */
            accountId: string;
            /** @description The ID of the context. */
            contextId: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "single.user.select";
            userFilter: components["schemas"]["UserFilter"];
        };
        /** @description Details of a custom field context. */
        CustomFieldContextUpdateDetails: {
            /** @description The description of the custom field context. The maximum length is 255 characters. */
            description?: string;
            /** @description The name of the custom field context. The name must be unique. The maximum length is 255 characters. */
            name?: string;
        };
        /** @description A list of custom field options for a context. */
        CustomFieldCreatedContextOptionsList: {
            /** @description The created custom field options. */
            options?: components["schemas"]["CustomFieldContextOption"][];
        };
        CustomFieldDefinitionJsonBean: {
            /** @description The description of the custom field, which is displayed in Jira. */
            description?: string;
            /** @description The name of the custom field, which is displayed in Jira. This is not the unique identifier. */
            name: string;
            /**
             * @description The searcher defines the way the field is searched in Jira. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.
             *     The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):
             *
             *      *  `cascadingselect`: `cascadingselectsearcher`
             *      *  `datepicker`: `daterange`
             *      *  `datetime`: `datetimerange`
             *      *  `float`: `exactnumber` or `numberrange`
             *      *  `grouppicker`: `grouppickersearcher`
             *      *  `importid`: `exactnumber` or `numberrange`
             *      *  `labels`: `labelsearcher`
             *      *  `multicheckboxes`: `multiselectsearcher`
             *      *  `multigrouppicker`: `multiselectsearcher`
             *      *  `multiselect`: `multiselectsearcher`
             *      *  `multiuserpicker`: `userpickergroupsearcher`
             *      *  `multiversion`: `versionsearcher`
             *      *  `project`: `projectsearcher`
             *      *  `radiobuttons`: `multiselectsearcher`
             *      *  `readonlyfield`: `textsearcher`
             *      *  `select`: `multiselectsearcher`
             *      *  `textarea`: `textsearcher`
             *      *  `textfield`: `textsearcher`
             *      *  `url`: `exacttextsearcher`
             *      *  `userpicker`: `userpickergroupsearcher`
             *      *  `version`: `versionsearcher`
             *
             *     If no searcher is provided, the field isn't searchable. However, [Forge custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-) have a searcher set automatically, so are always searchable.
             * @enum {string}
             */
            searcherKey?: "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:daterange" | "com.atlassian.jira.plugin.system.customfieldtypes:datetimerange" | "com.atlassian.jira.plugin.system.customfieldtypes:exactnumber" | "com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:numberrange" | "com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:textsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher";
            /** @description The type of the custom field. These built-in custom field types are available:
             *
             *      *  `cascadingselect`: Enables values to be selected from two levels of select lists (value: `com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect`)
             *      *  `datepicker`: Stores a date using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`)
             *      *  `datetime`: Stores a date with a time component (value: `com.atlassian.jira.plugin.system.customfieldtypes:datetime`)
             *      *  `float`: Stores and validates a numeric (floating point) input (value: `com.atlassian.jira.plugin.system.customfieldtypes:float`)
             *      *  `grouppicker`: Stores a user group using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`)
             *      *  `importid`: A read-only field that stores the ID the issue had in the system it was imported from (value: `com.atlassian.jira.plugin.system.customfieldtypes:importid`)
             *      *  `labels`: Stores labels (value: `com.atlassian.jira.plugin.system.customfieldtypes:labels`)
             *      *  `multicheckboxes`: Stores multiple values using checkboxes (value: ``)
             *      *  `multigrouppicker`: Stores multiple user groups using a picker control (value: ``)
             *      *  `multiselect`: Stores multiple values using a select list (value: `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`)
             *      *  `multiuserpicker`: Stores multiple users using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`)
             *      *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multiversion`)
             *      *  `project`: Stores a project from a list of projects that the user is permitted to view (value: `com.atlassian.jira.plugin.system.customfieldtypes:project`)
             *      *  `radiobuttons`: Stores a value using radio buttons (value: `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`)
             *      *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API (value: `com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield`)
             *      *  `select`: Stores a value from a configurable list of options (value: `com.atlassian.jira.plugin.system.customfieldtypes:select`)
             *      *  `textarea`: Stores a long text string using a multiline text area (value: `com.atlassian.jira.plugin.system.customfieldtypes:textarea`)
             *      *  `textfield`: Stores a text string using a single-line text box (value: `com.atlassian.jira.plugin.system.customfieldtypes:textfield`)
             *      *  `url`: Stores a URL (value: `com.atlassian.jira.plugin.system.customfieldtypes:url`)
             *      *  `userpicker`: Stores a user using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:userpicker`)
             *      *  `version`: Stores a version using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:version`)
             *
             *     To create a field based on a [Forge custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-), use the ID of the Forge custom field type as the value. For example, `ari:cloud:ecosystem::extension/e62f20a2-4b61-4dbe-bfb9-9a88b5e3ac84/548c5df1-24aa-4f7c-bbbb-3038d947cb05/static/my-cf-type-key`. */
            type: string;
        };
        /** @description Details of a custom option for a field. */
        CustomFieldOption: {
            /**
             * Format: uri
             * @description The URL of these custom field option details.
             */
            readonly self?: string;
            /** @description The value of the custom field option. */
            readonly value?: string;
        };
        /** @description Details of a custom field option to create. */
        CustomFieldOptionCreate: {
            /** @description Whether the option is disabled. */
            disabled?: boolean;
            /** @description For cascading options, the ID of a parent option. */
            optionId?: string;
            /** @description The value of the custom field option. */
            value: string;
        };
        /** @description Details of a custom field option for a context. */
        CustomFieldOptionUpdate: {
            /** @description Whether the option is disabled. */
            disabled?: boolean;
            /** @description The ID of the custom field option. */
            id: string;
            /** @description The value of the custom field option. */
            value?: string;
        };
        /** @description Details about the replacement for a deleted version. */
        CustomFieldReplacement: {
            /**
             * Format: int64
             * @description The ID of the custom field in which to replace the version number.
             */
            customFieldId?: number;
            /**
             * Format: int64
             * @description The version number to use as a replacement for the deleted version.
             */
            moveTo?: number;
        };
        /** @description A list of custom field options for a context. */
        CustomFieldUpdatedContextOptionsList: {
            /** @description The updated custom field options. */
            options?: components["schemas"]["CustomFieldOptionUpdate"][];
        };
        /** @description A list of issue IDs and the value to update a custom field to. */
        CustomFieldValueUpdate: {
            /** @description The list of issue IDs. */
            issueIds: number[];
            /** @description The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
             *
             *      *  `string` the value must be a string.
             *      *  `number` the value must be a number.
             *      *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
             *      *  `user` the value must be an object that contains the `accountId` field.
             *      *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
             *
             *     A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types). */
            value: unknown;
        };
        /** @description Details of updates for a custom field. */
        CustomFieldValueUpdateDetails: {
            /** @description The list of custom field update details. */
            updates?: components["schemas"]["CustomFieldValueUpdate"][];
        };
        /** @description Details of a dashboard. */
        Dashboard: {
            /**
             * Format: int32
             * @description The automatic refresh interval for the dashboard in milliseconds.
             */
            readonly automaticRefreshMs?: number;
            description?: string;
            /** @description The details of any edit share permissions for the dashboard. */
            readonly editPermissions?: components["schemas"]["SharePermission"][];
            /** @description The ID of the dashboard. */
            readonly id?: string;
            /** @description Whether the dashboard is selected as a favorite by the user. */
            readonly isFavourite?: boolean;
            /** @description Whether the current user has permission to edit the dashboard. */
            readonly isWritable?: boolean;
            /** @description The name of the dashboard. */
            readonly name?: string;
            /** @description The owner of the dashboard. */
            readonly owner?: components["schemas"]["UserBean"];
            /**
             * Format: int64
             * @description The number of users who have this dashboard as a favorite.
             */
            readonly popularity?: number;
            /**
             * Format: int32
             * @description The rank of this dashboard.
             */
            readonly rank?: number;
            /**
             * Format: uri
             * @description The URL of these dashboard details.
             */
            readonly self?: string;
            /** @description The details of any view share permissions for the dashboard. */
            readonly sharePermissions?: components["schemas"]["SharePermission"][];
            /** @description Whether the current dashboard is system dashboard. */
            readonly systemDashboard?: boolean;
            /** @description The URL of the dashboard. */
            readonly view?: string;
        };
        /** @description Details of a dashboard. */
        DashboardDetails: {
            /** @description The description of the dashboard. */
            description?: string;
            /** @description The edit permissions for the dashboard. */
            editPermissions: components["schemas"]["SharePermission"][];
            /** @description The name of the dashboard. */
            name: string;
            /** @description The share permissions for the dashboard. */
            sharePermissions: components["schemas"]["SharePermission"][];
        };
        /** @description Details of a gadget. */
        DashboardGadget: {
            /**
             * @description The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
             * @enum {string}
             */
            readonly color: "blue" | "red" | "yellow" | "green" | "cyan" | "purple" | "gray" | "white";
            /**
             * Format: int64
             * @description The ID of the gadget instance.
             */
            readonly id: number;
            /** @description The module key of the gadget type. */
            readonly moduleKey?: string;
            /** @description The position of the gadget. */
            readonly position: components["schemas"]["DashboardGadgetPosition"];
            /** @description The title of the gadget. */
            readonly title: string;
            /** @description The URI of the gadget type. */
            readonly uri?: string;
        };
        /** @description Details of a gadget position. */
        DashboardGadgetPosition: {
            /** Format: int32 */
            "The column position of the gadget.": number;
            /** Format: int32 */
            "The row position of the gadget.": number;
        };
        /** @description The list of gadgets on the dashboard. */
        DashboardGadgetResponse: {
            /** @description The list of gadgets. */
            readonly gadgets: components["schemas"]["DashboardGadget"][];
        };
        /** @description Details of the settings for a dashboard gadget. */
        DashboardGadgetSettings: {
            /** @description The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`. */
            color?: string;
            /** @description Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed. */
            ignoreUriAndModuleKeyValidation?: boolean;
            /** @description The module key of the gadget type. Can't be provided with `uri`. */
            moduleKey?: string;
            /** @description The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it. */
            position?: components["schemas"]["DashboardGadgetPosition"];
            /** @description The title of the gadget. */
            title?: string;
            /** @description The URI of the gadget type. Can't be provided with `moduleKey`. */
            uri?: string;
        };
        /** @description The details of the gadget to update. */
        DashboardGadgetUpdateRequest: {
            /** @description The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`. */
            color?: string;
            /** @description The position of the gadget. */
            position?: components["schemas"]["DashboardGadgetPosition"];
            /** @description The title of the gadget. */
            title?: string;
        };
        /** @description The data classification. */
        DataClassificationLevelsBean: {
            /** @description The data classifications. */
            classifications?: components["schemas"]["DataClassificationTagBean"][];
        };
        /** @description The data classification. */
        DataClassificationTagBean: {
            /** @description The color of the data classification object. */
            color?: string;
            /** @description The description of the data classification object. */
            description?: string;
            /** @description The guideline of the data classification object. */
            guideline?: string;
            /** @description The ID of the data classification object. */
            id: string;
            /** @description The name of the data classification object. */
            name?: string;
            /**
             * Format: int32
             * @description The rank of the data classification object.
             */
            rank?: number;
            /** @description The status of the data classification object. */
            status: string;
        };
        /** @description List issues archived within a specified date range. */
        DateRangeFilterRequest: {
            /** @description List issues archived after a specified date, passed in the YYYY-MM-DD format. */
            dateAfter: string;
            /** @description List issues archived before a specified date provided in the YYYY-MM-DD format. */
            dateBefore: string;
        };
        /** @description Details of scheme and new default level. */
        DefaultLevelValue: {
            /** @description The ID of the issue security level to set as default for the specified scheme. Providing null will reset the default level. */
            defaultLevelId: string;
            /** @description The ID of the issue security scheme to set default level for. */
            issueSecuritySchemeId: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of the scope of the default sharing for new filters and dashboards. */
        DefaultShareScope: {
            /**
             * @description The scope of the default sharing for new filters and dashboards:
             *
             *      *  `AUTHENTICATED` Shared with all logged-in users.
             *      *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.
             *      *  `PRIVATE` Not shared with any users.
             * @enum {string}
             */
            scope: "GLOBAL" | "AUTHENTICATED" | "PRIVATE";
        };
        /** @description Details about the default workflow. */
        DefaultWorkflow: {
            /** @description Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to `false`. */
            updateDraftIfNeeded?: boolean;
            /** @description The name of the workflow to set as the default workflow. */
            workflow: string;
        };
        DeleteAndReplaceVersionBean: {
            /** @description An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version. */
            customFieldReplacementList?: components["schemas"]["CustomFieldReplacement"][];
            /**
             * Format: int64
             * @description The ID of the version to update `affectedVersion` to when the field contains the deleted version.
             */
            moveAffectedIssuesTo?: number;
            /**
             * Format: int64
             * @description The ID of the version to update `fixVersion` to when the field contains the deleted version.
             */
            moveFixIssuesTo?: number;
        };
        /** @description Details about a workflow. */
        DeprecatedWorkflow: {
            default?: boolean;
            /** @description The description of the workflow. */
            readonly description?: string;
            /** @description The datetime the workflow was last modified. */
            readonly lastModifiedDate?: string;
            /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            readonly lastModifiedUser?: string;
            /** @description The account ID of the user that last modified the workflow. */
            readonly lastModifiedUserAccountId?: string;
            /** @description The name of the workflow. */
            readonly name?: string;
            /** @description The scope where this workflow applies */
            readonly scope?: components["schemas"]["Scope"];
            /**
             * Format: int32
             * @description The number of steps included in the workflow.
             */
            readonly steps?: number;
        };
        DetailedErrorCollection: {
            /** @description Map of objects representing additional details for an error */
            details?: {
                [key: string]: unknown;
            };
            /** @description The list of error messages produced by this operation. For example, "input parameter 'key' must be provided" */
            errorMessages?: string[];
            /** @description The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters." */
            errors?: {
                [key: string]: string;
            };
        };
        /** @description The current version details of this workflow scheme. */
        DocumentVersion: {
            /** @description The version UUID. */
            id?: string;
            /**
             * Format: int64
             * @description The version number.
             */
            versionNumber?: number;
        };
        DuplicatePlanRequest: {
            /** @description The plan name. */
            name: string;
        };
        /** @description An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/). */
        EntityProperty: {
            /** @description The key of the property. Required on create and update. */
            key?: string;
            /** @description The value of the property. Required on create and update. */
            value?: unknown;
        };
        EntityPropertyDetails: {
            /**
             * @description The entity property ID.
             * @example 123
             */
            entityId: number;
            /**
             * @description The entity property key.
             * @example mykey
             */
            key: string;
            /**
             * @description The new value of the entity property.
             * @example newValue
             */
            value: string;
        };
        Error: {
            /** Format: int64 */
            count?: number;
            issueIdsOrKeys?: string[];
            message?: string;
        };
        /** @description Error messages from an operation. */
        ErrorCollection: {
            /** @description The list of error messages produced by this operation. For example, "input parameter 'key' must be provided" */
            errorMessages?: string[];
            /** @description The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters." */
            errors?: {
                [key: string]: string;
            };
            /** Format: int32 */
            status?: number;
        };
        ErrorCollections: Record<string, never>;
        ErrorMessage: {
            message?: string;
        };
        Errors: {
            issueIsSubtask?: components["schemas"]["Error"];
            issuesInArchivedProjects?: components["schemas"]["Error"];
            issuesInUnlicensedProjects?: components["schemas"]["Error"];
            issuesNotFound?: components["schemas"]["Error"];
            userDoesNotHavePermission?: components["schemas"]["Error"];
        };
        /** @description Details about a notification associated with an event. */
        EventNotification: {
            /** @description The email address. */
            emailAddress?: string;
            /** @description Expand options that include additional event notification details in the response. */
            expand?: string;
            /** @description The custom user or group field. */
            field?: components["schemas"]["FieldDetails"];
            /** @description The specified group. */
            group?: components["schemas"]["GroupName"];
            /**
             * Format: int64
             * @description The ID of the notification.
             */
            id?: number;
            /**
             * @description Identifies the recipients of the notification.
             * @enum {string}
             */
            notificationType?: "CurrentAssignee" | "Reporter" | "CurrentUser" | "ProjectLead" | "ComponentLead" | "User" | "Group" | "ProjectRole" | "EmailAddress" | "AllWatchers" | "UserCustomField" | "GroupCustomField";
            /** @description As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:
             *
             *      *  `User` The `parameter` is the user account ID.
             *      *  `Group` The `parameter` is the group name.
             *      *  `ProjectRole` The `parameter` is the project role ID.
             *      *  `UserCustomField` The `parameter` is the ID of the custom field.
             *      *  `GroupCustomField` The `parameter` is the ID of the custom field. */
            parameter?: string;
            /** @description The specified project role. */
            projectRole?: components["schemas"]["ProjectRole"];
            /** @description The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:
             *
             *      *  `User`, `recipient` is the user account ID.
             *      *  `Group`, `recipient` is the group ID.
             *      *  `ProjectRole`, `recipient` is the project role ID.
             *      *  `UserCustomField`, `recipient` is the ID of the custom field.
             *      *  `GroupCustomField`, `recipient` is the ID of the custom field. */
            recipient?: string;
            /** @description The specified user. */
            user?: components["schemas"]["UserDetails"];
        };
        /** @description A priority scheme with less fields to be used in for an API expand response. */
        ExpandPrioritySchemeBean: {
            /** @description The ID of the priority scheme. */
            readonly id?: string;
            /** @description The name of the priority scheme. */
            readonly name?: string;
            /** @description The URL of the priority scheme. */
            readonly self?: string;
        };
        ExpandPrioritySchemePage: {
            /** Format: int32 */
            maxResults?: number;
            /** Format: int64 */
            startAt?: number;
            /** Format: int64 */
            total?: number;
        } & {
            [key: string]: unknown;
        };
        /** @description The response for status request for a running/completed export task. */
        ExportArchivedIssuesTaskProgressResponse: {
            fileUrl?: string;
            payload?: string;
            /** Format: int64 */
            progress?: number;
            status?: string;
            /** Format: date-time */
            submittedTime?: string;
            taskId?: string;
        };
        /** @description Details about a failed webhook. */
        FailedWebhook: {
            /** @description The webhook body. */
            body?: string;
            /**
             * Format: int64
             * @description The time the webhook was added to the list of failed webhooks (that is, the time of the last failed retry).
             */
            failureTime: number;
            /** @description The webhook ID, as sent in the `X-Atlassian-Webhook-Identifier` header with the webhook. */
            id: string;
            /** @description The original webhook destination. */
            url: string;
        };
        /** @description A page of failed webhooks. */
        FailedWebhooks: {
            /**
             * Format: int32
             * @description The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.
             */
            maxResults: number;
            /**
             * Format: uri
             * @description The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).
             */
            next?: string;
            /** @description The list of webhooks. */
            values: components["schemas"]["FailedWebhook"][];
        };
        /** @description Details of a field. */
        Field: {
            /**
             * Format: int64
             * @description Number of contexts where the field is used.
             */
            contextsCount?: number;
            /** @description The description of the field. */
            description?: string;
            /** @description The ID of the field. */
            id: string;
            /** @description Whether the field is locked. */
            isLocked?: boolean;
            /** @description Whether the field is shown on screen or not. */
            isUnscreenable?: boolean;
            /** @description The key of the field. */
            key?: string;
            lastUsed?: components["schemas"]["FieldLastUsed"];
            /** @description The name of the field. */
            name: string;
            /**
             * Format: int64
             * @description Number of projects where the field is used.
             */
            projectsCount?: number;
            schema: components["schemas"]["JsonTypeBean"];
            /**
             * Format: int64
             * @description Number of screens where the field is used.
             */
            screensCount?: number;
            /** @description The searcher key of the field. Returned for custom fields. */
            searcherKey?: string;
            /** @description The stable ID of the field. */
            stableId?: string;
        };
        /** @description A clause that asserts whether a field was changed. For example, `status CHANGED AFTER startOfMonth(-1M)`.See [CHANGED](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for more information about the CHANGED operator. */
        FieldChangedClause: {
            field: components["schemas"]["JqlQueryField"];
            /**
             * @description The operator applied to the field.
             * @enum {string}
             */
            operator: "changed";
            /** @description The list of time predicates. */
            predicates: components["schemas"]["JqlQueryClauseTimePredicate"][];
        };
        /** @description Details of a field configuration. */
        FieldConfiguration: {
            /** @description The description of the field configuration. */
            description: string;
            /**
             * Format: int64
             * @description The ID of the field configuration.
             */
            id: number;
            /** @description Whether the field configuration is the default. */
            isDefault?: boolean;
            /** @description The name of the field configuration. */
            name: string;
        };
        /** @description Details of a field configuration. */
        FieldConfigurationDetails: {
            /** @description The description of the field configuration. */
            description?: string;
            /** @description The name of the field configuration. Must be unique. */
            name: string;
        };
        /** @description The field configuration for an issue type. */
        FieldConfigurationIssueTypeItem: {
            /** @description The ID of the field configuration. */
            fieldConfigurationId: string;
            /** @description The ID of the field configuration scheme. */
            fieldConfigurationSchemeId: string;
            /** @description The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration. */
            issueTypeId: string;
        };
        /** @description A field within a field configuration. */
        FieldConfigurationItem: {
            /** @description The description of the field within the field configuration. */
            description?: string;
            /** @description The ID of the field within the field configuration. */
            id: string;
            /** @description Whether the field is hidden in the field configuration. */
            isHidden?: boolean;
            /** @description Whether the field is required in the field configuration. */
            isRequired?: boolean;
            /** @description The renderer type for the field within the field configuration. */
            renderer?: string;
        };
        /** @description Details of field configuration items. */
        FieldConfigurationItemsDetails: {
            /** @description Details of fields in a field configuration. */
            fieldConfigurationItems: components["schemas"]["FieldConfigurationItem"][];
        };
        /** @description Details of a field configuration scheme. */
        FieldConfigurationScheme: {
            /** @description The description of the field configuration scheme. */
            description?: string;
            /** @description The ID of the field configuration scheme. */
            id: string;
            /** @description The name of the field configuration scheme. */
            name: string;
        };
        /** @description Associated field configuration scheme and project. */
        FieldConfigurationSchemeProjectAssociation: {
            /** @description The ID of the field configuration scheme. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme. */
            fieldConfigurationSchemeId?: string;
            /** @description The ID of the project. */
            projectId: string;
        };
        /** @description Project list with assigned field configuration schema. */
        FieldConfigurationSchemeProjects: {
            fieldConfigurationScheme?: components["schemas"]["FieldConfigurationScheme"];
            /** @description The IDs of projects using the field configuration scheme. */
            projectIds: string[];
        };
        /** @description The field configuration to issue type mapping. */
        FieldConfigurationToIssueTypeMapping: {
            /** @description The ID of the field configuration. */
            fieldConfigurationId: string;
            /** @description The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration. An issue type can be included only once in a request. */
            issueTypeId: string;
        };
        /** @description The metadata describing an issue field for createmeta. */
        FieldCreateMetadata: {
            /** @description The list of values allowed in the field. */
            readonly allowedValues?: unknown[];
            /** @description The URL that can be used to automatically complete the field. */
            readonly autoCompleteUrl?: string;
            /** @description The configuration properties. */
            readonly configuration?: {
                [key: string]: unknown;
            };
            /** @description The default value of the field. */
            readonly defaultValue?: unknown;
            /** @description The field id. */
            readonly fieldId: string;
            /** @description Whether the field has a default value. */
            readonly hasDefaultValue?: boolean;
            /** @description The key of the field. */
            readonly key: string;
            /** @description The name of the field. */
            readonly name: string;
            /** @description The list of operations that can be performed on the field. */
            readonly operations: string[];
            /** @description Whether the field is required. */
            readonly required: boolean;
            /** @description The data type of the field. */
            readonly schema: components["schemas"]["JsonTypeBean"];
        };
        /** @description Details about a field. */
        FieldDetails: {
            /** @description The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ). */
            clauseNames?: string[];
            /** @description Whether the field is a custom field. */
            custom?: boolean;
            /** @description The ID of the field. */
            id?: string;
            /** @description The key of the field. */
            key?: string;
            /** @description The name of the field. */
            name?: string;
            /** @description Whether the field can be used as a column on the issue navigator. */
            navigable?: boolean;
            /** @description Whether the content of the field can be used to order lists. */
            orderable?: boolean;
            /** @description The data schema for the field. */
            schema?: components["schemas"]["JsonTypeBean"];
            /** @description The scope of the field. */
            scope?: components["schemas"]["Scope"];
            /** @description Whether the content of the field can be searched. */
            searchable?: boolean;
        };
        /** @description Information about the most recent use of a field. */
        FieldLastUsed: {
            /**
             * @description Last used value type:
             *
             *      *  *TRACKED*: field is tracked and a last used date is available.
             *      *  *NOT\_TRACKED*: field is not tracked, last used date is not available.
             *      *  *NO\_INFORMATION*: field is tracked, but no last used date is available.
             * @enum {string}
             */
            type?: "TRACKED" | "NOT_TRACKED" | "NO_INFORMATION";
            /**
             * Format: date-time
             * @description The date when the value of the field last changed.
             */
            value?: string;
        };
        /** @description The metadata describing an issue field. */
        FieldMetadata: {
            /** @description The list of values allowed in the field. */
            readonly allowedValues?: unknown[];
            /** @description The URL that can be used to automatically complete the field. */
            readonly autoCompleteUrl?: string;
            /** @description The configuration properties. */
            readonly configuration?: {
                [key: string]: unknown;
            };
            /** @description The default value of the field. */
            readonly defaultValue?: unknown;
            /** @description Whether the field has a default value. */
            readonly hasDefaultValue?: boolean;
            /** @description The key of the field. */
            readonly key: string;
            /** @description The name of the field. */
            readonly name: string;
            /** @description The list of operations that can be performed on the field. */
            readonly operations: string[];
            /** @description Whether the field is required. */
            readonly required: boolean;
            /** @description The data type of the field. */
            readonly schema: components["schemas"]["JsonTypeBean"];
        };
        /** @description Details of a field that can be used in advanced searches. */
        FieldReferenceData: {
            /**
             * @description Whether the field provide auto-complete suggestions.
             * @enum {string}
             */
            auto?: "true" | "false";
            /** @description If the item is a custom field, the ID of the custom field. */
            cfid?: string;
            /**
             * @description Whether this field has been deprecated.
             * @enum {string}
             */
            deprecated?: "true" | "false";
            /** @description The searcher key of the field, only passed when the field is deprecated. */
            deprecatedSearcherKey?: string;
            /** @description The display name contains the following:
             *
             *      *  for system fields, the field name. For example, `Summary`.
             *      *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.
             *      *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`. */
            displayName?: string;
            /** @description The valid search operators for the field. */
            operators?: string[];
            /**
             * @description Whether the field can be used in a query's `ORDER BY` clause.
             * @enum {string}
             */
            orderable?: "true" | "false";
            /**
             * @description Whether the content of this field can be searched.
             * @enum {string}
             */
            searchable?: "true" | "false";
            /** @description The data types of items in the field. */
            types?: string[];
            /** @description The field identifier. */
            value?: string;
        };
        /** @description Can contain multiple field values of following types depending on `type` key */
        fields: {
            /**
             * @description If `true`, will try to retain original non-null issue field values on move.
             * @default true
             */
            retain: boolean;
            /** @enum {string} */
            type?: "adf" | "raw";
            value?: Record<string, never>;
        } | components["schemas"]["MandatoryFieldValue"] | components["schemas"]["MandatoryFieldValueForADF"];
        /** @description Key fields from the linked issue. */
        Fields: {
            /** @description The assignee of the linked issue. */
            readonly assignee?: components["schemas"]["UserDetails"];
            /** @description The type of the linked issue. */
            issuetype?: components["schemas"]["IssueTypeDetails"];
            /** @description The type of the linked issue. */
            readonly issueType?: components["schemas"]["IssueTypeDetails"];
            /** @description The priority of the linked issue. */
            readonly priority?: components["schemas"]["Priority"];
            /** @description The status of the linked issue. */
            readonly status?: components["schemas"]["StatusDetails"];
            /** @description The summary description of the linked issue. */
            readonly summary?: string;
            /** @description The time tracking of the linked issue. */
            readonly timetracking?: components["schemas"]["TimeTrackingDetails"];
        };
        /** @description Details of an operation to perform on a field. */
        FieldUpdateOperation: {
            /**
             * @description The value to add to the field.
             * @example triaged
             */
            add?: unknown;
            /**
             * @description The field value to copy from another issue.
             * @example {
             *       "issuelinks": {
             *         "sourceIssues": [
             *           {
             *             "key": "FP-5"
             *           }
             *         ]
             *       }
             *     }
             */
            copy?: unknown;
            /**
             * @description The value to edit in the field.
             * @example {
             *       "originalEstimate": "1w 1d",
             *       "remainingEstimate": "4d"
             *     }
             */
            edit?: unknown;
            /**
             * @description The value to removed from the field.
             * @example blocker
             */
            remove?: unknown;
            /**
             * @description The value to set in the field.
             * @example A new summary
             */
            set?: unknown;
        };
        /** @description A clause that asserts the current value of a field. For example, `summary ~ test`. */
        FieldValueClause: {
            field: components["schemas"]["JqlQueryField"];
            operand: components["schemas"]["JqlQueryClauseOperand"];
            /**
             * @description The operator between the field and operand.
             * @enum {string}
             */
            operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "in" | "not in" | "~" | "~=" | "is" | "is not";
        };
        /** @description A clause that asserts a previous value of a field. For example, `status WAS "Resolved" BY currentUser() BEFORE "2019/02/02"`. See [WAS](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-WASWAS) for more information about the WAS operator. */
        FieldWasClause: {
            field: components["schemas"]["JqlQueryField"];
            operand: components["schemas"]["JqlQueryClauseOperand"];
            /**
             * @description The operator between the field and operand.
             * @enum {string}
             */
            operator: "was" | "was in" | "was not in" | "was not";
            /** @description The list of time predicates. */
            predicates: components["schemas"]["JqlQueryClauseTimePredicate"][];
        };
        /** @description Details about a filter. */
        Filter: {
            /**
             * Format: date-time
             * @description \[Experimental\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
             */
            readonly approximateLastUsed?: string;
            /** @description A description of the filter. */
            description?: string;
            /** @description The groups and projects that can edit the filter. */
            editPermissions?: components["schemas"]["SharePermission"][];
            /** @description Whether the filter is selected as a favorite. */
            favourite?: boolean;
            /**
             * Format: int64
             * @description The count of how many users have selected this filter as a favorite, including the filter owner.
             */
            readonly favouritedCount?: number;
            /** @description The unique identifier for the filter. */
            readonly id?: string;
            /** @description The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*. */
            jql?: string;
            /** @description The name of the filter. Must be unique. */
            name: string;
            /** @description The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings. */
            readonly owner?: components["schemas"]["User"];
            /**
             * Format: uri
             * @description A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
             */
            readonly searchUrl?: string;
            /**
             * Format: uri
             * @description The URL of the filter.
             */
            readonly self?: string;
            /** @description A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with. */
            readonly sharedUsers?: components["schemas"]["UserList"];
            /** @description The groups and projects that the filter is shared with. */
            sharePermissions?: components["schemas"]["SharePermission"][];
            /** @description A paginated list of the users that are subscribed to the filter. */
            readonly subscriptions?: components["schemas"]["FilterSubscriptionsList"];
            /**
             * Format: uri
             * @description A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
             */
            readonly viewUrl?: string;
        };
        /** @description Details of a filter. */
        FilterDetails: {
            /**
             * Format: date-time
             * @description \[Experimental\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
             */
            readonly approximateLastUsed?: string;
            /** @description The description of the filter. */
            description?: string;
            /** @description The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter. */
            editPermissions?: components["schemas"]["SharePermission"][];
            /** @description Expand options that include additional filter details in the response. */
            readonly expand?: string;
            /** @description Whether the filter is selected as a favorite by any users, not including the filter owner. */
            readonly favourite?: boolean;
            /**
             * Format: int64
             * @description The count of how many users have selected this filter as a favorite, including the filter owner.
             */
            readonly favouritedCount?: number;
            /** @description The unique identifier for the filter. */
            readonly id?: string;
            /** @description The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*. */
            readonly jql?: string;
            /** @description The name of the filter. */
            name: string;
            /** @description The user who owns the filter. Defaults to the creator of the filter, however, Jira administrators can change the owner of a shared filter in the admin settings. */
            readonly owner?: components["schemas"]["User"];
            /**
             * Format: uri
             * @description A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
             */
            readonly searchUrl?: string;
            /**
             * Format: uri
             * @description The URL of the filter.
             */
            readonly self?: string;
            /** @description The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter. */
            sharePermissions?: components["schemas"]["SharePermission"][];
            /** @description The users that are subscribed to the filter. */
            readonly subscriptions?: components["schemas"]["FilterSubscription"][];
            /**
             * Format: uri
             * @description A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
             */
            readonly viewUrl?: string;
        };
        /** @description Details of a user or group subscribing to a filter. */
        FilterSubscription: {
            /** @description The group subscribing to filter. */
            readonly group?: components["schemas"]["GroupName"];
            /**
             * Format: int64
             * @description The ID of the filter subscription.
             */
            readonly id?: number;
            /** @description The user subscribing to filter. */
            readonly user?: components["schemas"]["User"];
        };
        /** @description A paginated list of subscriptions to a filter. */
        FilterSubscriptionsList: {
            /**
             * Format: int32
             * @description The index of the last item returned on the page.
             */
            readonly "end-index"?: number;
            /** @description The list of items. */
            readonly items?: components["schemas"]["FilterSubscription"][];
            /**
             * Format: int32
             * @description The maximum number of results that could be on the page.
             */
            readonly "max-results"?: number;
            /**
             * Format: int32
             * @description The number of items on the page.
             */
            readonly size?: number;
            /**
             * Format: int32
             * @description The index of the first item returned on the page.
             */
            readonly "start-index"?: number;
        };
        /** @description A group found in a search. */
        FoundGroup: {
            /** @description The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. */
            groupId?: string;
            /** @description The group name with the matched query string highlighted with the HTML bold tag. */
            html?: string;
            labels?: components["schemas"]["GroupLabel"][];
            /** @description The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.` */
            name?: string;
        };
        /** @description The list of groups found in a search, including header text (Showing X of Y matching groups) and total of matched groups. */
        FoundGroups: {
            groups?: components["schemas"]["FoundGroup"][];
            /** @description Header text indicating the number of groups in the response and the total number of groups found in the search. */
            header?: string;
            /**
             * Format: int32
             * @description The total number of groups found in the search.
             */
            total?: number;
        };
        /** @description The list of users found in a search, including header text (Showing X of Y matching users) and total of matched users. */
        FoundUsers: {
            /** @description Header text indicating the number of users in the response and the total number of users found in the search. */
            header?: string;
            /**
             * Format: int32
             * @description The total number of users found in the search.
             */
            total?: number;
            users?: components["schemas"]["UserPickerUser"][];
        };
        /** @description List of users and groups found in a search. */
        FoundUsersAndGroups: {
            groups?: components["schemas"]["FoundGroups"];
            users?: components["schemas"]["FoundUsers"];
        };
        /** @description An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions. */
        FunctionOperand: {
            /** @description The list of function arguments. */
            arguments: string[];
            /** @description Encoded operand, which can be used directly in a JQL query. */
            encodedOperand?: string;
            /** @description The name of the function. */
            function: string;
        };
        /** @description Details of functions that can be used in advanced searches. */
        FunctionReferenceData: {
            /** @description The display name of the function. */
            displayName?: string;
            /**
             * @description Whether the function can take a list of arguments.
             * @enum {string}
             */
            isList?: "true" | "false";
            /**
             * @description Whether the function supports both single and list value operators.
             * @enum {string}
             */
            supportsListAndSingleValueOperators?: "true" | "false";
            /** @description The data types returned by the function. */
            types?: string[];
            /** @description The function identifier. */
            value?: string;
        };
        GetAtlassianTeamResponse: {
            /**
             * Format: double
             * @description The capacity for the Atlassian team.
             */
            capacity?: number;
            /** @description The Atlassian team ID. */
            id: string;
            /**
             * Format: int64
             * @description The ID of the issue source for the Atlassian team.
             */
            issueSourceId?: number;
            /**
             * @description The planning style for the Atlassian team. This is "Scrum" or "Kanban".
             * @enum {string}
             */
            planningStyle: "Scrum" | "Kanban";
            /**
             * Format: int64
             * @description The sprint length for the Atlassian team.
             */
            sprintLength?: number;
        };
        GetCrossProjectReleaseResponse: {
            /** @description The cross-project release name. */
            name?: string;
            /** @description The IDs of the releases included in the cross-project release. */
            releaseIds?: number[];
        };
        GetCustomFieldResponse: {
            /**
             * Format: int64
             * @description The custom field ID.
             */
            customFieldId: number;
            /** @description Allows filtering issues based on their values for the custom field. */
            filter?: boolean;
        };
        GetDateFieldResponse: {
            /**
             * Format: int64
             * @description A date custom field ID. This is returned if the type is "DateCustomField".
             */
            dateCustomFieldId?: number;
            /**
             * @description The date field type. This is "DueDate", "TargetStartDate", "TargetEndDate" or "DateCustomField".
             * @enum {string}
             */
            type: "DueDate" | "TargetStartDate" | "TargetEndDate" | "DateCustomField";
        };
        GetExclusionRulesResponse: {
            /** @description The IDs of the issues excluded from the plan. */
            issueIds?: number[];
            /** @description The IDs of the issue types excluded from the plan. */
            issueTypeIds?: number[];
            /**
             * Format: int32
             * @description Issues completed this number of days ago are excluded from the plan.
             */
            numberOfDaysToShowCompletedIssues: number;
            /** @description The IDs of the releases excluded from the plan. */
            releaseIds?: number[];
            /** @description The IDs of the work status categories excluded from the plan. */
            workStatusCategoryIds?: number[];
            /** @description The IDs of the work statuses excluded from the plan. */
            workStatusIds?: number[];
        };
        GetIssueSourceResponse: {
            /**
             * @description The issue source type. This is "Board", "Project" or "Filter".
             * @enum {string}
             */
            type: "Board" | "Project" | "Filter" | "Custom";
            /**
             * Format: int64
             * @description The issue source value. This is a board ID if the type is "Board", a project ID if the type is "Project" or a filter ID if the type is "Filter".
             */
            value: number;
        };
        GetPermissionHolderResponse: {
            /**
             * @description The permission holder type. This is "Group" or "AccountId".
             * @enum {string}
             */
            type: "Group" | "AccountId";
            /** @description The permission holder value. This is a group name if the type is "Group" or an account ID if the type is "AccountId". */
            value: string;
        };
        GetPermissionResponse: {
            /** @description The permission holder. */
            holder: components["schemas"]["GetPermissionHolderResponse"];
            /**
             * @description The permission type. This is "View" or "Edit".
             * @enum {string}
             */
            type: "View" | "Edit";
        };
        GetPlanOnlyTeamResponse: {
            /**
             * Format: double
             * @description The capacity for the plan-only team.
             */
            capacity?: number;
            /**
             * Format: int64
             * @description The plan-only team ID.
             */
            id: number;
            /**
             * Format: int64
             * @description The ID of the issue source for the plan-only team.
             */
            issueSourceId?: number;
            /** @description The account IDs of the plan-only team members. */
            memberAccountIds?: string[];
            /** @description The plan-only team name. */
            name: string;
            /**
             * @description The planning style for the plan-only team. This is "Scrum" or "Kanban".
             * @enum {string}
             */
            planningStyle: "Scrum" | "Kanban";
            /**
             * Format: int64
             * @description The sprint length for the plan-only team.
             */
            sprintLength?: number;
        };
        GetPlanResponse: {
            /** @description The cross-project releases included in the plan. */
            crossProjectReleases?: components["schemas"]["GetCrossProjectReleaseResponse"][];
            /** @description The custom fields for the plan. */
            customFields?: components["schemas"]["GetCustomFieldResponse"][];
            /** @description The exclusion rules for the plan. */
            exclusionRules?: components["schemas"]["GetExclusionRulesResponse"];
            /**
             * Format: int64
             * @description The plan ID.
             */
            id: number;
            /** @description The issue sources included in the plan. */
            issueSources?: components["schemas"]["GetIssueSourceResponse"][];
            /** @description The date when the plan was last saved in UTC. */
            lastSaved?: string;
            /** @description The account ID of the plan lead. */
            leadAccountId?: string;
            /** @description The plan name. */
            name?: string;
            /** @description The permissions for the plan. */
            permissions?: components["schemas"]["GetPermissionResponse"][];
            /** @description The scheduling settings for the plan. */
            scheduling: components["schemas"]["GetSchedulingResponse"];
            /**
             * @description The plan status. This is "Active", "Trashed" or "Archived".
             * @enum {string}
             */
            status: "Active" | "Trashed" | "Archived";
        };
        GetPlanResponseForPage: {
            /** @description The plan ID. */
            id: string;
            /** @description The issue sources included in the plan. */
            issueSources?: components["schemas"]["GetIssueSourceResponse"][];
            /** @description The plan name. */
            name: string;
            /**
             * @description The plan status. This is "Active", "Trashed" or "Archived".
             * @enum {string}
             */
            status: "Active" | "Trashed" | "Archived";
        };
        GetSchedulingResponse: {
            /**
             * @description The dependencies for the plan. This is "Sequential" or "Concurrent".
             * @enum {string}
             */
            dependencies: "Sequential" | "Concurrent";
            /** @description The end date field for the plan. */
            endDate: components["schemas"]["GetDateFieldResponse"];
            /**
             * @description The estimation unit for the plan. This is "StoryPoints", "Days" or "Hours".
             * @enum {string}
             */
            estimation: "StoryPoints" | "Days" | "Hours";
            /**
             * @description The inferred dates for the plan. This is "None", "SprintDates" or "ReleaseDates".
             * @enum {string}
             */
            inferredDates: "None" | "SprintDates" | "ReleaseDates";
            /** @description The start date field for the plan. */
            startDate: components["schemas"]["GetDateFieldResponse"];
        };
        GetTeamResponseForPage: {
            /** @description The team ID. */
            id: string;
            /** @description The team name. This is returned if the type is "PlanOnly". */
            name?: string;
            /**
             * @description The team type. This is "PlanOnly" or "Atlassian".
             * @enum {string}
             */
            type: "PlanOnly" | "Atlassian";
        };
        GlobalScopeBean: {
            /** @description Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default. */
            attributes?: ("notSelectable" | "defaultValue")[];
        };
        Group: {
            /** @description Expand options that include additional group details in the response. */
            readonly expand?: string;
            /** @description The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. */
            groupId?: string | null;
            /** @description The name of group. */
            name?: string;
            /**
             * Format: uri
             * @description The URL for these group details.
             */
            readonly self?: string;
            /** @description A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`. */
            readonly users?: components["schemas"]["PagedListUserDetailsApplicationUser"];
        };
        /** @description Details about a group. */
        GroupDetails: {
            /** @description The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. */
            groupId?: string | null;
            /** @description The name of the group. */
            name?: string;
        };
        /** @description A group label. */
        GroupLabel: {
            /** @description The group label name. */
            text?: string;
            /** @description The title of the group label. */
            title?: string;
            /**
             * @description The type of the group label.
             * @enum {string}
             */
            type?: "ADMIN" | "SINGLE" | "MULTIPLE";
        };
        /** @description Details about a group. */
        GroupName: {
            /** @description The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. */
            groupId?: string | null;
            /** @description The name of group. */
            name?: string;
            /**
             * Format: uri
             * @description The URL for these group details.
             */
            readonly self?: string;
        };
        /** @description Jira instance health check results. Deprecated and no longer returned. */
        HealthCheckResult: {
            /** @description The description of the Jira health check item. */
            description?: string;
            /** @description The name of the Jira health check item. */
            name?: string;
            /** @description Whether the Jira health check item passed or failed. */
            passed?: boolean;
        };
        /** @description The project issue type hierarchy. */
        Hierarchy: {
            /**
             * Format: int64
             * @description The ID of the base level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
             */
            baseLevelId?: number;
            /** @description Details about the hierarchy level. */
            readonly levels?: components["schemas"]["SimplifiedHierarchyLevel"][];
        };
        /** @description Details of issue history metadata. */
        HistoryMetadata: {
            /** @description The activity described in the history record. */
            activityDescription?: string;
            /** @description The key of the activity described in the history record. */
            activityDescriptionKey?: string;
            /** @description Details of the user whose action created the history record. */
            actor?: components["schemas"]["HistoryMetadataParticipant"];
            /** @description Details of the cause that triggered the creation the history record. */
            cause?: components["schemas"]["HistoryMetadataParticipant"];
            /** @description The description of the history record. */
            description?: string;
            /** @description The description key of the history record. */
            descriptionKey?: string;
            /** @description The description of the email address associated the history record. */
            emailDescription?: string;
            /** @description The description key of the email address associated the history record. */
            emailDescriptionKey?: string;
            /** @description Additional arbitrary information about the history record. */
            extraData?: {
                [key: string]: string;
            };
            /** @description Details of the system that generated the history record. */
            generator?: components["schemas"]["HistoryMetadataParticipant"];
            /** @description The type of the history record. */
            type?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of user or system associated with a issue history metadata item. */
        HistoryMetadataParticipant: {
            /** @description The URL to an avatar for the user or system associated with a history record. */
            avatarUrl?: string;
            /** @description The display name of the user or system associated with a history record. */
            displayName?: string;
            /** @description The key of the display name of the user or system associated with a history record. */
            displayNameKey?: string;
            /** @description The ID of the user or system associated with a history record. */
            id?: string;
            /** @description The type of the user or system associated with a history record. */
            type?: string;
            /** @description The URL of the user or system associated with a history record. */
            url?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description An icon. If no icon is defined:
         *
         *      *  for a status icon, no status icon displays in Jira.
         *      *  for the remote object icon, the default link icon displays in Jira. */
        Icon: {
            /** @description The URL of the tooltip, used only for a status icon. If not set, the status icon in Jira is not clickable. */
            link?: string;
            /** @description The title of the icon. This is used as follows:
             *
             *      *  For a status icon it is used as a tooltip on the icon. If not set, the status icon doesn't display a tooltip in Jira.
             *      *  For the remote object icon it is used in conjunction with the application name to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank itemsare excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link". */
            title?: string;
            /** @description The URL of an icon that displays at 16x16 pixel in Jira. */
            url16x16?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description An icon. */
        IconBean: {
            /** @description The URL of the tooltip, used only for a status icon. */
            link?: string;
            /** @description The title of the icon, for use as a tooltip on the icon. */
            title?: string;
            /** @description The URL of a 16x16 pixel icon. */
            url16x16?: string;
        };
        IdBean: {
            /**
             * Format: int64
             * @description The ID of the permission scheme to associate with the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to get a list of permission scheme IDs.
             */
            id: number;
        };
        IdOrKeyBean: {
            /**
             * Format: int64
             * @description The ID of the referenced item.
             */
            id?: number;
            /** @description The key of the referenced item. */
            key?: string;
        };
        IdSearchRequestBean: {
            /** @description A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. Order by clauses are not allowed. */
            jql?: string;
            /**
             * Format: int32
             * @description The maximum number of items to return per page.
             * @default 1000
             */
            maxResults: number;
            /** @description The continuation token to fetch the next page. This token is provided by the response of this endpoint. */
            nextPageToken?: string;
        };
        /** @description Result of your JQL search. Returns a list of issue IDs and a token to fetch the next page if one exists. */
        IdSearchResults: {
            /** @description The list of issue IDs found by the search. */
            readonly issueIds?: number[];
            /** @description Continuation token to fetch the next page. If this result represents the last or the only page this token will be null. */
            readonly nextPageToken?: string;
        };
        IncludedFields: {
            actuallyIncluded?: string[];
            excluded?: string[];
            included?: string[];
        };
        InputStreamSource: {
            inputStream?: Record<string, never>;
        };
        /** @description List of Issue Ids Or Keys that are to be archived or unarchived */
        IssueArchivalSyncRequest: {
            issueIdsOrKeys?: string[];
        };
        /** @description Number of archived/unarchived issues and list of errors that occurred during the action, if any. */
        IssueArchivalSyncResponse: {
            errors?: components["schemas"]["Errors"];
            /** Format: int64 */
            numberOfIssuesUpdated?: number;
        };
        /** @description Details about an issue. */
        IssueBean: {
            /** @description Details of changelogs associated with the issue. */
            readonly changelog?: components["schemas"]["PageOfChangelogs"];
            /** @description The metadata for the fields on the issue that can be amended. */
            readonly editmeta?: components["schemas"]["IssueUpdateMetadata"];
            /** @description Expand options that include additional issue details in the response. */
            readonly expand?: string;
            fields?: {
                [key: string]: unknown;
            };
            fieldsToInclude?: components["schemas"]["IncludedFields"];
            /** @description The ID of the issue. */
            readonly id?: string;
            /** @description The key of the issue. */
            readonly key?: string;
            /** @description The ID and name of each field present on the issue. */
            readonly names?: {
                [key: string]: string;
            };
            /** @description The operations that can be performed on the issue. */
            readonly operations?: components["schemas"]["Operations"];
            /** @description Details of the issue properties identified in the request. */
            readonly properties?: {
                [key: string]: unknown;
            };
            /** @description The rendered value of each field present on the issue. */
            readonly renderedFields?: {
                [key: string]: unknown;
            };
            /** @description The schema describing each field present on the issue. */
            readonly schema?: {
                [key: string]: components["schemas"]["JsonTypeBean"];
            };
            /**
             * Format: uri
             * @description The URL of the issue details.
             */
            readonly self?: string;
            /** @description The transitions that can be performed on the issue. */
            readonly transitions?: components["schemas"]["IssueTransition"][];
            /** @description The versions of each field on the issue. */
            readonly versionedRepresentations?: {
                [key: string]: {
                    [key: string]: unknown;
                };
            };
        };
        /** @description Issue Bulk Delete Payload */
        IssueBulkDeletePayload: {
            /** @description List of issue IDs or keys which are to be bulk deleted. These IDs or keys can be from different projects and issue types. */
            selectedIssueIdsOrKeys: string[];
            /**
             * @description A boolean value that indicates whether to send a bulk change notification when the issues are being deleted.
             *
             *     If `true`, dispatches a bulk notification email to users about the updates.
             * @default true
             */
            sendBulkNotification: boolean;
        };
        IssueBulkEditField: {
            /** @description Description of the field. */
            description?: string;
            /** @description A list of options related to the field, applicable in contexts where multiple selections are allowed. */
            fieldOptions?: components["schemas"]["IssueBulkOperationsFieldOption"][];
            /** @description The unique ID of the field. */
            id?: string;
            /** @description Indicates whether the field is mandatory for the operation. */
            isRequired?: boolean;
            /** @description Specifies supported actions (like add, replace, remove) on multi-select fields via an enum. */
            multiSelectFieldOptions?: ("ADD" | "REMOVE" | "REPLACE" | "REMOVE_ALL")[];
            /** @description The display name of the field. */
            name?: string;
            /** @description A URL to fetch additional data for the field */
            searchUrl?: string;
            /** @description The type of the field. */
            type?: string;
            /** @description A message indicating why the field is unavailable for editing. */
            unavailableMessage?: string;
        };
        /** @description Issue Bulk Edit Payload */
        IssueBulkEditPayload: {
            /** @description An object that defines the values to be updated in specified fields of an issue. The structure and content of this parameter vary depending on the type of field being edited. Although the order is not significant, ensure that field IDs align with those in selectedActions. */
            editedFieldsInput: components["schemas"]["JiraIssueFields"];
            /** @description List of all the field IDs that are to be bulk edited. Each field ID in this list corresponds to a specific attribute of an issue that is set to be modified in the bulk edit operation. The relevant field ID can be obtained by calling the Bulk Edit Get Fields REST API (documentation available on this page itself). */
            selectedActions: string[];
            /** @description List of issue IDs or keys which are to be bulk edited. These IDs or keys can be from different projects and issue types. */
            selectedIssueIdsOrKeys: string[];
            /**
             * @description A boolean value that indicates whether to send a bulk change notification when the issues are being edited.
             *
             *     If `true`, dispatches a bulk notification email to users about the updates.
             * @default true
             */
            sendBulkNotification: boolean;
        };
        /** @description Issue Bulk Move Payload */
        IssueBulkMovePayload: {
            /**
             * @description A boolean value that indicates whether to send a bulk change notification when the issues are being moved.
             *
             *     If `true`, dispatches a bulk notification email to users about the updates.
             * @default true
             */
            sendBulkNotification: boolean;
            /** @description An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.
             *
             *     The key is a string that is created by concatenating the following three entities in order, separated by commas. The format is `<project ID or key>,<issueType ID>,<parent ID or key>`. It should be unique across mappings provided in the payload. If you provide multiple mappings for the same key, only one will be processed. However, the operation won't fail, so the error may be hard to track down.
             *
             *      *  ***Destination project*** (Required): ID or key of the project to which the issues are being moved.
             *      *  ***Destination issueType*** (Required): ID of the issueType to which the issues are being moved.
             *      *  ***Destination parent ID or key*** (Optional): ID or key of the issue which will become the parent of the issues being moved. Only required when the destination issueType is a subtask. */
            targetToSourcesMapping?: {
                [key: string]: components["schemas"]["targetToSourcesMapping"];
            };
        };
        IssueBulkOperationsFieldOption: Record<string, never>;
        IssueBulkTransitionForWorkflow: {
            /** @description List of issue keys from the request which are associated with this workflow. */
            readonly issues?: string[];
            /** @description Indicates whether all the transitions of this workflow are available in the transitions list or not. */
            readonly isTransitionsFiltered?: boolean;
            /** @description List of transitions available for issues from the request which are associated with this workflow.
             *
             *      **This list includes only those transitions that are common across the issues in this workflow and do not involve any additional field updates.**  */
            readonly transitions?: components["schemas"]["SimplifiedIssueTransition"][];
        };
        /** @description Issue Bulk Transition Payload */
        IssueBulkTransitionPayload: {
            /** @description List of objects and each object has two properties:
             *
             *      *  Issues that will be bulk transitioned.
             *      *  TransitionId that corresponds to a specific transition of issues that share the same workflow. */
            bulkTransitionInputs: components["schemas"]["BulkTransitionSubmitInput"][];
            /**
             * @description A boolean value that indicates whether to send a bulk change notification when the issues are being transitioned.
             *
             *     If `true`, dispatches a bulk notification email to users about the updates.
             * @default true
             */
            sendBulkNotification: boolean;
        };
        /** @description List of changelogs that belong to single issue */
        IssueChangeLog: {
            /** @description List of changelogs that belongs to given issueId. */
            readonly changeHistories?: components["schemas"]["Changelog"][];
            /** @description The ID of the issue. */
            readonly issueId?: string;
        };
        /** @description A list of changelog IDs. */
        IssueChangelogIds: {
            /** @description The list of changelog IDs. */
            changelogIds: number[];
        };
        IssueCommentListRequestBean: {
            /** @description The list of comment IDs. A maximum of 1000 IDs can be specified. */
            ids: number[];
        };
        /** @description An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression. */
        IssueContextVariable: {
            /**
             * Format: int64
             * @description The issue ID.
             */
            id?: number;
            /** @description The issue key. */
            key?: string;
            /**
             * @description Type of custom context variable. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "issue";
        };
        /** @description The wrapper for the issue creation metadata for a list of projects. */
        IssueCreateMetadata: {
            /** @description Expand options that include additional project details in the response. */
            readonly expand?: string;
            /** @description List of projects and their issue creation metadata. */
            readonly projects?: components["schemas"]["ProjectIssueCreateMetadata"][];
        };
        /** @description Lists of issues and entity properties. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information. */
        IssueEntityProperties: {
            /** @description A list of entity property IDs. */
            entitiesIds?: number[];
            /** @description A list of entity property keys and values. */
            properties?: {
                [key: string]: components["schemas"]["JsonNode"];
            };
        };
        /** @description An issue ID with entity property values. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information. */
        IssueEntityPropertiesForMultiUpdate: {
            /**
             * Format: int64
             * @description The ID of the issue.
             */
            issueID?: number;
            /** @description Entity properties to set on the issue. The maximum length of an issue property value is 32768 characters. */
            properties?: {
                [key: string]: components["schemas"]["JsonNode"];
            };
        };
        /** @description Describes the error that occurred when retrieving data for a particular issue. */
        IssueError: {
            /** @description The error that occurred when fetching this issue. */
            readonly errorMessage?: string;
            /** @description The ID of the issue. */
            readonly id?: string;
        };
        /** @description Details about an issue event. */
        IssueEvent: {
            /**
             * Format: int64
             * @description The ID of the event.
             */
            readonly id?: number;
            /** @description The name of the event. */
            readonly name?: string;
        };
        /** @description Details of the options for a select list issue field. */
        IssueFieldOption: {
            config?: components["schemas"]["IssueFieldOptionConfiguration"];
            /**
             * Format: int64
             * @description The unique identifier for the option. This is only unique within the select field's set of options.
             */
            id: number;
            /** @description The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module. */
            properties?: {
                [key: string]: unknown;
            };
            /** @description The option's name, which is displayed in Jira. */
            value: string;
        };
        /** @description Details of the projects the option is available in. */
        IssueFieldOptionConfiguration: {
            /** @description DEPRECATED */
            attributes?: ("notSelectable" | "defaultValue")[];
            /** @description Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects. */
            scope?: components["schemas"]["IssueFieldOptionScopeBean"];
        };
        IssueFieldOptionCreateBean: {
            config?: components["schemas"]["IssueFieldOptionConfiguration"];
            /** @description The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module. */
            properties?: {
                [key: string]: unknown;
            };
            /** @description The option's name, which is displayed in Jira. */
            value: string;
        } & {
            [key: string]: unknown;
        };
        IssueFieldOptionScopeBean: {
            /** @description Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects. */
            global?: components["schemas"]["GlobalScopeBean"];
            /** @description DEPRECATED */
            projects?: number[];
            /** @description Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context. */
            projects2?: components["schemas"]["ProjectScopeBean"][];
        };
        /** @description Bulk operation filter details. */
        IssueFilterForBulkPropertyDelete: {
            /** @description The value of properties to perform the bulk operation on. */
            currentValue?: unknown;
            /** @description List of issues to perform the bulk delete operation on. */
            entityIds?: number[];
        };
        /** @description Bulk operation filter details. */
        IssueFilterForBulkPropertySet: {
            /** @description The value of properties to perform the bulk operation on. */
            currentValue?: unknown;
            /** @description List of issues to perform the bulk operation on. */
            entityIds?: number[];
            /** @description Whether the bulk operation occurs only when the property is present on or absent from an issue. */
            hasProperty?: boolean;
        };
        IssueLimitReportRequest: {
            /** @description A list of fields and their respective approaching limit threshold. Required for querying issues approaching limits. Optional for querying issues breaching limits. Accepted fields are: `comment`, `worklog`, `attachment`, `remoteIssueLinks`, and `issuelinks`. Example: `{"issuesApproachingLimitParams": {"comment": 4500, "attachment": 1800}}` */
            issuesApproachingLimitParams?: {
                [key: string]: number;
            };
        };
        IssueLimitReportResponseBean: {
            /** @description A list of ids of issues approaching the limit and their field count */
            issuesApproachingLimit?: {
                [key: string]: {
                    [key: string]: number;
                };
            };
            /** @description A list of ids of issues breaching the limit and their field count */
            issuesBreachingLimit?: {
                [key: string]: {
                    [key: string]: number;
                };
            };
            /** @description The fields and their defined limits */
            limits?: {
                [key: string]: number;
            };
        };
        /** @description Details of a link between issues. */
        IssueLink: {
            /** @description The ID of the issue link. */
            readonly id?: string;
            /** @description Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link. */
            inwardIssue: components["schemas"]["LinkedIssue"];
            /** @description Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link. */
            outwardIssue: components["schemas"]["LinkedIssue"];
            /**
             * Format: uri
             * @description The URL of the issue link.
             */
            readonly self?: string;
            /** @description The type of link between the issues. */
            type: components["schemas"]["IssueLinkType"];
        };
        /** @description This object is used as follows:
         *
         *      *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get).
         *      *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types. */
        IssueLinkType: {
            /** @description The ID of the issue link type and is used as follows:
             *
             *      *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.
             *      *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is read only. */
            id?: string;
            /** @description The description of the issue link type inward link and is used as follows:
             *
             *      *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
             *      *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only. */
            inward?: string;
            /** @description The name of the issue link type and is used as follows:
             *
             *      *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.
             *      *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only. */
            name?: string;
            /** @description The description of the issue link type outward link and is used as follows:
             *
             *      *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
             *      *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only. */
            outward?: string;
            /**
             * Format: uri
             * @description The URL of the issue link type. Read only.
             */
            readonly self?: string;
        };
        /** @description A list of issue link type beans. */
        IssueLinkTypes: {
            /** @description The issue link type bean. */
            readonly issueLinkTypes?: components["schemas"]["IssueLinkType"][];
        };
        /** @description A list of issue IDs. */
        IssueList: {
            /** @description The list of issue IDs. */
            issueIds: string[];
        };
        /** @description A list of matched issues or errors for each JQL query, in the order the JQL queries were passed. */
        IssueMatches: {
            matches: components["schemas"]["IssueMatchesForJQL"][];
        };
        /** @description A list of the issues matched to a JQL query or details of errors encountered during matching. */
        IssueMatchesForJQL: {
            /** @description A list of errors. */
            errors: string[];
            /** @description A list of issue IDs. */
            matchedIssues: number[];
        };
        /** @description A list of issues suggested for use in auto-completion. */
        IssuePickerSuggestions: {
            /** @description A list of issues for an issue type suggested for use in auto-completion. */
            readonly sections?: components["schemas"]["IssuePickerSuggestionsIssueType"][];
        };
        /** @description A type of issue suggested for use in auto-completion. */
        IssuePickerSuggestionsIssueType: {
            /** @description The ID of the type of issues suggested for use in auto-completion. */
            readonly id?: string;
            /** @description A list of issues suggested for use in auto-completion. */
            readonly issues?: components["schemas"]["SuggestedIssue"][];
            /** @description The label of the type of issues suggested for use in auto-completion. */
            readonly label?: string;
            /** @description If no issue suggestions are found, returns a message indicating no suggestions were found, */
            readonly msg?: string;
            /** @description If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned. */
            readonly sub?: string;
        };
        /** @description List of issues and JQL queries. */
        IssuesAndJQLQueries: {
            /** @description A list of issue IDs. */
            issueIds: number[];
            /** @description A list of JQL queries. */
            jqls: string[];
        };
        /** @description Issue security level member. */
        IssueSecurityLevelMember: {
            /** @description The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information. */
            holder: components["schemas"]["PermissionHolder"];
            /**
             * Format: int64
             * @description The ID of the issue security level member.
             */
            id: number;
            /**
             * Format: int64
             * @description The ID of the issue security level.
             */
            issueSecurityLevelId: number;
        };
        /** @description Details about an project using security scheme mapping. */
        IssueSecuritySchemeToProjectMapping: {
            readonly issueSecuritySchemeId?: string;
            readonly projectId?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description The description of the page of issues loaded by the provided JQL query. */
        IssuesJqlMetaDataBean: {
            /**
             * Format: int32
             * @description The number of issues that were loaded in this evaluation.
             */
            count: number;
            /**
             * Format: int32
             * @description The maximum number of issues that could be loaded in this evaluation.
             */
            maxResults: number;
            /**
             * Format: int64
             * @description The index of the first issue.
             */
            startAt: number;
            /**
             * Format: int64
             * @description The total number of issues the JQL returned.
             */
            totalCount: number;
            /** @description Any warnings related to the JQL query. Present only if the validation mode was set to `warn`. */
            validationWarnings?: string[];
        };
        /** @description Meta data describing the `issues` context variable. */
        IssuesMetaBean: {
            jql?: components["schemas"]["IssuesJqlMetaDataBean"];
        };
        IssuesUpdateBean: {
            issueUpdates?: components["schemas"]["IssueUpdateDetails"][];
        } & {
            [key: string]: unknown;
        };
        /** @description Details of an issue transition. */
        IssueTransition: {
            /** @description Expand options that include additional transition details in the response. */
            readonly expand?: string;
            /** @description Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request. */
            readonly fields?: {
                [key: string]: components["schemas"]["FieldMetadata"];
            };
            /** @description Whether there is a screen associated with the issue transition. */
            readonly hasScreen?: boolean;
            /** @description The ID of the issue transition. Required when specifying a transition to undertake. */
            id?: string;
            /** @description Whether the transition is available to be performed. */
            readonly isAvailable?: boolean;
            /** @description Whether the issue has to meet criteria before the issue transition is applied. */
            readonly isConditional?: boolean;
            /** @description Whether the issue transition is global, that is, the transition is applied to issues regardless of their status. */
            readonly isGlobal?: boolean;
            /** @description Whether this is the initial issue transition for the workflow. */
            readonly isInitial?: boolean;
            looped?: boolean;
            /** @description The name of the issue transition. */
            readonly name?: string;
            /** @description Details of the issue status after the transition. */
            readonly to?: components["schemas"]["StatusDetails"];
        } & {
            [key: string]: unknown;
        };
        IssueTransitionStatus: {
            /**
             * Format: int32
             * @description The unique ID of the status.
             */
            readonly statusId?: number;
            /** @description The name of the status. */
            readonly statusName?: string;
        };
        IssueTypeCreateBean: {
            /** @description The description of the issue type. */
            description?: string;
            /**
             * Format: int32
             * @description The hierarchy level of the issue type. Use:
             *
             *      *  `-1` for Subtask.
             *      *  `0` for Base.
             *
             *     Defaults to `0`.
             */
            hierarchyLevel?: number;
            /** @description The unique name for the issue type. The maximum length is 60 characters. */
            name: string;
            /**
             * @description Deprecated. Use `hierarchyLevel` instead. See the [deprecation notice](https://community.developer.atlassian.com/t/deprecation-of-the-epic-link-parent-link-and-other-related-fields-in-rest-apis-and-webhooks/54048) for details.
             *
             *     Whether the issue type is `subtype` or `standard`. Defaults to `standard`.
             * @enum {string}
             */
            type?: "subtask" | "standard";
        };
        /** @description Details about an issue type. */
        IssueTypeDetails: {
            /**
             * Format: int64
             * @description The ID of the issue type's avatar.
             */
            readonly avatarId?: number;
            /** @description The description of the issue type. */
            readonly description?: string;
            /**
             * Format: uuid
             * @description Unique ID for next-gen projects.
             */
            readonly entityId?: string;
            /**
             * Format: int32
             * @description Hierarchy level of the issue type.
             */
            readonly hierarchyLevel?: number;
            /** @description The URL of the issue type's avatar. */
            readonly iconUrl?: string;
            /** @description The ID of the issue type. */
            readonly id?: string;
            /** @description The name of the issue type. */
            readonly name?: string;
            /** @description Details of the next-gen projects the issue type is available in. */
            readonly scope?: components["schemas"]["Scope"];
            /** @description The URL of these issue type details. */
            readonly self?: string;
            /** @description Whether this issue type is used to create subtasks. */
            readonly subtask?: boolean;
        };
        /** @description The list of issue type IDs. */
        IssueTypeIds: {
            /** @description The list of issue type IDs. */
            issueTypeIds: string[];
        };
        /** @description The list of issue type IDs to be removed from the field configuration scheme. */
        IssueTypeIdsToRemove: {
            /** @description The list of issue type IDs. Must contain unique values not longer than 255 characters and not be empty. Maximum of 100 IDs. */
            issueTypeIds: string[];
        };
        /** @description Details of an issue type. */
        IssueTypeInfo: {
            /**
             * Format: int64
             * @description The avatar of the issue type.
             */
            readonly avatarId?: number;
            /**
             * Format: int64
             * @description The ID of the issue type.
             */
            readonly id?: number;
            /** @description The name of the issue type. */
            readonly name?: string;
        };
        /** @description Details of the issue creation metadata for an issue type. */
        IssueTypeIssueCreateMetadata: {
            /**
             * Format: int64
             * @description The ID of the issue type's avatar.
             */
            readonly avatarId?: number;
            /** @description The description of the issue type. */
            readonly description?: string;
            /**
             * Format: uuid
             * @description Unique ID for next-gen projects.
             */
            readonly entityId?: string;
            /** @description Expand options that include additional issue type metadata details in the response. */
            readonly expand?: string;
            /** @description List of the fields available when creating an issue for the issue type. */
            readonly fields?: {
                [key: string]: components["schemas"]["FieldMetadata"];
            };
            /**
             * Format: int32
             * @description Hierarchy level of the issue type.
             */
            readonly hierarchyLevel?: number;
            /** @description The URL of the issue type's avatar. */
            readonly iconUrl?: string;
            /** @description The ID of the issue type. */
            readonly id?: string;
            /** @description The name of the issue type. */
            readonly name?: string;
            /** @description Details of the next-gen projects the issue type is available in. */
            readonly scope?: components["schemas"]["Scope"];
            /** @description The URL of these issue type details. */
            readonly self?: string;
            /** @description Whether this issue type is used to create subtasks. */
            readonly subtask?: boolean;
        };
        /** @description Details of an issue type scheme. */
        IssueTypeScheme: {
            /** @description The ID of the default issue type of the issue type scheme. */
            defaultIssueTypeId?: string;
            /** @description The description of the issue type scheme. */
            description?: string;
            /** @description The ID of the issue type scheme. */
            id: string;
            /** @description Whether the issue type scheme is the default. */
            isDefault?: boolean;
            /** @description The name of the issue type scheme. */
            name: string;
        };
        /** @description Details of an issue type scheme and its associated issue types. */
        IssueTypeSchemeDetails: {
            /** @description The ID of the default issue type of the issue type scheme. This ID must be included in `issueTypeIds`. */
            defaultIssueTypeId?: string;
            /** @description The description of the issue type scheme. The maximum length is 4000 characters. */
            description?: string;
            /** @description The list of issue types IDs of the issue type scheme. At least one standard issue type ID is required. */
            issueTypeIds: string[];
            /** @description The name of the issue type scheme. The name must be unique. The maximum length is 255 characters. */
            name: string;
        };
        /** @description The ID of an issue type scheme. */
        IssueTypeSchemeID: {
            /** @description The ID of the issue type scheme. */
            readonly issueTypeSchemeId: string;
        };
        /** @description Issue type scheme item. */
        IssueTypeSchemeMapping: {
            /** @description The ID of the issue type. */
            issueTypeId: string;
            /** @description The ID of the issue type scheme. */
            issueTypeSchemeId: string;
        };
        /** @description Details of the association between an issue type scheme and project. */
        IssueTypeSchemeProjectAssociation: {
            /** @description The ID of the issue type scheme. */
            issueTypeSchemeId: string;
            /** @description The ID of the project. */
            projectId: string;
        };
        /** @description Issue type scheme with a list of the projects that use it. */
        IssueTypeSchemeProjects: {
            /** @description Details of an issue type scheme. */
            issueTypeScheme: components["schemas"]["IssueTypeScheme"];
            /** @description The IDs of the projects using the issue type scheme. */
            projectIds: string[];
        };
        /** @description Details of the name, description, and default issue type for an issue type scheme. */
        IssueTypeSchemeUpdateDetails: {
            /** @description The ID of the default issue type of the issue type scheme. */
            defaultIssueTypeId?: string;
            /** @description The description of the issue type scheme. The maximum length is 4000 characters. */
            description?: string;
            /** @description The name of the issue type scheme. The name must be unique. The maximum length is 255 characters. */
            name?: string;
        };
        /** @description Details of an issue type screen scheme. */
        IssueTypeScreenScheme: {
            /** @description The description of the issue type screen scheme. */
            description?: string;
            /** @description The ID of the issue type screen scheme. */
            id: string;
            /** @description The name of the issue type screen scheme. */
            name: string;
        };
        /** @description The details of an issue type screen scheme. */
        IssueTypeScreenSchemeDetails: {
            /** @description The description of the issue type screen scheme. The maximum length is 255 characters. */
            description?: string;
            /** @description The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme. */
            issueTypeMappings: components["schemas"]["IssueTypeScreenSchemeMapping"][];
            /** @description The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters. */
            name: string;
        };
        /** @description The ID of an issue type screen scheme. */
        IssueTypeScreenSchemeId: {
            /** @description The ID of the issue type screen scheme. */
            readonly id: string;
        };
        /** @description The screen scheme for an issue type. */
        IssueTypeScreenSchemeItem: {
            /** @description The ID of the issue type or *default*. Only issue types used in classic projects are accepted. When creating an issue screen scheme, an entry for *default* must be provided and defines the mapping for all issue types without a screen scheme. Otherwise, a *default* entry can't be provided. */
            issueTypeId: string;
            /** @description The ID of the issue type screen scheme. */
            issueTypeScreenSchemeId: string;
            /** @description The ID of the screen scheme. */
            screenSchemeId: string;
        };
        /** @description The IDs of the screen schemes for the issue type IDs. */
        IssueTypeScreenSchemeMapping: {
            /** @description The ID of the issue type or *default*. Only issue types used in classic projects are accepted. An entry for *default* must be provided and defines the mapping for all issue types without a screen scheme. */
            issueTypeId: string;
            /** @description The ID of the screen scheme. Only screen schemes used in classic projects are accepted. */
            screenSchemeId: string;
        };
        /** @description A list of issue type screen scheme mappings. */
        IssueTypeScreenSchemeMappingDetails: {
            /** @description The list of issue type to screen scheme mappings. A *default* entry cannot be specified because a default entry is added when an issue type screen scheme is created. */
            issueTypeMappings: components["schemas"]["IssueTypeScreenSchemeMapping"][];
        };
        /** @description Associated issue type screen scheme and project. */
        IssueTypeScreenSchemeProjectAssociation: {
            /** @description The ID of the issue type screen scheme. */
            issueTypeScreenSchemeId?: string;
            /** @description The ID of the project. */
            projectId?: string;
        };
        /** @description Issue type screen scheme with a list of the projects that use it. */
        IssueTypeScreenSchemesProjects: {
            /** @description Details of an issue type screen scheme. */
            issueTypeScreenScheme: components["schemas"]["IssueTypeScreenScheme"];
            /** @description The IDs of the projects using the issue type screen scheme. */
            projectIds: string[];
        };
        /** @description Details of an issue type screen scheme. */
        IssueTypeScreenSchemeUpdateDetails: {
            /** @description The description of the issue type screen scheme. The maximum length is 255 characters. */
            description?: string;
            /** @description The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters. */
            name?: string;
        };
        /** @description Details about the mapping between issue types and a workflow. */
        IssueTypesWorkflowMapping: {
            /** @description Whether the workflow is the default workflow for the workflow scheme. */
            defaultMapping?: boolean;
            /** @description The list of issue type IDs. */
            issueTypes?: string[];
            /** @description Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to `false`. */
            updateDraftIfNeeded?: boolean;
            /** @description The name of the workflow. Optional if updating the workflow-issue types mapping. */
            workflow?: string;
        };
        /** @description Mapping of an issue type to a context. */
        IssueTypeToContextMapping: {
            /** @description The ID of the context. */
            contextId: string;
            /** @description Whether the context is mapped to any issue type. */
            isAnyIssueType?: boolean;
            /** @description The ID of the issue type. */
            issueTypeId?: string;
        };
        IssueTypeUpdateBean: {
            /**
             * Format: int64
             * @description The ID of an issue type avatar.
             */
            avatarId?: number;
            /** @description The description of the issue type. */
            description?: string;
            /** @description The unique name for the issue type. The maximum length is 60 characters. */
            name?: string;
        };
        /** @description Status details for an issue type. */
        IssueTypeWithStatus: {
            /** @description The ID of the issue type. */
            readonly id: string;
            /** @description The name of the issue type. */
            readonly name: string;
            /** @description The URL of the issue type's status details. */
            readonly self: string;
            /** @description List of status details for the issue type. */
            readonly statuses: components["schemas"]["StatusDetails"][];
            /** @description Whether this issue type represents subtasks. */
            readonly subtask: boolean;
        };
        /** @description Details about the mapping between an issue type and a workflow. */
        IssueTypeWorkflowMapping: {
            /** @description The ID of the issue type. Not required if updating the issue type-workflow mapping. */
            issueType?: string;
            /** @description Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping. */
            updateDraftIfNeeded?: boolean;
            /** @description The name of the workflow. */
            workflow?: string;
        };
        /** @description Details of an issue update request. */
        IssueUpdateDetails: {
            /** @description List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`. */
            fields?: {
                [key: string]: unknown;
            };
            /** @description Additional issue history details. */
            historyMetadata?: components["schemas"]["HistoryMetadata"];
            /** @description Details of issue properties to be add or update. */
            properties?: components["schemas"]["EntityProperty"][];
            /** @description Details of a transition. Required when performing a transition, optional when creating or editing an issue. */
            transition?: components["schemas"]["IssueTransition"];
            /** @description A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`. */
            update?: {
                [key: string]: components["schemas"]["FieldUpdateOperation"][];
            };
        } & {
            [key: string]: unknown;
        };
        /** @description A list of editable field details. */
        IssueUpdateMetadata: {
            readonly fields?: {
                [key: string]: components["schemas"]["FieldMetadata"];
            };
        };
        /** @description The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. This bean will be replacing `JexpIssues` bean as part of new `evaluate` endpoint */
        JexpEvaluateCtxIssues: {
            /** @description The JQL query that specifies the set of issues available in the Jira expression. */
            jql?: components["schemas"]["JexpEvaluateCtxJqlIssues"];
        };
        /** @description The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `nextPageToken` and `maxResults` properties. This bean will be replacing JexpJqlIssues bean as part of new `evaluate` endpoint */
        JexpEvaluateCtxJqlIssues: {
            /**
             * Format: int32
             * @description The maximum number of issues to return from the JQL query. max results value considered may be lower than the number specific here.
             */
            maxResults?: number;
            /** @description The token for a page to fetch that is not the first page. The first page has a `nextPageToken` of `null`. Use the `nextPageToken` to fetch the next page of issues. */
            nextPageToken?: string;
            /** @description The JQL query, required to be bounded. Additionally, `orderBy` clause can contain a maximum of 7 fields */
            query?: string;
        };
        /** @description The description of the page of issues loaded by the provided JQL query.This bean will be replacing IssuesJqlMetaDataBean bean as part of new `evaluate` endpoint */
        JExpEvaluateIssuesJqlMetaDataBean: {
            /** @description Next Page token for the next page of issues. */
            nextPageToken: string;
        };
        /** @description Meta data describing the `issues` context variable.This bean will be replacing IssuesMetaBean bean as part of new `evaluate` endpoint */
        JExpEvaluateIssuesMetaBean: {
            jql?: components["schemas"]["JExpEvaluateIssuesJqlMetaDataBean"];
        };
        /** @description The result of evaluating a Jira expression.This bean will be replacing `JiraExpressionResultBean` bean as part of new evaluate endpoint */
        JExpEvaluateJiraExpressionResultBean: {
            /** @description Contains various characteristics of the performed expression evaluation. */
            meta?: components["schemas"]["JExpEvaluateMetaDataBean"];
            /** @description The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.) */
            value: unknown;
        };
        /** @description Contains information about the expression evaluation. This bean will be replacing `JiraExpressionEvaluationMetaDataBean` bean as part of new `evaluate` endpoint */
        JExpEvaluateMetaDataBean: {
            /** @description Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression. */
            complexity?: components["schemas"]["JiraExpressionsComplexityBean"];
            /** @description Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here. */
            issues?: components["schemas"]["JExpEvaluateIssuesMetaBean"];
        };
        /** @description The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. */
        JexpIssues: {
            /** @description The JQL query that specifies the set of issues available in the Jira expression. */
            jql?: components["schemas"]["JexpJqlIssues"];
        };
        /** @description The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `startAt` and `maxResults` properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect `meta.issues.jql.count` in the response. */
        JexpJqlIssues: {
            /**
             * Format: int32
             * @description The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.
             */
            maxResults?: number;
            /** @description The JQL query. */
            query?: string;
            /**
             * Format: int64
             * @description The index of the first issue to return from the JQL query.
             */
            startAt?: number;
            /**
             * @description Determines how to validate the JQL query and treat the validation results.
             * @default strict
             * @enum {string}
             */
            validation: "strict" | "warn" | "none";
        };
        JiraCascadingSelectField: {
            childOptionValue?: components["schemas"]["JiraSelectedOptionField"];
            fieldId: string;
            parentOptionValue: components["schemas"]["JiraSelectedOptionField"];
        };
        JiraColorField: {
            color: components["schemas"]["JiraColorInput"];
            fieldId: string;
        };
        JiraColorInput: {
            name: string;
        };
        JiraComponentField: {
            /** Format: int64 */
            componentId: number;
        };
        JiraDateField: {
            date?: components["schemas"]["JiraDateInput"];
            fieldId: string;
        };
        JiraDateInput: {
            formattedDate: string;
        };
        JiraDateTimeField: {
            dateTime: components["schemas"]["JiraDateTimeInput"];
            fieldId: string;
        };
        JiraDateTimeInput: {
            formattedDateTime: string;
        };
        JiraDurationField: {
            originalEstimateField: string;
        };
        /** @description Details about the analysed Jira expression. */
        JiraExpressionAnalysis: {
            complexity?: components["schemas"]["JiraExpressionComplexity"];
            /** @description A list of validation errors. Not included if the expression is valid. */
            errors?: components["schemas"]["JiraExpressionValidationError"][];
            /** @description The analysed expression. */
            expression: string;
            /** @description EXPERIMENTAL. The inferred type of the expression. */
            type?: string;
            /** @description Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations). */
            valid: boolean;
        };
        /** @description Details about the complexity of the analysed Jira expression. */
        JiraExpressionComplexity: {
            /** @description Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:
             *
             *      *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.
             *      *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments). */
            expensiveOperations: string;
            /** @description Variables used in the formula, mapped to the parts of the expression they refer to. */
            variables?: {
                [key: string]: string;
            };
        };
        JiraExpressionEvalContextBean: {
            /**
             * Format: int64
             * @description The ID of the board that is available under the `board` variable when evaluating the expression.
             */
            board?: number;
            /** @description Custom context variables and their types. These variable types are available for use in a custom context:
             *
             *      *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
             *      *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
             *      *  `json`: A JSON object containing custom content.
             *      *  `list`: A JSON list of `user`, `issue`, or `json` variable types. */
            custom?: components["schemas"]["CustomContextVariable"][];
            /**
             * Format: int64
             * @description The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
             */
            customerRequest?: number;
            /** @description The issue that is available under the `issue` variable when evaluating the expression. */
            issue?: components["schemas"]["IdOrKeyBean"];
            /** @description The collection of issues that is available under the `issues` variable when evaluating the expression. */
            issues?: components["schemas"]["JexpIssues"];
            /** @description The project that is available under the `project` variable when evaluating the expression. */
            project?: components["schemas"]["IdOrKeyBean"];
            /**
             * Format: int64
             * @description The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
             */
            serviceDesk?: number;
            /**
             * Format: int64
             * @description The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
             */
            sprint?: number;
        };
        JiraExpressionEvalRequestBean: {
            /** @description The context in which the Jira expression is evaluated. */
            context?: components["schemas"]["JiraExpressionEvalContextBean"];
            /**
             * @description The Jira expression to evaluate.
             * @example { key: issue.key, type: issue.issueType.name, links: issue.links.map(link => link.linkedIssue.id) }
             */
            expression: string;
        };
        JiraExpressionEvaluateContextBean: {
            /**
             * Format: int64
             * @description The ID of the board that is available under the `board` variable when evaluating the expression.
             */
            board?: number;
            /** @description Custom context variables and their types. These variable types are available for use in a custom context:
             *
             *      *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
             *      *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
             *      *  `json`: A JSON object containing custom content.
             *      *  `list`: A JSON list of `user`, `issue`, or `json` variable types. */
            custom?: components["schemas"]["CustomContextVariable"][];
            /**
             * Format: int64
             * @description The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
             */
            customerRequest?: number;
            /** @description The issue that is available under the `issue` variable when evaluating the expression. */
            issue?: components["schemas"]["IdOrKeyBean"];
            /** @description The collection of issues that is available under the `issues` variable when evaluating the expression. */
            issues?: components["schemas"]["JexpEvaluateCtxIssues"];
            /** @description The project that is available under the `project` variable when evaluating the expression. */
            project?: components["schemas"]["IdOrKeyBean"];
            /**
             * Format: int64
             * @description The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
             */
            serviceDesk?: number;
            /**
             * Format: int64
             * @description The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
             */
            sprint?: number;
        };
        /** @description The request to evaluate a Jira expression. This bean will be replacing `JiraExpressionEvaluateRequest` as part of new `evaluate` endpoint */
        JiraExpressionEvaluateRequestBean: {
            /** @description The context in which the Jira expression is evaluated. */
            context?: components["schemas"]["JiraExpressionEvaluateContextBean"];
            /**
             * @description The Jira expression to evaluate.
             * @example { key: issue.key, type: issue.issueType.name, links: issue.links.map(link => link.linkedIssue.id) }
             */
            expression: string;
        };
        JiraExpressionEvaluationMetaDataBean: {
            /** @description Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression. */
            complexity?: components["schemas"]["JiraExpressionsComplexityBean"];
            /** @description Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here. */
            issues?: components["schemas"]["IssuesMetaBean"];
        };
        /** @description Details of Jira expressions for analysis. */
        JiraExpressionForAnalysis: {
            /** @description Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables. */
            contextVariables?: {
                [key: string]: string;
            };
            /**
             * @description The list of Jira expressions to analyse.
             * @example issues.map(issue => issue.properties['property_key'])
             */
            expressions: string[];
        };
        /** @description The result of evaluating a Jira expression. */
        JiraExpressionResult: {
            /** @description Contains various characteristics of the performed expression evaluation. */
            meta?: components["schemas"]["JiraExpressionEvaluationMetaDataBean"];
            /** @description The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.) */
            value: unknown;
        };
        /** @description Details about the analysed Jira expression. */
        JiraExpressionsAnalysis: {
            /** @description The results of Jira expressions analysis. */
            results: components["schemas"]["JiraExpressionAnalysis"][];
        };
        JiraExpressionsComplexityBean: {
            /** @description The number of Jira REST API beans returned in the response. */
            beans: components["schemas"]["JiraExpressionsComplexityValueBean"];
            /** @description The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields. */
            expensiveOperations: components["schemas"]["JiraExpressionsComplexityValueBean"];
            /** @description The number of primitive values returned in the response. */
            primitiveValues: components["schemas"]["JiraExpressionsComplexityValueBean"];
            /** @description The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function. */
            steps: components["schemas"]["JiraExpressionsComplexityValueBean"];
        };
        JiraExpressionsComplexityValueBean: {
            /**
             * Format: int32
             * @description The maximum allowed complexity. The evaluation will fail if this value is exceeded.
             */
            limit: number;
            /**
             * Format: int32
             * @description The complexity value of the current expression.
             */
            value: number;
        };
        /** @description Details about syntax and type errors. The error details apply to the entire expression, unless the object includes:
         *
         *      *  `line` and `column`
         *      *  `expression` */
        JiraExpressionValidationError: {
            /**
             * Format: int32
             * @description The text column in which the error occurred.
             */
            column?: number;
            /** @description The part of the expression in which the error occurred. */
            expression?: string;
            /**
             * Format: int32
             * @description The text line in which the error occurred.
             */
            line?: number;
            /**
             * @description Details about the error.
             * @example !, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.
             */
            message: string;
            /**
             * @description The error type.
             * @enum {string}
             */
            type: "syntax" | "type" | "other";
        };
        JiraGroupInput: {
            groupName: string;
        };
        JiraIssueFields: {
            /** @description Add or clear a cascading select field:
             *
             *      *  To add, specify `optionId` for both parent and child.
             *      *  To clear the child, set its `optionId` to null.
             *      *  To clear both, set the parent's `optionId` to null. */
            cascadingSelectFields?: components["schemas"]["JiraCascadingSelectField"][];
            /** @description Add or clear a number field:
             *
             *      *  To add, specify a numeric `value`.
             *      *  To clear, set `value` to `null`. */
            clearableNumberFields?: components["schemas"]["JiraNumberField"][];
            /** @description Add or clear a color field:
             *
             *      *  To add, specify the color `name`. Available colors are: `purple`, `blue`, `green`, `teal`, `yellow`, `orange`, `grey`, `dark purple`, `dark blue`, `dark green`, `dark teal`, `dark yellow`, `dark orange`, `dark grey`.
             *      *  To clear, set the color `name` to an empty string. */
            colorFields?: components["schemas"]["JiraColorField"][];
            /** @description Add or clear a date picker field:
             *
             *      *  To add, specify the date in `d/mmm/yy` format or ISO format `dd-mm-yyyy`.
             *      *  To clear, set `formattedDate` to an empty string. */
            datePickerFields?: components["schemas"]["JiraDateField"][];
            /** @description Add or clear the planned start date and time:
             *
             *      *  To add, specify the date and time in ISO format for `formattedDateTime`.
             *      *  To clear, provide an empty string for `formattedDateTime`. */
            dateTimePickerFields?: components["schemas"]["JiraDateTimeField"][];
            /** @description Set the issue type field by providing an `issueTypeId`. */
            issueType?: components["schemas"]["JiraIssueTypeField"];
            /** @description Edit a labels field:
             *
             *      *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
             *      *  To clear labels, use the `REMOVE_ALL` option with an empty `labels` array. */
            labelsFields?: components["schemas"]["JiraLabelsField"][];
            /** @description Add or clear a multi-group picker field:
             *
             *      *  To add groups, provide an array of groups with `groupName`s.
             *      *  To clear all groups, use an empty `groups` array. */
            multipleGroupPickerFields?: components["schemas"]["JiraMultipleGroupPickerField"][];
            /** @description Assign or unassign multiple users to/from a field:
             *
             *      *  To assign, provide an array of user `accountId`s.
             *      *  To clear, set `users` to `null`. */
            multipleSelectClearableUserPickerFields?: components["schemas"]["JiraMultipleSelectUserPickerField"][];
            /** @description Add or clear a multi-select field:
             *
             *      *  To add, provide an array of options with `optionId`s.
             *      *  To clear, use an empty `options` array. */
            multipleSelectFields?: components["schemas"]["JiraMultipleSelectField"][];
            /** @description Edit a multi-version picker field like Fix Versions/Affects Versions:
             *
             *      *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
             *      *  To clear the field, use the `REMOVE_ALL` option with an empty `versions` array. */
            multipleVersionPickerFields?: components["schemas"]["JiraMultipleVersionPickerField"][];
            /** @description Edit a multi select components field:
             *
             *      *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
             *      *  To clear, use the `REMOVE_ALL` option with an empty `components` array. */
            multiselectComponents?: components["schemas"]["JiraMultiSelectComponentField"];
            /** @description Edit the original estimate field. */
            originalEstimateField?: components["schemas"]["JiraDurationField"];
            /** @description Set the priority of an issue by specifying a `priorityId`. */
            priority?: components["schemas"]["JiraPriorityField"];
            /** @description Add or clear a rich text field:
             *
             *      *  To add, provide `adfValue`. Note that rich text fields only support ADF values.
             *      *  To clear, use an empty `richText` object.
             *
             *     For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure). */
            richTextFields?: components["schemas"]["JiraRichTextField"][];
            /** @description Add or clear a single group picker field:
             *
             *      *  To add, specify the group with `groupName`.
             *      *  To clear, set `groupName` to an empty string. */
            singleGroupPickerFields?: components["schemas"]["JiraSingleGroupPickerField"][];
            /** @description Add or clear a single line text field:
             *
             *      *  To add, provide the `text` value.
             *      *  To clear, set `text` to an empty string. */
            singleLineTextFields?: components["schemas"]["JiraSingleLineTextField"][];
            /** @description Edit assignment for single select user picker fields like Assignee/Reporter:
             *
             *      *  To assign an issue, specify the user's `accountId`.
             *      *  To unassign an issue, set `user` to `null`.
             *      *  For automatic assignment, set `accountId` to `-1`. */
            singleSelectClearableUserPickerFields?: components["schemas"]["JiraSingleSelectUserPickerField"][];
            /** @description Add or clear a single select field:
             *
             *      *  To add, specify the option with an `optionId`.
             *      *  To clear, pass an option with `optionId` as `-1`. */
            singleSelectFields?: components["schemas"]["JiraSingleSelectField"][];
            /** @description Add or clear a single version picker field:
             *
             *      *  To add, specify the version with a `versionId`.
             *      *  To clear, set `versionId` to `-1`. */
            singleVersionPickerFields?: components["schemas"]["JiraSingleVersionPickerField"][];
            /** @description Edit the time tracking field. */
            timeTrackingField?: components["schemas"]["JiraTimeTrackingField"];
            /** @description Add or clear a URL field:
             *
             *      *  To add, provide the `url` with the desired URL value.
             *      *  To clear, set `url` to an empty string. */
            urlFields?: components["schemas"]["JiraUrlField"][];
        };
        JiraIssueTypeField: {
            issueTypeId: string;
        };
        JiraLabelsField: {
            /** @enum {string} */
            bulkEditMultiSelectFieldOption: "ADD" | "REMOVE" | "REPLACE" | "REMOVE_ALL";
            fieldId: string;
            labels: components["schemas"]["JiraLabelsInput"][];
        };
        JiraLabelsInput: {
            name: string;
        };
        JiraMultipleGroupPickerField: {
            fieldId: string;
            groups: components["schemas"]["JiraGroupInput"][];
        };
        JiraMultipleSelectField: {
            fieldId: string;
            options: components["schemas"]["JiraSelectedOptionField"][];
        };
        JiraMultipleSelectUserPickerField: {
            fieldId: string;
            users?: components["schemas"]["JiraUserField"][];
        };
        JiraMultipleVersionPickerField: {
            /** @enum {string} */
            bulkEditMultiSelectFieldOption: "ADD" | "REMOVE" | "REPLACE" | "REMOVE_ALL";
            fieldId: string;
            versions: components["schemas"]["JiraVersionField"][];
        };
        JiraMultiSelectComponentField: {
            /** @enum {string} */
            bulkEditMultiSelectFieldOption: "ADD" | "REMOVE" | "REPLACE" | "REMOVE_ALL";
            components: components["schemas"]["JiraComponentField"][];
            fieldId: string;
        };
        JiraNumberField: {
            fieldId: string;
            /** Format: double */
            value?: number;
        };
        JiraPriorityField: {
            priorityId: string;
        };
        JiraRichTextField: {
            fieldId: string;
            richText: components["schemas"]["JiraRichTextInput"];
        };
        JiraRichTextInput: {
            adfValue?: {
                [key: string]: unknown;
            };
        };
        JiraSelectedOptionField: {
            /** Format: int64 */
            optionId?: number;
        };
        JiraSingleGroupPickerField: {
            fieldId: string;
            group: components["schemas"]["JiraGroupInput"];
        };
        JiraSingleLineTextField: {
            fieldId: string;
            text: string;
        };
        /** @description Add or clear a single select field:
         *
         *      *  To add, specify the option with an `optionId`.
         *      *  To clear, pass an option with `optionId` as `-1`. */
        JiraSingleSelectField: {
            fieldId: string;
            option: components["schemas"]["JiraSelectedOptionField"];
        };
        JiraSingleSelectUserPickerField: {
            fieldId: string;
            user?: components["schemas"]["JiraUserField"];
        };
        JiraSingleVersionPickerField: {
            fieldId: string;
            version: components["schemas"]["JiraVersionField"];
        };
        /** @description Details of a status. */
        JiraStatus: {
            /** @description The description of the status. */
            description?: string;
            /** @description The ID of the status. */
            id?: string;
            /** @description The name of the status. */
            name?: string;
            scope?: components["schemas"]["StatusScope"];
            /**
             * @description The category of the status.
             * @enum {string}
             */
            statusCategory?: "TODO" | "IN_PROGRESS" | "DONE";
            /** @description Projects and issue types where the status is used. Only available if the `usages` expand is requested. */
            usages?: components["schemas"]["ProjectIssueTypes"][];
            /** @description The workflows that use this status. Only available if the `workflowUsages` expand is requested. */
            workflowUsages?: components["schemas"]["WorkflowUsages"][];
        };
        JiraTimeTrackingField: {
            timeRemaining: string;
        };
        JiraUrlField: {
            fieldId: string;
            url: string;
        };
        JiraUserField: {
            accountId: string;
        };
        JiraVersionField: {
            versionId?: string;
        };
        /** @description Details of a workflow. */
        JiraWorkflow: {
            /** @description The creation date of the workflow. */
            created?: string | null;
            /** @description The description of the workflow. */
            description?: string;
            /** @description The ID of the workflow. */
            id?: string;
            /** @description Indicates if the workflow can be edited. */
            isEditable?: boolean;
            /** @description The name of the workflow. */
            name?: string;
            scope?: components["schemas"]["WorkflowScope"];
            startPointLayout?: components["schemas"]["WorkflowLayout"];
            /** @description The statuses referenced in this workflow. */
            statuses?: components["schemas"]["WorkflowReferenceStatus"][];
            /** @description If there is a current [asynchronous task](#async-operations) operation for this workflow. */
            taskId?: string | null;
            /** @description The transitions of the workflow. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination. */
            transitions?: components["schemas"]["WorkflowTransitions"][];
            /** @description The last edited date of the workflow. */
            updated?: string | null;
            /** @description Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the requested workflows. */
            usages?: components["schemas"]["ProjectIssueTypes"][];
            version?: components["schemas"]["DocumentVersion"];
        };
        /** @description Details of a status. */
        JiraWorkflowStatus: {
            /** @description The description of the status. */
            description?: string;
            /** @description The ID of the status. */
            id?: string;
            /** @description The name of the status. */
            name?: string;
            scope?: components["schemas"]["WorkflowScope"];
            /**
             * @description The category of the status.
             * @enum {string}
             */
            statusCategory?: "TODO" | "IN_PROGRESS" | "DONE";
            /** @description The reference of the status. */
            statusReference?: string;
            /** @description The `statuses.usages` expand is an optional parameter that can be used when reading and updating statuses in Jira. It provides additional information about the projects and issue types associated with the requested statuses. */
            usages?: components["schemas"]["ProjectIssueTypes"][];
        };
        JQLCountRequestBean: {
            /** @description A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. For performance reasons, this parameter requires a bounded query. A bounded query is a query with a search restriction. */
            jql?: string;
        };
        JQLCountResultsBean: {
            /**
             * Format: int64
             * @description Number of issues matching JQL query.
             */
            count?: number;
        };
        /** @description Jql function precomputation. */
        JqlFunctionPrecomputationBean: {
            /** @description The list of arguments function was invoked with. */
            readonly arguments?: string[];
            /**
             * Format: date-time
             * @description The timestamp of the precomputation creation.
             */
            readonly created?: string;
            /** @description The error message to be displayed to the user. */
            readonly error?: string;
            /** @description The field the function was executed against. */
            readonly field?: string;
            /** @description The function key. */
            readonly functionKey?: string;
            /** @description The name of the function. */
            readonly functionName?: string;
            /** @description The id of the precomputation. */
            readonly id?: string;
            /** @description The operator in context of which function was executed. */
            readonly operator?: string;
            /**
             * Format: date-time
             * @description The timestamp of the precomputation last update.
             */
            readonly updated?: string;
            /**
             * Format: date-time
             * @description The timestamp of the precomputation last usage.
             */
            readonly used?: string;
            /** @description The JQL fragment stored as the precomputation. */
            readonly value?: string;
        };
        /** @description Request to fetch precomputations by ID. */
        JqlFunctionPrecomputationGetByIdRequest: {
            precomputationIDs?: string[];
        };
        /** @description Get precomputations by ID response. */
        JqlFunctionPrecomputationGetByIdResponse: {
            /** @description List of precomputations that were not found. */
            readonly notFoundPrecomputationIDs?: string[];
            /** @description The list of precomputations. */
            readonly precomputations?: components["schemas"]["JqlFunctionPrecomputationBean"][];
        };
        /** @description Precomputation id and its new value. */
        JqlFunctionPrecomputationUpdateBean: {
            /** @description The error message to be displayed to the user if the given function clause is no longer valid during recalculation of the precomputation. */
            error?: string;
            /** @description The id of the precomputation to update. */
            id: string;
            /** @description The new value of the precomputation. */
            value?: string;
        };
        /** @description Error response returned updating JQL Function precomputations fails. */
        JqlFunctionPrecomputationUpdateErrorResponse: {
            /** @description The list of error messages produced by this operation. */
            readonly errorMessages?: string[];
            /** @description List of precomputations that were not found. */
            readonly notFoundPrecomputationIDs?: string[];
        };
        /** @description List of pairs (id and value) for precomputation updates. */
        JqlFunctionPrecomputationUpdateRequestBean: {
            values?: components["schemas"]["JqlFunctionPrecomputationUpdateBean"][];
        };
        /** @description Result of updating JQL Function precomputations. */
        JqlFunctionPrecomputationUpdateResponse: {
            /** @description List of precomputations that were not found and skipped. Only returned if the request passed skipNotFoundPrecomputations=true. */
            readonly notFoundPrecomputationIDs?: string[];
        };
        /** @description The JQL queries to be converted. */
        JQLPersonalDataMigrationRequest: {
            /** @description A list of queries with user identifiers. Maximum of 100 queries. */
            queryStrings?: string[];
        };
        /** @description A list of JQL queries to parse. */
        JqlQueriesToParse: {
            /** @description A list of queries to parse. */
            queries: string[];
        };
        /** @description The list of JQL queries to sanitize for the given account IDs. */
        JqlQueriesToSanitize: {
            /** @description The list of JQL queries to sanitize. Must contain unique values. Maximum of 20 queries. */
            queries: components["schemas"]["JqlQueryToSanitize"][];
        };
        /** @description A parsed JQL query. */
        JqlQuery: {
            orderBy?: components["schemas"]["JqlQueryOrderByClause"];
            where?: components["schemas"]["JqlQueryClause"];
        };
        /** @description A JQL query clause. */
        JqlQueryClause: components["schemas"]["CompoundClause"] | components["schemas"]["FieldValueClause"] | components["schemas"]["FieldWasClause"] | components["schemas"]["FieldChangedClause"];
        /** @description Details of an operand in a JQL clause. */
        JqlQueryClauseOperand: components["schemas"]["ListOperand"] | components["schemas"]["ValueOperand"] | components["schemas"]["FunctionOperand"] | components["schemas"]["KeywordOperand"];
        /** @description A time predicate for a temporal JQL clause. */
        JqlQueryClauseTimePredicate: {
            operand: components["schemas"]["JqlQueryClauseOperand"];
            /**
             * @description The operator between the field and the operand.
             * @enum {string}
             */
            operator: "before" | "after" | "from" | "to" | "on" | "during" | "by";
        };
        /** @description A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries. */
        JqlQueryField: {
            /** @description The encoded name of the field, which can be used directly in a JQL query. */
            encodedName?: string;
            /** @description The name of the field. */
            name: string;
            /** @description When the field refers to a value in an entity property, details of the entity property value. */
            property?: components["schemas"]["JqlQueryFieldEntityProperty"][];
        };
        /** @description Details of an entity property. */
        JqlQueryFieldEntityProperty: {
            /**
             * @description The object on which the property is set.
             * @example issue
             */
            entity: string;
            /**
             * @description The key of the property.
             * @example stats
             */
            key: string;
            /**
             * @description The path in the property value to query.
             * @example comments.count
             */
            path: string;
            /**
             * @description The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.
             * @example number
             * @enum {string}
             */
            type?: "number" | "string" | "text" | "date" | "user";
        };
        /** @description Details of the order-by JQL clause. */
        JqlQueryOrderByClause: {
            /** @description The list of order-by clause fields and their ordering directives. */
            fields: components["schemas"]["JqlQueryOrderByClauseElement"][];
        };
        /** @description An element of the order-by JQL clause. */
        JqlQueryOrderByClauseElement: {
            /**
             * @description The direction in which to order the results.
             * @enum {string}
             */
            direction?: "asc" | "desc";
            field: components["schemas"]["JqlQueryField"];
        };
        /** @description The JQL query to sanitize for the account ID. If the account ID is null, sanitizing is performed for an anonymous user. */
        JqlQueryToSanitize: {
            /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
            accountId?: string | null;
            /** @description The query to sanitize. */
            query: string;
        };
        /** @description An operand that can be part of a list operand. */
        JqlQueryUnitaryOperand: components["schemas"]["ValueOperand"] | components["schemas"]["FunctionOperand"] | components["schemas"]["KeywordOperand"];
        /** @description JQL queries that contained users that could not be found */
        JQLQueryWithUnknownUsers: {
            /** @description The converted query, with accountIDs instead of user identifiers, or 'unknown' for users that could not be found */
            convertedQuery?: string;
            /** @description The original query, for reference */
            originalQuery?: string;
        };
        /** @description Lists of JQL reference data. */
        JQLReferenceData: {
            /** @description List of JQL query reserved words. */
            jqlReservedWords?: string[];
            /** @description List of fields usable in JQL queries. */
            visibleFieldNames?: components["schemas"]["FieldReferenceData"][];
            /** @description List of functions usable in JQL queries. */
            visibleFunctionNames?: components["schemas"]["FunctionReferenceData"][];
        };
        /** @description A JSON object with custom content. */
        JsonContextVariable: {
            /**
             * @description Type of custom context variable. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "json";
            /** @description A JSON object containing custom content. */
            value?: Record<string, never>;
        };
        JsonNode: {
            array?: boolean;
            bigDecimal?: boolean;
            bigInteger?: boolean;
            bigIntegerValue?: number;
            binary?: boolean;
            binaryValue?: string[];
            boolean?: boolean;
            booleanValue?: boolean;
            containerNode?: boolean;
            decimalValue?: number;
            double?: boolean;
            /** Format: double */
            doubleValue?: number;
            elements?: Record<string, never>;
            fieldNames?: Record<string, never>;
            fields?: Record<string, never>;
            floatingPointNumber?: boolean;
            int?: boolean;
            integralNumber?: boolean;
            /** Format: int32 */
            intValue?: number;
            long?: boolean;
            /** Format: int64 */
            longValue?: number;
            missingNode?: boolean;
            null?: boolean;
            number?: boolean;
            /** @enum {string} */
            numberType?: "INT" | "LONG" | "BIG_INTEGER" | "FLOAT" | "DOUBLE" | "BIG_DECIMAL";
            numberValue?: number;
            object?: boolean;
            pojo?: boolean;
            textual?: boolean;
            textValue?: string;
            valueAsBoolean?: boolean;
            /** Format: double */
            valueAsDouble?: number;
            /** Format: int32 */
            valueAsInt?: number;
            /** Format: int64 */
            valueAsLong?: number;
            valueAsText?: string;
            valueNode?: boolean;
        };
        /** @description The schema of a field. */
        JsonTypeBean: {
            /** @description If the field is a custom field, the configuration of the field. */
            readonly configuration?: {
                [key: string]: unknown;
            };
            /** @description If the field is a custom field, the URI of the field. */
            readonly custom?: string;
            /**
             * Format: int64
             * @description If the field is a custom field, the custom ID of the field.
             */
            readonly customId?: number;
            /** @description When the data type is an array, the name of the field items within the array. */
            readonly items?: string;
            /** @description If the field is a system field, the name of the field. */
            readonly system?: string;
            /** @description The data type of the field. */
            readonly type: string;
        };
        /** @description An operand that is a JQL keyword. See [Advanced searching - keywords reference](https://confluence.atlassian.com/jiracorecloud/advanced-searching-keywords-reference-765593717.html#Advancedsearching-keywordsreference-EMPTYEMPTY) for more information about operand keywords. */
        KeywordOperand: {
            /**
             * @description The keyword that is the operand value.
             * @enum {string}
             */
            keyword: "empty";
        };
        LegacyJackson1ListAttachment: components["schemas"]["Attachment"][];
        LegacyJackson1ListColumnItem: components["schemas"]["ColumnItem"][];
        LegacyJackson1ListIssueEvent: components["schemas"]["IssueEvent"][];
        LegacyJackson1ListIssueTypeWithStatus: components["schemas"]["IssueTypeWithStatus"][];
        LegacyJackson1ListProject: components["schemas"]["Project"][];
        LegacyJackson1ListProjectComponent: components["schemas"]["ProjectComponent"][];
        LegacyJackson1ListProjectRoleDetails: components["schemas"]["ProjectRoleDetails"][];
        LegacyJackson1ListProjectType: components["schemas"]["ProjectType"][];
        LegacyJackson1ListUserMigrationBean: components["schemas"]["UserMigrationBean"][];
        LegacyJackson1ListVersion: components["schemas"]["Version"][];
        LegacyJackson1ListWorklog: components["schemas"]["Worklog"][];
        /** @description Details about a license for the Jira instance. */
        License: {
            /** @description The applications under this license. */
            readonly applications: components["schemas"]["LicensedApplication"][];
        };
        /** @description Details about a licensed Jira application. */
        LicensedApplication: {
            /** @description The ID of the application. */
            readonly id: string;
            /**
             * @description The licensing plan.
             * @enum {string}
             */
            readonly plan: "UNLICENSED" | "FREE" | "PAID";
        };
        /** @description A metric that provides insight into the active licence details */
        LicenseMetric: {
            /** @description The key of a specific license metric. */
            key?: string;
            /** @description The calculated value of a licence metric linked to the key. An example licence metric is the approximate number of user accounts. */
            value?: string;
        };
        /** @description The ID or key of a linked issue. */
        LinkedIssue: {
            /** @description The fields associated with the issue. */
            readonly fields?: components["schemas"]["Fields"];
            /** @description The ID of an issue. Required if `key` isn't provided. */
            id?: string;
            /** @description The key of an issue. Required if `id` isn't provided. */
            key?: string;
            /**
             * Format: uri
             * @description The URL of the issue.
             */
            readonly self?: string;
        };
        /** @description Details a link group, which defines issue operations. */
        LinkGroup: {
            groups?: components["schemas"]["LinkGroup"][];
            header?: components["schemas"]["SimpleLink"];
            id?: string;
            links?: components["schemas"]["SimpleLink"][];
            styleClass?: string;
            /** Format: int32 */
            weight?: number;
        };
        LinkIssueRequestJsonBean: {
            comment?: components["schemas"]["Comment"];
            inwardIssue: components["schemas"]["LinkedIssue"];
            outwardIssue: components["schemas"]["LinkedIssue"];
            type: components["schemas"]["IssueLinkType"];
        };
        /** @description An operand that is a list of values. */
        ListOperand: {
            /** @description Encoded operand, which can be used directly in a JQL query. */
            encodedOperand?: string;
            /** @description The list of operand values. */
            values: components["schemas"]["JqlQueryUnitaryOperand"][];
        };
        ListWrapperCallbackApplicationRole: Record<string, never>;
        ListWrapperCallbackGroupName: Record<string, never>;
        /** @description Details of a locale. */
        Locale: {
            /** @description The locale code. The Java the locale format is used: a two character language code (ISO 639), an underscore, and two letter country code (ISO 3166). For example, en\_US represents a locale of English (United States). Required on create. */
            locale?: string;
        };
        /** @description List of string of inputs */
        MandatoryFieldValue: {
            /**
             * @description If `true`, will try to retain original non-null issue field values on move.
             * @default true
             */
            retain: boolean;
            /**
             * @description Will treat as `MandatoryFieldValue` if type is `raw` or `empty`
             * @default raw
             * @enum {string|null}
             */
            type: "adf" | "raw";
            /** @description Value for each field. Provide a `list of strings` for non-ADF fields. */
            value: string[];
        };
        /** @description An object notation input */
        MandatoryFieldValueForADF: {
            /**
             * @description If `true`, will try to retain original non-null issue field values on move.
             * @default true
             */
            retain: boolean;
            /**
             * @description Will treat as `MandatoryFieldValueForADF` if type is `adf`
             * @default raw
             * @enum {string}
             */
            type: "adf" | "raw";
            /** @description Value for each field. Accepts Atlassian Document Format (ADF) for rich text fields like `description`, `environments`. For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure) */
            value: Record<string, never>;
        };
        /** @description Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`. */
        MappingsByIssueTypeOverride: {
            /** @description The ID of the issue type for this mapping. */
            issueTypeId: string;
            /** @description The list of status mappings. */
            statusMappings: components["schemas"]["WorkflowAssociationStatusMapping"][];
        };
        /** @description The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`. */
        MappingsByWorkflow: {
            /** @description The ID of the new workflow. */
            newWorkflowId: string;
            /** @description The ID of the old workflow. */
            oldWorkflowId: string;
            /** @description The list of status mappings. */
            statusMappings: components["schemas"]["WorkflowAssociationStatusMapping"][];
        };
        MoveFieldBean: {
            /**
             * Format: uri
             * @description The ID of the screen tab field after which to place the moved screen tab field. Required if `position` isn't provided.
             */
            after?: string;
            /**
             * @description The named position to which the screen tab field should be moved. Required if `after` isn't provided.
             * @enum {string}
             */
            position?: "Earlier" | "Later" | "First" | "Last";
        };
        /** @description A list of issues and their respective properties to set or update. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information. */
        MultiIssueEntityProperties: {
            /** @description A list of issue IDs and their respective properties. */
            issues?: components["schemas"]["IssueEntityPropertiesForMultiUpdate"][];
        };
        MultipartFile: {
            bytes?: string[];
            contentType?: string;
            empty?: boolean;
            inputStream?: Record<string, never>;
            name?: string;
            originalFilename?: string;
            resource?: components["schemas"]["Resource"];
            /** Format: int64 */
            size?: number;
        };
        /** @description A custom field and its new value with a list of issue to update. */
        MultipleCustomFieldValuesUpdate: {
            /** @description The ID or key of the custom field. For example, `customfield_10010`. */
            customField: string;
            /** @description The list of issue IDs. */
            issueIds: number[];
            /** @description The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
             *
             *      *  `string` the value must be a string.
             *      *  `number` the value must be a number.
             *      *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
             *      *  `user` the value must be an object that contains the `accountId` field.
             *      *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
             *
             *     A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types). */
            value: unknown;
        };
        /** @description List of updates for a custom fields. */
        MultipleCustomFieldValuesUpdateDetails: {
            updates?: components["schemas"]["MultipleCustomFieldValuesUpdate"][];
        };
        NestedResponse: {
            errorCollection?: components["schemas"]["ErrorCollection"];
            /** Format: int32 */
            status?: number;
            warningCollection?: components["schemas"]["WarningCollection"];
        };
        /** @description The user details. */
        NewUserDetails: {
            /** @description Deprecated, do not use. */
            applicationKeys?: string[];
            /** @description This property is no longer available. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account. */
            displayName?: string;
            /** @description The email address for the user. */
            emailAddress: string;
            /** @description This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            key?: string;
            /** @description This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            name?: string;
            /** @description This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account. */
            password?: string;
            /** @description Products the new user has access to. Valid products are: jira-core, jira-servicedesk, jira-product-discovery, jira-software. To create a user without product access, set this field to be an empty array. */
            products: string[];
            /** @description The URL of the user. */
            readonly self?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details about a notification. */
        Notification: {
            /** @description The HTML body of the email notification for the issue. */
            htmlBody?: string;
            /** @description Restricts the notifications to users with the specified permissions. */
            restrict?: components["schemas"]["NotificationRecipientsRestrictions"];
            /** @description The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary. */
            subject?: string;
            /** @description The plain text body of the email notification for the issue. */
            textBody?: string;
            /** @description The recipients of the email notification for the issue. */
            to?: components["schemas"]["NotificationRecipients"];
        } & {
            [key: string]: unknown;
        };
        /** @description Details about a notification event. */
        NotificationEvent: {
            /** @description The description of the event. */
            description?: string;
            /**
             * Format: int64
             * @description The ID of the event. The event can be a [Jira system event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or a [custom event](https://confluence.atlassian.com/x/AIlKLg).
             */
            id?: number;
            /** @description The name of the event. */
            name?: string;
            /** @description The template of the event. Only custom events configured by Jira administrators have template. */
            templateEvent?: components["schemas"]["NotificationEvent"];
        };
        /** @description Details of the users and groups to receive the notification. */
        NotificationRecipients: {
            /** @description Whether the notification should be sent to the issue's assignees. */
            assignee?: boolean;
            /** @description List of groupIds to receive the notification. */
            groupIds?: string[];
            /** @description List of groups to receive the notification. */
            groups?: components["schemas"]["GroupName"][];
            /** @description Whether the notification should be sent to the issue's reporter. */
            reporter?: boolean;
            /** @description List of users to receive the notification. */
            users?: components["schemas"]["UserDetails"][];
            /** @description Whether the notification should be sent to the issue's voters. */
            voters?: boolean;
            /** @description Whether the notification should be sent to the issue's watchers. */
            watchers?: boolean;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of the group membership or permissions needed to receive the notification. */
        NotificationRecipientsRestrictions: {
            /** @description List of groupId memberships required to receive the notification. */
            groupIds?: string[];
            /** @description List of group memberships required to receive the notification. */
            groups?: components["schemas"]["GroupName"][];
            /** @description List of permissions required to receive the notification. */
            permissions?: components["schemas"]["RestrictedPermission"][];
        };
        /** @description Details about a notification scheme. */
        NotificationScheme: {
            /** @description The description of the notification scheme. */
            description?: string;
            /** @description Expand options that include additional notification scheme details in the response. */
            expand?: string;
            /**
             * Format: int64
             * @description The ID of the notification scheme.
             */
            id?: number;
            /** @description The name of the notification scheme. */
            name?: string;
            /** @description The notification events and associated recipients. */
            notificationSchemeEvents?: components["schemas"]["NotificationSchemeEvent"][];
            /** @description The list of project IDs associated with the notification scheme. */
            projects?: number[];
            /** @description The scope of the notification scheme. */
            scope?: components["schemas"]["Scope"];
            self?: string;
        };
        NotificationSchemeAndProjectMappingJsonBean: {
            notificationSchemeId?: string;
            projectId?: string;
        };
        /** @description Details about a notification scheme event. */
        NotificationSchemeEvent: {
            event?: components["schemas"]["NotificationEvent"];
            notifications?: components["schemas"]["EventNotification"][];
        };
        /** @description Details of a notification scheme event. */
        NotificationSchemeEventDetails: {
            /** @description The ID of the event. */
            event: components["schemas"]["NotificationSchemeEventTypeId"];
            /** @description The list of notifications mapped to a specified event. */
            notifications: components["schemas"]["NotificationSchemeNotificationDetails"][];
        } & {
            [key: string]: unknown;
        };
        /** @description The ID of an event that is being mapped to notifications. */
        NotificationSchemeEventTypeId: {
            /** @description The ID of the notification scheme event. */
            id: string;
        } & {
            [key: string]: unknown;
        };
        /** @description The ID of a notification scheme. */
        NotificationSchemeId: {
            /** @description The ID of a notification scheme. */
            readonly id: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of a notification within a notification scheme. */
        NotificationSchemeNotificationDetails: {
            /** @description The notification type, e.g `CurrentAssignee`, `Group`, `EmailAddress`. */
            notificationType: string;
            /** @description The value corresponding to the specified notification type. */
            parameter?: string;
        } & {
            [key: string]: unknown;
        };
        OldToNewSecurityLevelMappingsBean: {
            /** @description The new issue security level ID. Providing null will clear the assigned old level from issues. */
            newLevelId: string;
            /** @description The old issue security level ID. Providing null will remap all issues without any assigned levels. */
            oldLevelId: string;
        };
        /** @example {
         *       "message": "An example message.",
         *       "statusCode": 200
         *     } */
        OperationMessage: {
            /** @description The human-readable message that describes the result. */
            message: string;
            /** @description The status code of the response. */
            statusCode: number;
        };
        /** @description Details of the operations that can be performed on the issue. */
        Operations: {
            /** @description Details of the link groups defining issue operations. */
            readonly linkGroups?: components["schemas"]["LinkGroup"][];
        } & {
            [key: string]: unknown;
        };
        /** @description An ordered list of custom field option IDs and information on where to move them. */
        OrderOfCustomFieldOptions: {
            /** @description The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided. */
            after?: string;
            /** @description A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both. */
            customFieldOptionIds: string[];
            /**
             * @description The position the custom field options should be moved to. Required if `after` isn't provided.
             * @enum {string}
             */
            position?: "First" | "Last";
        };
        /** @description An ordered list of issue type IDs and information about where to move them. */
        OrderOfIssueTypes: {
            /** @description The ID of the issue type to place the moved issue types after. Required if `position` isn't provided. */
            after?: string;
            /** @description A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move. */
            issueTypeIds: string[];
            /**
             * @description The position the issue types should be moved to. Required if `after` isn't provided.
             * @enum {string}
             */
            position?: "First" | "Last";
        };
        /** @description A page of items. */
        PageBean2ComponentJsonBean: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["ComponentJsonBean"][];
        };
        /** @description A page of items. */
        PageBean2JqlFunctionPrecomputationBean: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["JqlFunctionPrecomputationBean"][];
        };
        /** @description A page of items. */
        PageBeanBulkContextualConfiguration: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["BulkContextualConfiguration"][];
        };
        /** @description A page of items. */
        PageBeanChangelog: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["Changelog"][];
        };
        /** @description A page of items. */
        PageBeanComment: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["Comment"][];
        };
        /** @description A page of items. */
        PageBeanComponentWithIssueCount: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["ComponentWithIssueCount"][];
        };
        /** @description A page of items. */
        PageBeanContext: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["Context"][];
        };
        /** @description A page of items. */
        PageBeanContextForProjectAndIssueType: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["ContextForProjectAndIssueType"][];
        };
        /** @description A page of items. */
        PageBeanContextualConfiguration: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["ContextualConfiguration"][];
        };
        /** @description A page of items. */
        PageBeanCustomFieldContext: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["CustomFieldContext"][];
        };
        /** @description A page of items. */
        PageBeanCustomFieldContextDefaultValue: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["CustomFieldContextDefaultValue"][];
        };
        /** @description A page of items. */
        PageBeanCustomFieldContextOption: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["CustomFieldContextOption"][];
        };
        /** @description A page of items. */
        PageBeanCustomFieldContextProjectMapping: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["CustomFieldContextProjectMapping"][];
        };
        /** @description A page of items. */
        PageBeanDashboard: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["Dashboard"][];
        };
        /** @description A page of items. */
        PageBeanField: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["Field"][];
        };
        /** @description A page of items. */
        PageBeanFieldConfigurationDetails: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["FieldConfigurationDetails"][];
        };
        /** @description A page of items. */
        PageBeanFieldConfigurationIssueTypeItem: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["FieldConfigurationIssueTypeItem"][];
        };
        /** @description A page of items. */
        PageBeanFieldConfigurationItem: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["FieldConfigurationItem"][];
        };
        /** @description A page of items. */
        PageBeanFieldConfigurationScheme: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["FieldConfigurationScheme"][];
        };
        /** @description A page of items. */
        PageBeanFieldConfigurationSchemeProjects: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["FieldConfigurationSchemeProjects"][];
        };
        /** @description A page of items. */
        PageBeanFilterDetails: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["FilterDetails"][];
        };
        /** @description A page of items. */
        PageBeanGroupDetails: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["GroupDetails"][];
        };
        /** @description A page of items. */
        PageBeanIssueFieldOption: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["IssueFieldOption"][];
        };
        /** @description A page of items. */
        PageBeanIssueSecurityLevelMember: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["IssueSecurityLevelMember"][];
        };
        /** @description A page of items. */
        PageBeanIssueSecuritySchemeToProjectMapping: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["IssueSecuritySchemeToProjectMapping"][];
        };
        /** @description A page of items. */
        PageBeanIssueTypeScheme: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["IssueTypeScheme"][];
        };
        /** @description A page of items. */
        PageBeanIssueTypeSchemeMapping: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["IssueTypeSchemeMapping"][];
        };
        /** @description A page of items. */
        PageBeanIssueTypeSchemeProjects: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["IssueTypeSchemeProjects"][];
        };
        /** @description A page of items. */
        PageBeanIssueTypeScreenScheme: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["IssueTypeScreenScheme"][];
        };
        /** @description A page of items. */
        PageBeanIssueTypeScreenSchemeItem: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["IssueTypeScreenSchemeItem"][];
        };
        /** @description A page of items. */
        PageBeanIssueTypeScreenSchemesProjects: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["IssueTypeScreenSchemesProjects"][];
        };
        /** @description A page of items. */
        PageBeanIssueTypeToContextMapping: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["IssueTypeToContextMapping"][];
        };
        /** @description A page of items. */
        PageBeanNotificationScheme: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["NotificationScheme"][];
        };
        /** @description A page of items. */
        PageBeanNotificationSchemeAndProjectMappingJsonBean: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["NotificationSchemeAndProjectMappingJsonBean"][];
        };
        /** @description A page of items. */
        PageBeanPriority: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["Priority"][];
        };
        /** @description A page of items. */
        PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["PrioritySchemeWithPaginatedPrioritiesAndProjects"][];
        };
        /** @description A page of items. */
        PageBeanPriorityWithSequence: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["PriorityWithSequence"][];
        };
        /** @description A page of items. */
        PageBeanProject: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["Project"][];
        };
        /** @description A page of items. */
        PageBeanProjectDetails: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["ProjectDetails"][];
        };
        /** @description A page of items. */
        PageBeanResolutionJsonBean: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["ResolutionJsonBean"][];
        };
        /** @description A page of items. */
        PageBeanScreen: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["Screen"][];
        };
        /** @description A page of items. */
        PageBeanScreenScheme: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["ScreenScheme"][];
        };
        /** @description A page of items. */
        PageBeanScreenWithTab: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["ScreenWithTab"][];
        };
        /** @description A page of items. */
        PageBeanSecurityLevel: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["SecurityLevel"][];
        };
        /** @description A page of items. */
        PageBeanSecurityLevelMember: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["SecurityLevelMember"][];
        };
        /** @description A page of items. */
        PageBeanSecuritySchemeWithProjects: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["SecuritySchemeWithProjects"][];
        };
        /** @description A page of items. */
        PageBeanString: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: string[];
        };
        /** @description A page of items. */
        PageBeanUiModificationDetails: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["UiModificationDetails"][];
        };
        /** @description A page of items. */
        PageBeanUser: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["User"][];
        };
        /** @description A page of items. */
        PageBeanUserDetails: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["UserDetails"][];
        };
        /** @description A page of items. */
        PageBeanUserKey: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["UserKey"][];
        };
        /** @description A page of items. */
        PageBeanVersion: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["Version"][];
        };
        /** @description A page of items. */
        PageBeanWebhook: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["Webhook"][];
        };
        /** @description A page of items. */
        PageBeanWorkflow: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["Workflow"][];
        };
        /** @description A page of items. */
        PageBeanWorkflowScheme: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["WorkflowScheme"][];
        };
        /** @description A page of items. */
        PageBeanWorkflowTransitionRules: {
            /** @description Whether this is the last page. */
            readonly isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: uri
             * @description If there is another page of results, the URL of the next page.
             */
            readonly nextPage?: string;
            /**
             * Format: uri
             * @description The URL of the page.
             */
            readonly self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
            /** @description The list of items. */
            readonly values?: components["schemas"]["WorkflowTransitionRules"][];
        };
        /** @description A paged list. To access additional details append `[start-index:end-index]` to the expand request. For example, `?expand=sharedUsers[10:40]` returns a list starting at item 10 and finishing at item 40. */
        PagedListUserDetailsApplicationUser: {
            /**
             * Format: int32
             * @description The index of the last item returned on the page.
             */
            readonly "end-index"?: number;
            /** @description The list of items. */
            readonly items?: components["schemas"]["UserDetails"][];
            /**
             * Format: int32
             * @description The maximum number of results that could be on the page.
             */
            readonly "max-results"?: number;
            /**
             * Format: int32
             * @description The number of items on the page.
             */
            readonly size?: number;
            /**
             * Format: int32
             * @description The index of the first item returned on the page.
             */
            readonly "start-index"?: number;
        };
        /** @description A page of changelogs. */
        PageOfChangelogs: {
            /** @description The list of changelogs. */
            readonly histories?: components["schemas"]["Changelog"][];
            /**
             * Format: int32
             * @description The maximum number of results that could be on the page.
             */
            readonly maxResults?: number;
            /**
             * Format: int32
             * @description The index of the first item returned on the page.
             */
            readonly startAt?: number;
            /**
             * Format: int32
             * @description The number of results on the page.
             */
            readonly total?: number;
        };
        /** @description A page of comments. */
        PageOfComments: {
            /** @description The list of comments. */
            readonly comments?: components["schemas"]["Comment"][];
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            readonly maxResults?: number;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The number of items returned.
             */
            readonly total?: number;
        } & {
            [key: string]: unknown;
        };
        /** @description A page of CreateMetaIssueTypes. */
        PageOfCreateMetaIssueTypes: {
            createMetaIssueType?: components["schemas"]["IssueTypeIssueCreateMetadata"][];
            /** @description The list of CreateMetaIssueType. */
            readonly issueTypes?: components["schemas"]["IssueTypeIssueCreateMetadata"][];
            /**
             * Format: int32
             * @description The maximum number of items to return per page.
             */
            readonly maxResults?: number;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The total number of items in all pages.
             */
            readonly total?: number;
        } & {
            [key: string]: unknown;
        };
        /** @description A page of CreateMetaIssueType with Field. */
        PageOfCreateMetaIssueTypeWithField: {
            /** @description The collection of FieldCreateMetaBeans. */
            readonly fields?: components["schemas"]["FieldCreateMetadata"][];
            /**
             * Format: int32
             * @description The maximum number of items to return per page.
             */
            readonly maxResults?: number;
            results?: components["schemas"]["FieldCreateMetadata"][];
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            readonly startAt?: number;
            /**
             * Format: int64
             * @description The total number of items in all pages.
             */
            readonly total?: number;
        } & {
            [key: string]: unknown;
        };
        /** @description A page containing dashboard details. */
        PageOfDashboards: {
            /** @description List of dashboards. */
            readonly dashboards?: components["schemas"]["Dashboard"][];
            /**
             * Format: int32
             * @description The maximum number of results that could be on the page.
             */
            readonly maxResults?: number;
            /** @description The URL of the next page of results, if any. */
            readonly next?: string;
            /** @description The URL of the previous page of results, if any. */
            readonly prev?: string;
            /**
             * Format: int32
             * @description The index of the first item returned on the page.
             */
            readonly startAt?: number;
            /**
             * Format: int32
             * @description The number of results on the page.
             */
            readonly total?: number;
        };
        PageOfStatuses: {
            /** @description Whether this is the last page. */
            isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            maxResults?: number;
            /** @description The URL of the next page of results, if any. */
            nextPage?: string;
            /** @description The URL of this page. */
            self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned on the page.
             */
            startAt?: number;
            /**
             * Format: int64
             * @description Number of items that satisfy the search.
             */
            total?: number;
            /** @description The list of items. */
            values?: components["schemas"]["JiraStatus"][];
        };
        /** @description Paginated list of worklog details */
        PageOfWorklogs: {
            /**
             * Format: int32
             * @description The maximum number of results that could be on the page.
             */
            readonly maxResults?: number;
            /**
             * Format: int32
             * @description The index of the first item returned on the page.
             */
            readonly startAt?: number;
            /**
             * Format: int32
             * @description The number of results on the page.
             */
            readonly total?: number;
            /** @description List of worklogs. */
            readonly worklogs?: components["schemas"]["Worklog"][];
        } & {
            [key: string]: unknown;
        };
        PageWithCursorGetPlanResponseForPage: {
            cursor?: string;
            last?: boolean;
            nextPageCursor?: string;
            /** Format: int32 */
            size?: number;
            /** Format: int64 */
            total?: number;
            values?: components["schemas"]["GetPlanResponseForPage"][];
        };
        PageWithCursorGetTeamResponseForPage: {
            cursor?: string;
            last?: boolean;
            nextPageCursor?: string;
            /** Format: int32 */
            size?: number;
            /** Format: int64 */
            total?: number;
            values?: components["schemas"]["GetTeamResponseForPage"][];
        };
        PaginatedResponseComment: {
            /** Format: int32 */
            maxResults?: number;
            results?: components["schemas"]["Comment"][];
            /** Format: int64 */
            startAt?: number;
            /** Format: int64 */
            total?: number;
        };
        PaginatedResponseFieldCreateMetadata: {
            /** Format: int32 */
            maxResults?: number;
            results?: components["schemas"]["FieldCreateMetadata"][];
            /** Format: int64 */
            startAt?: number;
            /** Format: int64 */
            total?: number;
        };
        PaginatedResponseIssueTypeIssueCreateMetadata: {
            /** Format: int32 */
            maxResults?: number;
            results?: components["schemas"]["IssueTypeIssueCreateMetadata"][];
            /** Format: int64 */
            startAt?: number;
            /** Format: int64 */
            total?: number;
        };
        /** @description A list of parsed JQL queries. */
        ParsedJqlQueries: {
            /** @description A list of parsed JQL queries. */
            queries: components["schemas"]["ParsedJqlQuery"][];
        };
        /** @description Details of a parsed JQL query. */
        ParsedJqlQuery: {
            /** @description The list of syntax or validation errors. */
            errors?: string[];
            /** @description The JQL query that was parsed and validated. */
            query: string;
            /** @description The syntax tree of the query. Empty if the query was invalid. */
            structure?: components["schemas"]["JqlQuery"];
        };
        /** @description Details for permissions of shareable entities */
        PermissionDetails: {
            /** @description The edit permissions for the shareable entities. */
            editPermissions: components["schemas"]["SharePermission"][];
            /** @description The share permissions for the shareable entities. */
            sharePermissions: components["schemas"]["SharePermission"][];
        };
        /** @description Details about a permission granted to a user or group. */
        PermissionGrant: {
            /** @description The user or group being granted the permission. It consists of a `type`, a type-dependent `parameter` and a type-dependent `value`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information. */
            holder?: components["schemas"]["PermissionHolder"];
            /**
             * Format: int64
             * @description The ID of the permission granted details.
             */
            readonly id?: number;
            /** @description The permission to grant. This permission can be one of the built-in permissions or a custom permission added by an app. See [Built-in permissions](../api-group-permission-schemes/#built-in-permissions) in *Get all permission schemes* for more information about the built-in permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information about custom permissions. */
            permission?: string;
            /**
             * Format: uri
             * @description The URL of the permission granted details.
             */
            readonly self?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description List of permission grants. */
        PermissionGrants: {
            /** @description Expand options that include additional permission grant details in the response. */
            readonly expand?: string;
            /** @description Permission grants list. */
            readonly permissions?: components["schemas"]["PermissionGrant"][];
        };
        /** @description Details of a user, group, field, or project role that holds a permission. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information. */
        PermissionHolder: {
            /** @description Expand options that include additional permission holder details in the response. */
            readonly expand?: string;
            /** @description As a group's name can change, use of `value` is recommended. The identifier associated withthe `type` value that defines the holder of the permission. */
            parameter?: string;
            /** @description The type of permission holder. */
            type: string;
            /** @description The identifier associated with the `type` value that defines the holder of the permission. */
            value?: string;
        };
        /** @description Details about permissions. */
        Permissions: {
            /** @description List of permissions. */
            readonly permissions?: {
                [key: string]: components["schemas"]["UserPermission"];
            };
        };
        /** @description Details of a permission scheme. */
        PermissionScheme: {
            /** @description A description for the permission scheme. */
            description?: string;
            /** @description The expand options available for the permission scheme. */
            readonly expand?: string;
            /**
             * Format: int64
             * @description The ID of the permission scheme.
             */
            readonly id?: number;
            /** @description The name of the permission scheme. Must be unique. */
            name: string;
            /** @description The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information. */
            permissions?: components["schemas"]["PermissionGrant"][];
            /** @description The scope of the permission scheme. */
            scope?: components["schemas"]["Scope"];
            /**
             * Format: uri
             * @description The URL of the permission scheme.
             */
            readonly self?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description List of all permission schemes. */
        PermissionSchemes: {
            /** @description Permission schemes list. */
            readonly permissionSchemes?: components["schemas"]["PermissionScheme"][];
        };
        PermissionsKeysBean: {
            /** @description A list of permission keys. */
            permissions: string[];
        };
        /** @description A list of projects in which a user is granted permissions. */
        PermittedProjects: {
            /** @description A list of projects. */
            readonly projects?: components["schemas"]["ProjectIdentifierBean"][];
        };
        /** @description An issue priority. */
        Priority: {
            /**
             * Format: int64
             * @description The avatarId of the avatar for the issue priority. This parameter is nullable and when set, this avatar references the universal avatar APIs.
             */
            avatarId?: number;
            /** @description The description of the issue priority. */
            description?: string;
            /** @description The URL of the icon for the issue priority. */
            iconUrl?: string;
            /** @description The ID of the issue priority. */
            id?: string;
            /** @description Whether this priority is the default. */
            isDefault?: boolean;
            /** @description The name of the issue priority. */
            name?: string;
            /** @description Priority schemes associated with the issue priority. */
            schemes?: components["schemas"]["ExpandPrioritySchemePage"];
            /** @description The URL of the issue priority. */
            self?: string;
            /** @description The color used to indicate the issue priority. */
            statusColor?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description The ID of an issue priority. */
        PriorityId: {
            /** @description The ID of the issue priority. */
            readonly id: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Mapping of issue priorities for changes in priority schemes. */
        PriorityMapping: {
            /** @description The mapping of priorities for issues being migrated **into** this priority scheme. Key is the old priority ID, value is the new priority ID (must exist in this priority scheme).
             *
             *     E.g. The current priority scheme has priority ID `10001`. Issues with priority ID `10000` are being migrated into this priority scheme will need mapping to new priorities. The `in` mapping would be `{"10000": 10001}`. */
            in?: {
                [key: string]: number;
            };
            /** @description The mapping of priorities for issues being migrated **out of** this priority scheme. Key is the old priority ID (must exist in this priority scheme), value is the new priority ID (must exist in the default priority scheme). Required for updating an existing priority scheme. Not used when creating a new priority scheme.
             *
             *     E.g. The current priority scheme has priority ID `10001`. Issues with priority ID `10001` are being migrated out of this priority scheme will need mapping to new priorities. The `out` mapping would be `{"10001": 10000}`. */
            out?: {
                [key: string]: number;
            };
        };
        PrioritySchemeChangesWithoutMappings: {
            /** @description Affected entity ids. */
            ids: number[];
        };
        /** @description The ID of a priority scheme. */
        PrioritySchemeId: {
            /** @description The ID of the priority scheme. */
            readonly id?: string;
            /** @description The in-progress issue migration task. */
            readonly task?: components["schemas"]["TaskProgressBeanJsonNode"];
        };
        /** @description A priority scheme with paginated priorities and projects. */
        PrioritySchemeWithPaginatedPrioritiesAndProjects: {
            default?: boolean;
            /** @description The ID of the default issue priority. */
            defaultPriorityId?: string;
            /** @description The description of the priority scheme */
            description?: string;
            /** @description The ID of the priority scheme. */
            id: string;
            isDefault?: boolean;
            /** @description The name of the priority scheme */
            name: string;
            /** @description The paginated list of priorities. */
            priorities?: components["schemas"]["PageBeanPriorityWithSequence"];
            /** @description The paginated list of projects. */
            projects?: components["schemas"]["PageBeanProjectDetails"];
            /** @description The URL of the priority scheme. */
            self?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description An issue priority with sequence information. */
        PriorityWithSequence: {
            /** @description The description of the issue priority. */
            description?: string;
            /** @description The URL of the icon for the issue priority. */
            iconUrl?: string;
            /** @description The ID of the issue priority. */
            id?: string;
            /** @description Whether this priority is the default. */
            isDefault?: boolean;
            /** @description The name of the issue priority. */
            name?: string;
            /** @description The URL of the issue priority. */
            self?: string;
            /** @description The sequence of the issue priority. */
            sequence?: string;
            /** @description The color used to indicate the issue priority. */
            statusColor?: string;
        };
        /** @description Details about a project. */
        Project: {
            /** @description Whether the project is archived. */
            readonly archived?: boolean;
            /** @description The user who archived the project. */
            readonly archivedBy?: components["schemas"]["User"];
            /**
             * Format: date-time
             * @description The date when the project was archived.
             */
            readonly archivedDate?: string;
            /**
             * @description The default assignee when creating issues for this project.
             * @enum {string}
             */
            readonly assigneeType?: "PROJECT_LEAD" | "UNASSIGNED";
            /** @description The URLs of the project's avatars. */
            readonly avatarUrls?: components["schemas"]["AvatarUrlsBean"];
            /** @description List of the components contained in the project. */
            readonly components?: components["schemas"]["ProjectComponent"][];
            /** @description Whether the project is marked as deleted. */
            readonly deleted?: boolean;
            /** @description The user who marked the project as deleted. */
            readonly deletedBy?: components["schemas"]["User"];
            /**
             * Format: date-time
             * @description The date when the project was marked as deleted.
             */
            readonly deletedDate?: string;
            /** @description A brief description of the project. */
            readonly description?: string;
            /** @description An email address associated with the project. */
            email?: string;
            /** @description Expand options that include additional project details in the response. */
            readonly expand?: string;
            /** @description Whether the project is selected as a favorite. */
            favourite?: boolean;
            /** @description The ID of the project. */
            id?: string;
            /** @description Insights about the project. */
            readonly insight?: components["schemas"]["ProjectInsight"];
            /** @description Whether the project is private from the user's perspective. This means the user can't see the project or any associated issues. */
            readonly isPrivate?: boolean;
            /** @description The issue type hierarchy for the project. */
            readonly issueTypeHierarchy?: components["schemas"]["Hierarchy"];
            /** @description List of the issue types available in the project. */
            readonly issueTypes?: components["schemas"]["IssueTypeDetails"][];
            /** @description The key of the project. */
            readonly key?: string;
            /** @description The project landing page info. */
            readonly landingPageInfo?: components["schemas"]["ProjectLandingPageInfo"];
            /** @description The username of the project lead. */
            readonly lead?: components["schemas"]["User"];
            /** @description The name of the project. */
            readonly name?: string;
            /** @description User permissions on the project */
            readonly permissions?: components["schemas"]["ProjectPermissions"];
            /** @description The category the project belongs to. */
            readonly projectCategory?: components["schemas"]["ProjectCategory"];
            /**
             * @description The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
             * @enum {string}
             */
            readonly projectTypeKey?: "software" | "service_desk" | "business";
            /** @description Map of project properties */
            readonly properties?: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @description The date when the project is deleted permanently.
             */
            readonly retentionTillDate?: string;
            /** @description The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post). */
            readonly roles?: {
                [key: string]: string;
            };
            /**
             * Format: uri
             * @description The URL of the project details.
             */
            readonly self?: string;
            /** @description Whether the project is simplified. */
            readonly simplified?: boolean;
            /**
             * @description The type of the project.
             * @enum {string}
             */
            readonly style?: "classic" | "next-gen";
            /** @description A link to information about this project, such as project documentation. */
            readonly url?: string;
            /**
             * Format: uuid
             * @description Unique ID for next-gen projects.
             */
            readonly uuid?: string;
            /** @description The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post). */
            readonly versions?: components["schemas"]["Version"][];
        };
        /** @description A project and issueType ID pair that identifies a status mapping. */
        ProjectAndIssueTypePair: {
            /** @description The ID of the issue type. */
            issueTypeId: string;
            /** @description The ID of the project. */
            projectId: string;
        };
        /** @description List of project avatars. */
        ProjectAvatars: {
            /** @description List of avatars added to Jira. These avatars may be deleted. */
            readonly custom?: components["schemas"]["Avatar"][];
            /** @description List of avatars included with Jira. These avatars cannot be deleted. */
            readonly system?: components["schemas"]["Avatar"][];
        };
        /** @description A project category. */
        ProjectCategory: {
            /** @description The description of the project category. */
            description?: string;
            /** @description The ID of the project category. */
            readonly id?: string;
            /** @description The name of the project category. Required on create, optional on update. */
            name?: string;
            /**
             * Format: uri
             * @description The URL of the project category.
             */
            readonly self?: string;
        };
        /** @description Details about a project component. */
        ProjectComponent: {
            /** @description Compass component's ID. Can't be updated. Not required for creating a Project Component. */
            readonly ari?: string;
            /** @description The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component. */
            readonly assignee?: components["schemas"]["User"];
            /**
             * @description The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:
             *
             *      *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
             *      *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
             *      *  `UNASSIGNED` an assignee is not set for issues created with this component.
             *      *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
             *
             *     Default value: `PROJECT_DEFAULT`.
             *     Optional when creating or updating a component.
             * @enum {string}
             */
            assigneeType?: "PROJECT_DEFAULT" | "COMPONENT_LEAD" | "PROJECT_LEAD" | "UNASSIGNED";
            /** @description The description for the component. Optional when creating or updating a component. */
            description?: string;
            /** @description The unique identifier for the component. */
            readonly id?: string;
            /** @description Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned. */
            readonly isAssigneeTypeValid?: boolean;
            /** @description The user details for the component's lead user. */
            readonly lead?: components["schemas"]["User"];
            /** @description The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
            leadAccountId?: string;
            /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            leadUserName?: string;
            /** @description Compass component's metadata. Can't be updated. Not required for creating a Project Component. */
            readonly metadata?: {
                [key: string]: string;
            };
            /** @description The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters. */
            name?: string;
            /** @description The key of the project the component is assigned to. Required when creating a component. Can't be updated. */
            project?: string;
            /**
             * Format: int64
             * @description The ID of the project the component is assigned to.
             */
            readonly projectId?: number;
            /** @description The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee. */
            readonly realAssignee?: components["schemas"]["User"];
            /**
             * @description The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
             *
             *      *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
             *      *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
             *      *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
             *      *  `PROJECT_DEFAULT` when none of the preceding cases are true.
             * @enum {string}
             */
            readonly realAssigneeType?: "PROJECT_DEFAULT" | "COMPONENT_LEAD" | "PROJECT_LEAD" | "UNASSIGNED";
            /**
             * Format: uri
             * @description The URL of the component.
             */
            readonly self?: string;
        };
        /** @description Details about data policies for a list of projects. */
        ProjectDataPolicies: {
            /** @description List of projects with data policies. */
            readonly projectDataPolicies?: components["schemas"]["ProjectWithDataPolicy"][];
        };
        /** @description Details about data policy. */
        ProjectDataPolicy: {
            /** @description Whether the project contains any content inaccessible to the requesting application. */
            readonly anyContentBlocked?: boolean;
        };
        /** @description Details about a project. */
        ProjectDetails: {
            /** @description The URLs of the project's avatars. */
            readonly avatarUrls?: components["schemas"]["AvatarUrlsBean"];
            /** @description The ID of the project. */
            id?: string;
            /** @description The key of the project. */
            readonly key?: string;
            /** @description The name of the project. */
            readonly name?: string;
            /** @description The category the project belongs to. */
            readonly projectCategory?: components["schemas"]["UpdatedProjectCategory"];
            /**
             * @description The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
             * @enum {string}
             */
            readonly projectTypeKey?: "software" | "service_desk" | "business";
            /** @description The URL of the project details. */
            readonly self?: string;
            /** @description Whether or not the project is simplified. */
            readonly simplified?: boolean;
        };
        /** @description A project's sender email address. */
        ProjectEmailAddress: {
            /** @description The email address. */
            emailAddress?: string;
            /** @description When using a custom domain, the status of the email address. */
            emailAddressStatus?: string[];
        };
        /** @description Details of a project feature. */
        ProjectFeature: {
            /** @description The key of the feature. */
            feature?: string;
            /** @description URI for the image representing the feature. */
            imageUri?: string;
            /** @description Localized display description for the feature. */
            localisedDescription?: string;
            /** @description Localized display name for the feature. */
            localisedName?: string;
            /** @description List of keys of the features required to enable the feature. */
            prerequisites?: string[];
            /**
             * Format: int64
             * @description The ID of the project.
             */
            projectId?: number;
            /**
             * @description The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
             * @enum {string}
             */
            state?: "ENABLED" | "DISABLED" | "COMING_SOON";
            /** @description Whether the state of the feature can be updated. */
            toggleLocked?: boolean;
        };
        /** @description Details of the feature state. */
        ProjectFeatureState: {
            /**
             * @description The feature state.
             * @enum {string}
             */
            state?: "ENABLED" | "DISABLED" | "COMING_SOON";
        };
        /** @description Project ID details. */
        ProjectId: {
            /** @description The ID of the project. */
            id: string;
        } | null;
        /** @description The identifiers for a project. */
        ProjectIdentifierBean: {
            /**
             * Format: int64
             * @description The ID of the project.
             */
            readonly id?: number;
            /** @description The key of the project. */
            readonly key?: string;
        };
        /** @description Identifiers for a project. */
        ProjectIdentifiers: {
            /**
             * Format: int64
             * @description The ID of the created project.
             */
            readonly id: number;
            /** @description The key of the created project. */
            readonly key: string;
            /**
             * Format: uri
             * @description The URL of the created project.
             */
            readonly self: string;
        };
        /** @description A list of project IDs. */
        ProjectIds: {
            /** @description The IDs of projects. */
            projectIds: string[];
        };
        /** @description Additional details about a project. */
        ProjectInsight: {
            /**
             * Format: date-time
             * @description The last issue update time.
             */
            readonly lastIssueUpdateTime?: string;
            /**
             * Format: int64
             * @description Total issue count.
             */
            readonly totalIssueCount?: number;
        };
        /** @description Details of the issue creation metadata for a project. */
        ProjectIssueCreateMetadata: {
            /** @description List of the project's avatars, returning the avatar size and associated URL. */
            readonly avatarUrls?: components["schemas"]["AvatarUrlsBean"];
            /** @description Expand options that include additional project issue create metadata details in the response. */
            readonly expand?: string;
            /** @description The ID of the project. */
            readonly id?: string;
            /** @description List of the issue types supported by the project. */
            readonly issuetypes?: components["schemas"]["IssueTypeIssueCreateMetadata"][];
            /** @description The key of the project. */
            readonly key?: string;
            /** @description The name of the project. */
            readonly name?: string;
            /** @description The URL of the project. */
            readonly self?: string;
        };
        /** @description List of issue level security items in a project. */
        ProjectIssueSecurityLevels: {
            /** @description Issue level security items list. */
            readonly levels: components["schemas"]["SecurityLevel"][];
        };
        /** @description The hierarchy of issue types within a project. */
        ProjectIssueTypeHierarchy: {
            /** @description Details of an issue type hierarchy level. */
            readonly hierarchy?: components["schemas"]["ProjectIssueTypesHierarchyLevel"][];
            /**
             * Format: int64
             * @description The ID of the project.
             */
            readonly projectId?: number;
        };
        /** @description The project and issue type mapping. */
        ProjectIssueTypeMapping: {
            /** @description The ID of the issue type. */
            issueTypeId: string;
            /** @description The ID of the project. */
            projectId: string;
        };
        /** @description The project and issue type mappings. */
        ProjectIssueTypeMappings: {
            /** @description The project and issue type mappings. */
            mappings: components["schemas"]["ProjectIssueTypeMapping"][];
        };
        /** @description Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the requested workflows. */
        ProjectIssueTypes: {
            /** @description IDs of the issue types */
            issueTypes?: (string | null)[] | null;
            project?: components["schemas"]["ProjectId"];
        };
        /** @description Details of an issue type hierarchy level. */
        ProjectIssueTypesHierarchyLevel: {
            /**
             * Format: uuid
             * @description The ID of the issue type hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
             */
            readonly entityId?: string;
            /** @description The list of issue types in the hierarchy level. */
            readonly issueTypes?: components["schemas"]["IssueTypeInfo"][];
            /**
             * Format: int32
             * @description The level of the issue type hierarchy level.
             */
            readonly level?: number;
            /** @description The name of the issue type hierarchy level. */
            readonly name?: string;
        };
        ProjectLandingPageInfo: {
            attributes?: {
                [key: string]: string;
            };
            /** Format: int64 */
            boardId?: number;
            boardName?: string;
            projectKey?: string;
            projectType?: string;
            queueCategory?: string;
            /** Format: int64 */
            queueId?: number;
            queueName?: string;
            simpleBoard?: boolean;
            simplified?: boolean;
            url?: string;
        };
        /** @description Permissions which a user has on a project. */
        ProjectPermissions: {
            /** @description Whether the logged user can edit the project. */
            readonly canEdit?: boolean;
        };
        /** @description Details about the roles in a project. */
        ProjectRole: {
            /** @description The list of users who act in this role. */
            readonly actors?: components["schemas"]["RoleActor"][];
            /** @description Whether this role is the admin role for the project. */
            readonly admin?: boolean;
            /** @description Whether the calling user is part of this role. */
            currentUserRole?: boolean;
            /** @description Whether this role is the default role for the project */
            readonly default?: boolean;
            /** @description The description of the project role. */
            readonly description?: string;
            /**
             * Format: int64
             * @description The ID of the project role.
             */
            readonly id?: number;
            /** @description The name of the project role. */
            name?: string;
            /** @description Whether the roles are configurable for this project. */
            readonly roleConfigurable?: boolean;
            /** @description The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO). */
            readonly scope?: components["schemas"]["Scope"];
            /**
             * Format: uri
             * @description The URL the project role details.
             */
            readonly self?: string;
            /** @description The translated name of the project role. */
            translatedName?: string;
        };
        ProjectRoleActorsUpdateBean: {
            /** @description The actors to add to the project role.
             *
             *     Add groups using:
             *
             *      *  `atlassian-group-role-actor` and a list of group names.
             *      *  `atlassian-group-role-actor-id` and a list of group IDs.
             *
             *     As a group's name can change, use of `atlassian-group-role-actor-id` is recommended. For example, `"atlassian-group-role-actor-id":["eef79f81-0b89-4fca-a736-4be531a10869","77f6ab39-e755-4570-a6ae-2d7a8df0bcb8"]`.
             *
             *     Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `"atlassian-user-role-actor":["12345678-9abc-def1-2345-6789abcdef12", "abcdef12-3456-789a-bcde-f123456789ab"]`. */
            categorisedActors?: {
                [key: string]: string[];
            };
            /**
             * Format: int64
             * @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
             */
            readonly id?: number;
        };
        /** @description Details about a project role. */
        ProjectRoleDetails: {
            /** @description Whether this role is the admin role for the project. */
            readonly admin?: boolean;
            /** @description Whether this role is the default role for the project. */
            readonly default?: boolean;
            /** @description The description of the project role. */
            readonly description?: string;
            /**
             * Format: int64
             * @description The ID of the project role.
             */
            readonly id?: number;
            /** @description The name of the project role. */
            name?: string;
            /** @description Whether the roles are configurable for this project. */
            readonly roleConfigurable?: boolean;
            /** @description The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO). */
            readonly scope?: components["schemas"]["Scope"];
            /**
             * Format: uri
             * @description The URL the project role details.
             */
            readonly self?: string;
            /** @description The translated name of the project role. */
            translatedName?: string;
        };
        /** @description Details of the group associated with the role. */
        ProjectRoleGroup: {
            /** @description The display name of the group. */
            displayName?: string;
            /** @description The ID of the group. */
            groupId?: string;
            /** @description The name of the group. As a group's name can change, use of `groupId` is recommended to identify the group. */
            name?: string;
        };
        /** @description Details of the user associated with the role. */
        ProjectRoleUser: {
            /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import. */
            readonly accountId?: string;
        };
        ProjectScopeBean: {
            /** @description Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default. */
            attributes?: ("notSelectable" | "defaultValue")[];
            /**
             * Format: int64
             * @description The ID of the project that the option's behavior applies to.
             */
            id?: number;
        };
        /** @description Details about a project type. */
        ProjectType: {
            /** @description The color of the project type. */
            readonly color?: string;
            /** @description The key of the project type's description. */
            readonly descriptionI18nKey?: string;
            /** @description The formatted key of the project type. */
            readonly formattedKey?: string;
            /** @description The icon of the project type. */
            readonly icon?: string;
            /** @description The key of the project type. */
            readonly key?: string;
        };
        /** @description Details about data policies for a project. */
        ProjectWithDataPolicy: {
            /** @description Data policy. */
            readonly dataPolicy?: components["schemas"]["ProjectDataPolicy"];
            /**
             * Format: int64
             * @description The project ID.
             */
            readonly id?: number;
        };
        /** @description Property key details. */
        PropertyKey: {
            /** @description The key of the property. */
            readonly key?: string;
            /** @description The URL of the property. */
            readonly self?: string;
        };
        /** @description List of property keys. */
        PropertyKeys: {
            /** @description Property key details. */
            readonly keys?: components["schemas"]["PropertyKey"][];
        };
        /** @description Details about the status mappings for publishing a draft workflow scheme. */
        PublishDraftWorkflowScheme: {
            /** @description Mappings of statuses to new statuses for issue types. */
            statusMappings?: components["schemas"]["StatusMapping"][];
        };
        /** @description Properties that identify a published workflow. */
        PublishedWorkflowId: {
            /** @description The entity ID of the workflow. */
            entityId?: string;
            /** @description The name of the workflow. */
            name: string;
        };
        /** @description ID of a registered webhook or error messages explaining why a webhook wasn't registered. */
        RegisteredWebhook: {
            /**
             * Format: int64
             * @description The ID of the webhook. Returned if the webhook is created.
             */
            createdWebhookId?: number;
            /** @description Error messages specifying why the webhook creation failed. */
            errors?: string[];
        };
        /** @description Details of an issue remote link. */
        RemoteIssueLink: {
            /** @description Details of the remote application the linked item is in. */
            application?: components["schemas"]["Application"];
            /** @description The global ID of the link, such as the ID of the item on the remote system. */
            globalId?: string;
            /**
             * Format: int64
             * @description The ID of the link.
             */
            id?: number;
            /** @description Details of the item linked to. */
            object?: components["schemas"]["RemoteObject"];
            /** @description Description of the relationship between the issue and the linked item. */
            relationship?: string;
            /**
             * Format: uri
             * @description The URL of the link.
             */
            self?: string;
        };
        /** @description Details of the identifiers for a created or updated remote issue link. */
        RemoteIssueLinkIdentifies: {
            /**
             * Format: int64
             * @description The ID of the remote issue link, such as the ID of the item on the remote system.
             */
            readonly id?: number;
            /** @description The URL of the remote issue link. */
            readonly self?: string;
        };
        /** @description Details of a remote issue link. */
        RemoteIssueLinkRequest: {
            /** @description Details of the remote application the linked item is in. For example, trello. */
            application?: components["schemas"]["Application"];
            /** @description An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&pageId=123`.
             *
             *     Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.
             *
             *     The maximum length is 255 characters. */
            globalId?: string;
            /** @description Details of the item linked to. */
            object: components["schemas"]["RemoteObject"];
            /** @description Description of the relationship between the issue and the linked item. If not set, the relationship description "links to" is used in Jira. */
            relationship?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description The linked item. */
        RemoteObject: {
            /** @description Details of the icon for the item. If no icon is defined, the default link icon is used in Jira. */
            icon?: components["schemas"]["Icon"];
            /** @description The status of the item. */
            status?: components["schemas"]["Status"];
            /** @description The summary details of the item. */
            summary?: string;
            /** @description The title of the item. */
            title: string;
            /** @description The URL of the item. */
            url: string;
        } & {
            [key: string]: unknown;
        };
        RemoveOptionFromIssuesResult: {
            /** @description A collection of errors related to unchanged issues. The collection size is limited, which means not all errors may be returned. */
            errors?: components["schemas"]["SimpleErrorCollection"];
            /** @description The IDs of the modified issues. */
            modifiedIssues?: number[];
            /** @description The IDs of the unchanged issues, those issues where errors prevent modification. */
            unmodifiedIssues?: number[];
        };
        /** @description Change the order of issue priorities. */
        ReorderIssuePriorities: {
            /** @description The ID of the priority. Required if `position` isn't provided. */
            after?: string;
            /** @description The list of issue IDs to be reordered. Cannot contain duplicates nor after ID. */
            ids: string[];
            /** @description The position for issue priorities to be moved to. Required if `after` isn't provided. */
            position?: string;
        };
        /** @description Change the order of issue resolutions. */
        ReorderIssueResolutionsRequest: {
            /** @description The ID of the resolution. Required if `position` isn't provided. */
            after?: string;
            /** @description The list of resolution IDs to be reordered. Cannot contain duplicates nor after ID. */
            ids: string[];
            /** @description The position for issue resolutions to be moved to. Required if `after` isn't provided. */
            position?: string;
        };
        /** @description The list of required status mappings by issue type. */
        RequiredMappingByIssueType: {
            /** @description The ID of the issue type. */
            issueTypeId?: string;
            /** @description The status IDs requiring mapping. */
            statusIds?: string[];
        };
        /** @description The list of required status mappings by workflow. */
        RequiredMappingByWorkflows: {
            /** @description The ID of the source workflow. */
            sourceWorkflowId?: string;
            /** @description The status IDs requiring mapping. */
            statusIds?: string[];
            /** @description The ID of the target workflow. */
            targetWorkflowId?: string;
        };
        /** @description Details of an issue resolution. */
        Resolution: {
            /** @description The description of the issue resolution. */
            description?: string;
            /** @description The ID of the issue resolution. */
            id?: string;
            /** @description The name of the issue resolution. */
            name?: string;
            /**
             * Format: uri
             * @description The URL of the issue resolution.
             */
            self?: string;
        };
        /** @description The ID of an issue resolution. */
        ResolutionId: {
            /** @description The ID of the issue resolution. */
            readonly id: string;
        } & {
            [key: string]: unknown;
        };
        ResolutionJsonBean: {
            default?: boolean;
            description?: string;
            iconUrl?: string;
            id?: string;
            name?: string;
            self?: string;
        };
        Resource: {
            description?: string;
            /** Format: binary */
            file?: string;
            filename?: string;
            inputStream?: Record<string, never>;
            open?: boolean;
            readable?: boolean;
            /** Format: uri */
            uri?: string;
            /** Format: url */
            url?: string;
        };
        /** @description Details of the permission. */
        RestrictedPermission: {
            /** @description The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. */
            id?: string;
            /** @description The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. */
            key?: string;
        } & {
            [key: string]: unknown;
        };
        RichText: {
            empty?: boolean;
            emptyAdf?: boolean;
            finalised?: boolean;
            valueSet?: boolean;
        };
        /** @description Details about a user assigned to a project role. */
        RoleActor: {
            readonly actorGroup?: components["schemas"]["ProjectRoleGroup"];
            readonly actorUser?: components["schemas"]["ProjectRoleUser"];
            /**
             * Format: uri
             * @description The avatar of the role actor.
             */
            readonly avatarUrl?: string;
            /** @description The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name. */
            readonly displayName?: string;
            /**
             * Format: int64
             * @description The ID of the role actor.
             */
            readonly id?: number;
            /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            readonly name?: string;
            /**
             * @description The type of role actor.
             * @enum {string}
             */
            readonly type?: "atlassian-group-role-actor" | "atlassian-user-role-actor";
        };
        /** @description A rule configuration. */
        RuleConfiguration: {
            /**
             * @description Whether the rule is disabled.
             * @default false
             */
            disabled: boolean;
            /** @description A tag used to filter rules in [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get). */
            tag?: string;
            /** @description Configuration of the rule, as it is stored by the Connect or the Forge app on the rule configuration page. */
            value: string;
        };
        /** @description The sanitized JQL queries for the given account IDs. */
        SanitizedJqlQueries: {
            /** @description The list of sanitized JQL queries. */
            queries?: components["schemas"]["SanitizedJqlQuery"][];
        };
        /** @description Details of the sanitized JQL query. */
        SanitizedJqlQuery: {
            /** @description The account ID of the user for whom sanitization was performed. */
            accountId?: string | null;
            /** @description The list of errors. */
            errors?: components["schemas"]["ErrorCollection"];
            /** @description The initial query. */
            initialQuery?: string;
            /** @description The sanitized query, if there were no errors. */
            sanitizedQuery?: string | null;
        };
        /** @description The projects the item is associated with. Indicated for items associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO). */
        Scope: {
            /** @description The project the item has scope in. */
            readonly project?: components["schemas"]["ProjectDetails"];
            /**
             * @description The type of scope.
             * @enum {string}
             */
            readonly type?: "PROJECT" | "TEMPLATE";
        } & {
            [key: string]: unknown;
        };
        /** @description A screen. */
        Screen: {
            /** @description The description of the screen. */
            readonly description?: string;
            /**
             * Format: int64
             * @description The ID of the screen.
             */
            readonly id?: number;
            /** @description The name of the screen. */
            readonly name?: string;
            /** @description The scope of the screen. */
            scope?: components["schemas"]["Scope"];
        };
        /** @description A screen tab field. */
        ScreenableField: {
            /** @description The ID of the screen tab field. */
            readonly id?: string;
            /** @description The name of the screen tab field. Required on create and update. The maximum length is 255 characters. */
            name?: string;
        };
        /** @description A screen tab. */
        ScreenableTab: {
            /**
             * Format: int64
             * @description The ID of the screen tab.
             */
            readonly id?: number;
            /** @description The name of the screen tab. The maximum length is 255 characters. */
            name: string;
        };
        /** @description Details of a screen. */
        ScreenDetails: {
            /** @description The description of the screen. The maximum length is 255 characters. */
            description?: string;
            /** @description The name of the screen. The name must be unique. The maximum length is 255 characters. */
            name: string;
        };
        /** @description A screen scheme. */
        ScreenScheme: {
            /** @description The description of the screen scheme. */
            description?: string;
            /**
             * Format: int64
             * @description The ID of the screen scheme.
             */
            id?: number;
            /** @description Details of the issue type screen schemes associated with the screen scheme. */
            issueTypeScreenSchemes?: components["schemas"]["PageBeanIssueTypeScreenScheme"];
            /** @description The name of the screen scheme. */
            name?: string;
            /** @description The IDs of the screens for the screen types of the screen scheme. */
            screens?: components["schemas"]["ScreenTypes"];
        };
        /** @description Details of a screen scheme. */
        ScreenSchemeDetails: {
            /** @description The description of the screen scheme. The maximum length is 255 characters. */
            description?: string;
            /** @description The name of the screen scheme. The name must be unique. The maximum length is 255 characters. */
            name: string;
            /** @description The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted. */
            screens: components["schemas"]["ScreenTypes"];
        };
        /** @description The ID of a screen scheme. */
        ScreenSchemeId: {
            /**
             * Format: int64
             * @description The ID of the screen scheme.
             */
            readonly id: number;
        };
        /** @description The IDs of the screens for the screen types of the screen scheme. */
        ScreenTypes: {
            /**
             * Format: int64
             * @description The ID of the create screen.
             */
            create?: number;
            /**
             * Format: int64
             * @description The ID of the default screen. Required when creating a screen scheme.
             */
            default: number;
            /**
             * Format: int64
             * @description The ID of the edit screen.
             */
            edit?: number;
            /**
             * Format: int64
             * @description The ID of the view screen.
             */
            view?: number;
        };
        /** @description A screen with tab details. */
        ScreenWithTab: {
            /** @description The description of the screen. */
            readonly description?: string;
            /**
             * Format: int64
             * @description The ID of the screen.
             */
            readonly id?: number;
            /** @description The name of the screen. */
            readonly name?: string;
            /** @description The scope of the screen. */
            scope?: components["schemas"]["Scope"];
            /** @description The tab for the screen. */
            tab?: components["schemas"]["ScreenableTab"];
        };
        SearchAndReconcileRequestBean: {
            /** @description Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a comma-delimited string of values. The expand options are:
             *
             *      *  `renderedFields` Returns field values rendered in HTML format.
             *      *  `names` Returns the display name of each field.
             *      *  `schema` Returns the schema describing a field type.
             *      *  `transitions` Returns all possible transitions for the issue.
             *      *  `operations` Returns all possible operations for the issue.
             *      *  `editmeta` Returns information about how each field can be edited.
             *      *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
             *      *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
             *
             *     Examples: `"names,changelog"` Returns the display name of each field as well as a list of recent updates to an issue. */
            expand?: string;
            /** @description A list of fields to return for each issue. Use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
             *
             *      *  `*all` Returns all fields.
             *      *  `*navigable` Returns navigable fields.
             *      *  `id` Returns only issue IDs.
             *      *  Any issue field, prefixed with a dash to exclude.
             *
             *     The default is `id`.
             *
             *     Examples:
             *
             *      *  `summary,comment` Returns the summary and comments fields only.
             *      *  `*all,-comment` Returns all fields except comments.
             *
             *     Multiple `fields` parameters can be included in a request.
             *
             *     Note: By default, this resource returns IDs only. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields. */
            fields?: string[];
            /** @description Reference fields by their key (rather than ID). The default is `false`. */
            fieldsByKeys?: boolean;
            /** @description A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. For performance reasons, this parameter requires a bounded query. A bounded query is a query with a search restriction.
             *
             *      *  Example of an unbounded query: `order by key desc`.
             *      *  Example of a bounded query: `assignee = currentUser() order by key`.
             *
             *     Additionally, `orderBy` clause can contain a maximum of 7 fields. */
            jql?: string;
            /**
             * Format: int32
             * @description The maximum number of items to return per page. To manage page size, API may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only. It returns max 5000 issues.
             * @default 50
             */
            maxResults: number;
            /** @description The token for a page to fetch that is not the first page. The first page has a `nextPageToken` of `null`. Use the `nextPageToken` to fetch the next page of issues. */
            nextPageToken?: string;
            /** @description A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list. */
            properties?: string[];
            /** @description Strong consistency issue ids to be reconciled with search results. Accepts max 50 ids. All issues must exist. */
            reconcileIssues?: number[];
        };
        /** @description The result of a JQL search with issues reconsilation. */
        SearchAndReconcileResults: {
            /** @description The list of issues found by the search or reconsiliation. */
            readonly issues?: components["schemas"]["IssueBean"][];
            /** @description The ID and name of each field in the search results. */
            readonly names?: {
                [key: string]: string;
            };
            /** @description Continuation token to fetch the next page. If this result represents the last or the only page this token will be null. This token will expire in 7 days. */
            readonly nextPageToken?: string;
            /** @description The schema describing the field types in the search results. */
            readonly schema?: {
                [key: string]: components["schemas"]["JsonTypeBean"];
            };
        };
        /** @description Details of how to filter and list search auto complete information. */
        SearchAutoCompleteFilter: {
            /**
             * @description Include collapsed fields for fields that have non-unique names.
             * @default false
             */
            includeCollapsedFields: boolean;
            /** @description List of project IDs used to filter the visible field details returned. */
            projectIds?: number[];
        };
        SearchRequestBean: {
            /** @description Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
             *
             *      *  `renderedFields` Returns field values rendered in HTML format.
             *      *  `names` Returns the display name of each field.
             *      *  `schema` Returns the schema describing a field type.
             *      *  `transitions` Returns all possible transitions for the issue.
             *      *  `operations` Returns all possible operations for the issue.
             *      *  `editmeta` Returns information about how each field can be edited.
             *      *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
             *      *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version. */
            expand?: string[];
            /** @description A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
             *
             *      *  `*all` Returns all fields.
             *      *  `*navigable` Returns navigable fields.
             *      *  Any issue field, prefixed with a minus to exclude.
             *
             *     The default is `*navigable`.
             *
             *     Examples:
             *
             *      *  `summary,comment` Returns the summary and comments fields only.
             *      *  `-description` Returns all navigable (default) fields except description.
             *      *  `*all,-comment` Returns all fields except comments.
             *
             *     Multiple `fields` parameters can be included in a request.
             *
             *     Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields. */
            fields?: string[];
            /** @description Reference fields by their key (rather than ID). The default is `false`. */
            fieldsByKeys?: boolean;
            /** @description A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. */
            jql?: string;
            /**
             * Format: int32
             * @description The maximum number of items to return per page.
             * @default 50
             */
            maxResults: number;
            /** @description A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list. */
            properties?: string[];
            /**
             * Format: int32
             * @description The index of the first item to return in the page of results (page offset). The base index is `0`.
             */
            startAt?: number;
            /**
             * @description Determines how to validate the JQL query and treat the validation results. Supported values:
             *
             *      *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
             *      *  `warn` Returns all errors as warnings.
             *      *  `none` No validation is performed.
             *      *  `true` *Deprecated* A legacy synonym for `strict`.
             *      *  `false` *Deprecated* A legacy synonym for `warn`.
             *
             *     The default is `strict`.
             *
             *     Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
             * @enum {string}
             */
            validateQuery?: "strict" | "warn" | "none" | "true" | "false";
        };
        /** @description The result of a JQL search. */
        SearchResults: {
            /** @description Expand options that include additional search result details in the response. */
            readonly expand?: string;
            /** @description The list of issues found by the search. */
            readonly issues?: components["schemas"]["IssueBean"][];
            /**
             * Format: int32
             * @description The maximum number of results that could be on the page.
             */
            readonly maxResults?: number;
            /** @description The ID and name of each field in the search results. */
            readonly names?: {
                [key: string]: string;
            };
            /** @description The schema describing the field types in the search results. */
            readonly schema?: {
                [key: string]: components["schemas"]["JsonTypeBean"];
            };
            /**
             * Format: int32
             * @description The index of the first item returned on the page.
             */
            readonly startAt?: number;
            /**
             * Format: int32
             * @description The number of results on the page.
             */
            readonly total?: number;
            /** @description Any warnings related to the JQL query. */
            readonly warningMessages?: string[];
        };
        /** @description Details of an issue level security item. */
        SecurityLevel: {
            /** @description The description of the issue level security item. */
            readonly description?: string;
            /** @description The ID of the issue level security item. */
            readonly id?: string;
            /** @description Whether the issue level security item is the default. */
            readonly isDefault?: boolean;
            /** @description The ID of the issue level security scheme. */
            readonly issueSecuritySchemeId?: string;
            /** @description The name of the issue level security item. */
            readonly name?: string;
            /** @description The URL of the issue level security item. */
            readonly self?: string;
        };
        /** @description Issue security level member. */
        SecurityLevelMember: {
            /** @description The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information. */
            readonly holder: components["schemas"]["PermissionHolder"];
            /** @description The ID of the issue security level member. */
            readonly id: string;
            /** @description The ID of the issue security level. */
            readonly issueSecurityLevelId: string;
            /** @description The ID of the issue security scheme. */
            readonly issueSecuritySchemeId: string;
            managed?: boolean;
        } & {
            [key: string]: unknown;
        };
        /** @description Details about a security scheme. */
        SecurityScheme: {
            /**
             * Format: int64
             * @description The ID of the default security level.
             */
            readonly defaultSecurityLevelId?: number;
            /** @description The description of the issue security scheme. */
            readonly description?: string;
            /**
             * Format: int64
             * @description The ID of the issue security scheme.
             */
            readonly id?: number;
            levels?: components["schemas"]["SecurityLevel"][];
            /** @description The name of the issue security scheme. */
            readonly name?: string;
            /** @description The URL of the issue security scheme. */
            readonly self?: string;
        };
        /** @description The ID of the issue security scheme. */
        SecuritySchemeId: {
            /** @description The ID of the issue security scheme. */
            readonly id: string;
        } & {
            [key: string]: unknown;
        };
        SecuritySchemeLevelBean: {
            /** @description The description of the issue security scheme level. */
            description?: string;
            /** @description Specifies whether the level is the default level. False by default. */
            isDefault?: boolean;
            /** @description The list of level members which should be added to the issue security scheme level. */
            members?: components["schemas"]["SecuritySchemeLevelMemberBean"][];
            /** @description The name of the issue security scheme level. Must be unique. */
            name: string;
        };
        SecuritySchemeLevelMemberBean: {
            /** @description The value corresponding to the specified member type. */
            parameter?: string;
            /** @description The issue security level member type, e.g `reporter`, `group`, `user`, `projectrole`, `applicationRole`. */
            type: string;
        };
        /** @description Details of issue security scheme level new members. */
        SecuritySchemeMembersRequest: {
            /** @description The list of level members which should be added to the issue security scheme level. */
            members?: components["schemas"]["SecuritySchemeLevelMemberBean"][];
        };
        /** @description List of security schemes. */
        SecuritySchemes: {
            /** @description List of security schemes. */
            readonly issueSecuritySchemes?: components["schemas"]["SecurityScheme"][];
        };
        /** @description Details about an issue security scheme. */
        SecuritySchemeWithProjects: {
            /**
             * Format: int64
             * @description The default level ID of the issue security scheme.
             */
            readonly defaultLevel?: number;
            /** @description The description of the issue security scheme. */
            readonly description?: string;
            /**
             * Format: int64
             * @description The ID of the issue security scheme.
             */
            readonly id: number;
            /** @description The name of the issue security scheme. */
            readonly name: string;
            /** @description The list of project IDs associated with the issue security scheme. */
            readonly projectIds?: number[];
            /** @description The URL of the issue security scheme. */
            readonly self: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details about the Jira instance. */
        ServerInformation: {
            /** @description The base URL of the Jira instance. */
            baseUrl?: string;
            /**
             * Format: date-time
             * @description The timestamp when the Jira version was built.
             */
            buildDate?: string;
            /**
             * Format: int32
             * @description The build number of the Jira version.
             */
            buildNumber?: number;
            /** @description The type of server deployment. This is always returned as *Cloud*. */
            deploymentType?: string;
            /** @description The display URL of the Jira instance. */
            displayUrl?: string;
            /** @description The display URL of Confluence. */
            displayUrlConfluence?: string;
            /** @description The display URL of the Servicedesk Help Center. */
            displayUrlServicedeskHelpCenter?: string;
            /** @description Jira instance health check results. Deprecated and no longer returned. */
            healthChecks?: components["schemas"]["HealthCheckResult"][];
            /** @description The unique identifier of the Jira version. */
            scmInfo?: string;
            /**
             * Format: date-time
             * @description The time in Jira when this request was responded to.
             */
            serverTime?: string;
            /** @description The default timezone of the Jira server. In a format known as Olson Time Zones, IANA Time Zones or TZ Database Time Zones. */
            serverTimeZone?: {
                displayName?: string;
                /** Format: int32 */
                dstsavings?: number;
                id?: string;
                /** Format: int32 */
                rawOffset?: number;
            };
            /** @description The name of the Jira instance. */
            serverTitle?: string;
            /** @description The version of Jira. */
            version?: string;
            /** @description The major, minor, and revision version numbers of the Jira version. */
            versionNumbers?: number[];
        };
        ServiceManagementNavigationInfo: {
            queueCategory?: string;
            /** Format: int64 */
            queueId?: number;
            queueName?: string;
        };
        ServiceRegistry: {
            /** @description service description */
            description?: string | null;
            /**
             * Format: uuid
             * @description service ID
             */
            id?: string;
            /** @description service name */
            name?: string;
            /** @description organization ID */
            organizationId?: string;
            /** @description service revision */
            revision?: string;
            serviceTier?: components["schemas"]["ServiceRegistryTier"];
        };
        ServiceRegistryTier: {
            /** @description tier description */
            description?: string | null;
            /**
             * Format: uuid
             * @description tier ID
             */
            id?: string;
            /** @description tier level */
            level?: number;
            /** @description tier name */
            name?: string | null;
            /**
             * @description name key of the tier
             * @example service-registry.tier1.name
             */
            nameKey?: string;
        };
        /** @description Details of new default levels. */
        SetDefaultLevelsRequest: {
            /** @description List of objects with issue security scheme ID and new default level ID. */
            defaultValues: components["schemas"]["DefaultLevelValue"][];
        } & {
            [key: string]: unknown;
        };
        /** @description The new default issue priority. */
        SetDefaultPriorityRequest: {
            /** @description The ID of the new default issue priority. Must be an existing ID or null. Setting this to null erases the default priority setting. */
            id: string;
        };
        /** @description The new default issue resolution. */
        SetDefaultResolutionRequest: {
            /** @description The ID of the new default issue resolution. Must be an existing ID or null. Setting this to null erases the default resolution setting. */
            id: string;
        };
        /** @description Details of a share permission for the filter. */
        SharePermission: {
            /** @description The group that the filter is shared with. For a request, specify the `groupId` or `name` property for the group. As a group's name can change, use of `groupId` is recommended. */
            group?: components["schemas"]["GroupName"];
            /**
             * Format: int64
             * @description The unique identifier of the share permission.
             */
            readonly id?: number;
            /** @description The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-3-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.
             *     For a request, specify the `id` for the project. */
            project?: components["schemas"]["Project"];
            /** @description The project role that the filter is shared with.
             *     For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in. */
            role?: components["schemas"]["ProjectRole"];
            /**
             * @description The type of share permission:
             *
             *      *  `user` Shared with a user.
             *      *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
             *      *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
             *      *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
             *      *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
             *      *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
             *      *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
             * @enum {string}
             */
            type: "user" | "group" | "project" | "projectRole" | "global" | "loggedin" | "authenticated" | "project-unknown";
            /** @description The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user. */
            user?: components["schemas"]["UserBean"];
        };
        SharePermissionInputBean: {
            /** @description The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user. */
            accountId?: string;
            /** @description The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`. */
            groupId?: string;
            /** @description The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`. */
            groupname?: string;
            /** @description The ID of the project to share the filter with. Set `type` to `project`. */
            projectId?: string;
            /** @description The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in. */
            projectRoleId?: string;
            /**
             * Format: int32
             * @description The rights for the share permission.
             */
            rights?: number;
            /**
             * @description The type of the share permission.Specify the type as follows:
             *
             *      *  `user` Share with a user.
             *      *  `group` Share with a group. Specify `groupname` as well.
             *      *  `project` Share with a project. Specify `projectId` as well.
             *      *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.
             *      *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
             *      *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
             * @enum {string}
             */
            type: "user" | "project" | "group" | "projectRole" | "global" | "authenticated";
        };
        SimpleApplicationPropertyBean: {
            /** @description The ID of the application property. */
            id?: string;
            /** @description The new value. */
            value?: string;
        };
        SimpleErrorCollection: {
            /** @description The list of error messages produced by this operation. For example, "input parameter 'key' must be provided" */
            errorMessages?: string[];
            /** @description The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters." */
            errors?: {
                [key: string]: string;
            };
            /** Format: int32 */
            httpStatusCode?: number;
        };
        /** @description Details about the operations available in this version. */
        SimpleLink: {
            href?: string;
            iconClass?: string;
            id?: string;
            label?: string;
            styleClass?: string;
            title?: string;
            /** Format: int32 */
            weight?: number;
        };
        SimpleListWrapperApplicationRole: {
            callback?: components["schemas"]["ListWrapperCallbackApplicationRole"];
            items?: components["schemas"]["ApplicationRole"][];
            /** Format: int32 */
            "max-results"?: number;
            pagingCallback?: components["schemas"]["ListWrapperCallbackApplicationRole"];
            /** Format: int32 */
            size?: number;
        };
        SimpleListWrapperGroupName: {
            callback?: components["schemas"]["ListWrapperCallbackGroupName"];
            items?: components["schemas"]["GroupName"][];
            /** Format: int32 */
            "max-results"?: number;
            pagingCallback?: components["schemas"]["ListWrapperCallbackGroupName"];
            /** Format: int32 */
            size?: number;
        };
        /** @description Represents a usage of an entity by a project ID and related issue type IDs. */
        SimpleUsage: {
            /** @description The issue type IDs for the usage. */
            issueTypeIds: string[];
            /** @description The project ID for the usage. */
            projectId: string;
        };
        SimplifiedHierarchyLevel: {
            /**
             * Format: int64
             * @description The ID of the level above this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
             */
            aboveLevelId?: number;
            /**
             * Format: int64
             * @description The ID of the level below this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
             */
            belowLevelId?: number;
            /**
             * Format: uuid
             * @description The external UUID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
             */
            externalUuid?: string;
            /** Format: int32 */
            hierarchyLevelNumber?: number;
            /**
             * Format: int64
             * @description The ID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
             */
            id?: number;
            /** @description The issue types available in this hierarchy level. */
            issueTypeIds?: number[];
            /**
             * Format: int32
             * @description The level of this item in the hierarchy.
             */
            level?: number;
            /** @description The name of this hierarchy level. */
            name?: string;
            /**
             * Format: int64
             * @description The ID of the project configuration. This property is deprecated, see [Change oticen: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
             */
            projectConfigurationId?: number;
        };
        SimplifiedIssueTransition: {
            /** @description The issue status change of the transition. */
            readonly to?: components["schemas"]["IssueTransitionStatus"];
            /**
             * Format: int32
             * @description The unique ID of the transition.
             */
            readonly transitionId?: number;
            /** @description The name of the transition. */
            readonly transitionName?: string;
        };
        SoftwareNavigationInfo: {
            /** Format: int64 */
            boardId?: number;
            boardName?: string;
            simpleBoard?: boolean;
            /** Format: int64 */
            totalBoardsInProject?: number;
        };
        /** @description The status of the item. */
        Status: {
            /** @description Details of the icon representing the status. If not provided, no status icon displays in Jira. */
            icon?: components["schemas"]["Icon"];
            /** @description Whether the item is resolved. If set to "true", the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font. */
            resolved?: boolean;
        } & {
            [key: string]: unknown;
        };
        /** @description A status category. */
        StatusCategory: {
            /** @description The name of the color used to represent the status category. */
            readonly colorName?: string;
            /**
             * Format: int64
             * @description The ID of the status category.
             */
            readonly id?: number;
            /** @description The key of the status category. */
            readonly key?: string;
            /** @description The name of the status category. */
            readonly name?: string;
            /** @description The URL of the status category. */
            readonly self?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of the status being created. */
        StatusCreate: {
            /** @description The description of the status. */
            description?: string;
            /** @description The name of the status. */
            name: string;
            /**
             * @description The category of the status.
             * @enum {string}
             */
            statusCategory: "TODO" | "IN_PROGRESS" | "DONE";
        };
        /** @description Details of the statuses being created and their scope. */
        StatusCreateRequest: {
            scope: components["schemas"]["StatusScope"];
            /** @description Details of the statuses being created. */
            statuses: components["schemas"]["StatusCreate"][];
        };
        /** @description A status. */
        StatusDetails: {
            /** @description The description of the status. */
            readonly description?: string;
            /** @description The URL of the icon used to represent the status. */
            readonly iconUrl?: string;
            /** @description The ID of the status. */
            readonly id?: string;
            /** @description The name of the status. */
            readonly name?: string;
            /** @description The scope of the field. */
            readonly scope?: components["schemas"]["Scope"];
            /** @description The URL of the status. */
            readonly self?: string;
            /** @description The category assigned to the status. */
            readonly statusCategory?: components["schemas"]["StatusCategory"];
        } & {
            [key: string]: unknown;
        };
        /** @description The statuses associated with each workflow. */
        StatusesPerWorkflow: {
            /** @description The ID of the initial status for the workflow. */
            initialStatusId?: string;
            /** @description The status IDs associated with the workflow. */
            statuses?: string[];
            /** @description The ID of the workflow. */
            workflowId?: string;
        };
        /** @description The statuses associated with this workflow. */
        StatusLayoutUpdate: {
            approvalConfiguration?: components["schemas"]["ApprovalConfiguration"];
            layout?: components["schemas"]["WorkflowLayout"];
            /** @description The properties for this status layout. */
            properties: {
                [key: string]: string;
            };
            /** @description A unique ID which the status will use to refer to this layout configuration. */
            statusReference: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details about the mapping from a status to a new status for an issue type. */
        StatusMapping: {
            /** @description The ID of the issue type. */
            issueTypeId: string;
            /** @description The ID of the new status. */
            newStatusId: string;
            /** @description The ID of the status. */
            statusId: string;
        };
        /** @description The mapping of old to new status ID for a specific project and issue type. */
        StatusMappingDTO: {
            /** @description The issue type for the status mapping. */
            issueTypeId: string;
            /** @description The project for the status mapping. */
            projectId: string;
            /** @description The list of old and new status ID mappings for the specified project and issue type. */
            statusMigrations: components["schemas"]["StatusMigration"][];
        } & {
            [key: string]: unknown;
        };
        /** @description The details of the statuses in the associated workflows. */
        StatusMetadata: {
            /**
             * @description The category of the status.
             * @enum {string}
             */
            category?: "TODO" | "IN_PROGRESS" | "DONE";
            /** @description The ID of the status. */
            id?: string;
            /** @description The name of the status. */
            name?: string;
        };
        /** @description The mapping of old to new status ID. */
        StatusMigration: {
            /** @description The new status ID. */
            newStatusReference: string;
            /** @description The old status ID. */
            oldStatusReference: string;
        } & {
            [key: string]: unknown;
        };
        /**
         * @deprecated
         * @description The status reference and port that a transition is connected to.
         */
        StatusReferenceAndPort: {
            /**
             * Format: int32
             * @description The port this transition uses to connect to this status.
             */
            port?: number;
            /** @description The reference of this status. */
            statusReference: string;
        } | null;
        /** @description The scope of the status. */
        StatusScope: {
            project?: components["schemas"]["ProjectId"];
            /**
             * @description The scope of the status. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
             * @enum {string}
             */
            type: "PROJECT" | "GLOBAL";
        };
        /** @description Details of the status being updated. */
        StatusUpdate: {
            /** @description The description of the status. */
            description?: string;
            /** @description The ID of the status. */
            id: string;
            /** @description The name of the status. */
            name: string;
            /**
             * @description The category of the status.
             * @enum {string}
             */
            statusCategory: "TODO" | "IN_PROGRESS" | "DONE";
        } & {
            [key: string]: unknown;
        };
        /** @description The list of statuses that will be updated. */
        StatusUpdateRequest: {
            /** @description The list of statuses that will be updated. */
            statuses: components["schemas"]["StatusUpdate"][];
        };
        StreamingResponseBody: Record<string, never>;
        StringList: Record<string, never>;
        SubmittedBulkOperation: {
            taskId?: string;
        };
        /** @description An issue suggested for use in the issue picker auto-completion. */
        SuggestedIssue: {
            /**
             * Format: int64
             * @description The ID of the issue.
             */
            readonly id?: number;
            /** @description The URL of the issue type's avatar. */
            readonly img?: string;
            /** @description The key of the issue. */
            readonly key?: string;
            /** @description The key of the issue in HTML format. */
            readonly keyHtml?: string;
            /** @description The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags. */
            readonly summary?: string;
            /** @description The phrase containing the query string, as plain text. */
            readonly summaryText?: string;
        };
        /** @description Details of changes to a priority scheme's priorities that require suggested priority mappings. */
        SuggestedMappingsForPrioritiesRequestBean: {
            /** @description The ids of priorities being removed from the scheme. */
            add?: number[];
            /** @description The ids of priorities being removed from the scheme. */
            remove?: number[];
        };
        /** @description Details of changes to a priority scheme's projects that require suggested priority mappings. */
        SuggestedMappingsForProjectsRequestBean: {
            /** @description The ids of projects being added to the scheme. */
            add?: number[];
        };
        /** @description Details of changes to a priority scheme that require suggested priority mappings. */
        SuggestedMappingsRequestBean: {
            /**
             * Format: int32
             * @description The maximum number of results that could be on the page.
             */
            maxResults?: number;
            /** @description The priority changes in the scheme. */
            priorities?: components["schemas"]["SuggestedMappingsForPrioritiesRequestBean"];
            /** @description The project changes in the scheme. */
            projects?: components["schemas"]["SuggestedMappingsForProjectsRequestBean"];
            /**
             * Format: int64
             * @description The id of the priority scheme.
             */
            schemeId?: number;
            /**
             * Format: int64
             * @description The index of the first item returned on the page.
             */
            startAt?: number;
        };
        /** @description List of system avatars. */
        SystemAvatars: {
            /** @description A list of avatar details. */
            readonly system?: components["schemas"]["Avatar"][];
        };
        /** @description Classification mapping for classifications in source issues to respective target classification. */
        targetClassification: {
            /** @description An object with the key as the ID of the target classification and value with the list of the IDs of the current source classifications. */
            classifications: {
                [key: string]: string[];
            };
            /** @description ID of the source issueType to which issues present in `issueIdOrKeys` belongs. */
            issueType?: string;
            /** @description ID or key of the source project to which issues present in `issueIdOrKeys` belongs. */
            projectKeyOrId?: string;
        } | null;
        /** @description Field mapping for mandatory fields in target */
        targetMandatoryFields: {
            /** @description Contains the value of mandatory fields */
            fields: {
                [key: string]: components["schemas"]["fields"];
            };
        } | null;
        /** @description Status mapping for statuses in source workflow to respective target status in target workflow. */
        targetStatus: {
            /** @description An object with the key as the ID of the target status and value with the list of the IDs of the current source statuses. */
            statuses: {
                [key: string]: string[];
            };
        } | null;
        /** @description An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move. */
        targetToSourcesMapping: {
            /** @description If `true`, when issues are moved into this target group, they will adopt the target project's default classification, if they don't have a classification already. If they do have a classification, it will be kept the same even after the move. Leave `targetClassification` empty when using this.
             *
             *     If `false`, you must provide a `targetClassification` mapping for each classification associated with the selected issues.
             *
             *     [Benefit from data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/) */
            inferClassificationDefaults: boolean;
            /** @description If `true`, values from the source issues will be retained for the mandatory fields in the field configuration of the destination project. The `targetMandatoryFields` property shouldn't be defined.
             *
             *     If `false`, the user is required to set values for mandatory fields present in the field configuration of the destination project. Provide input by defining the `targetMandatoryFields` property */
            inferFieldDefaults: boolean;
            /** @description If `true`, the statuses of issues being moved in this target group that are not present in the target workflow will be changed to the default status of the target workflow (see below). Leave `targetStatus` empty when using this.
             *
             *     If `false`, you must provide a `targetStatus` for each status not present in the target workflow.
             *
             *     The default status in a workflow is referred to as the "initial status". Each workflow has its own unique initial status. When an issue is created, it is automatically assigned to this initial status. Read more about configuring initial statuses: [Configure the initial status | Atlassian Support.](https://support.atlassian.com/jira-cloud-administration/docs/configure-the-initial-status/) */
            inferStatusDefaults: boolean;
            /** @description When an issue is moved, its subtasks (if there are any) need to be moved with it. `inferSubtaskTypeDefault` helps with moving the subtasks by picking a random subtask type in the target project.
             *
             *     If `true`, subtasks will automatically move to the same project as their parent.
             *
             *     When they move:
             *
             *      *  Their `issueType` will be set to the default for subtasks in the target project.
             *      *  Values for mandatory fields will be retained from the source issues
             *      *  Specifying separate mapping for implicit subtasks won’t be allowed.
             *
             *     If `false`, you must manually move the subtasks. They will retain the parent which they had in the current project after being moved. */
            inferSubtaskTypeDefault: boolean;
            /** @description List of issue IDs or keys to be moved. These issues must be from the same project, have the same issue type, and be from the same parent (if they’re subtasks). */
            issueIdsOrKeys?: string[];
            /** @description List of the objects containing classifications in the source issues and their new values which need to be set during the bulk move operation.
             *
             *      *  **You should only define this property when `inferClassificationDefaults` is `false`.**
             *      *  **In order to provide mapping for issues which don't have a classification, use `"-1"`.** */
            targetClassification?: components["schemas"]["targetClassification"][] | null;
            /** @description List of objects containing mandatory fields in the target field configuration and new values that need to be set during the bulk move operation.
             *
             *     The new values will only be applied if the field is mandatory in the target project and at least one issue from the source has that field empty, or if the field context is different in the target project (e.g. project-scoped version fields).
             *
             *     **You should only define this property when `inferFieldDefaults` is `false`.** */
            targetMandatoryFields?: components["schemas"]["targetMandatoryFields"][] | null;
            /** @description List of the objects containing statuses in the source workflow and their new values which need to be set during the bulk move operation.
             *
             *     The new values will only be applied if the source status is invalid for the target project and issue type.
             *
             *     **You should only define this property when `inferStatusDefaults` is `false`.** */
            targetStatus?: components["schemas"]["targetStatus"][] | null;
        };
        /** @description Details about a task. */
        TaskProgressBeanJsonNode: {
            /** @description The description of the task. */
            description?: string;
            /**
             * Format: int64
             * @description The execution time of the task, in milliseconds.
             */
            elapsedRuntime: number;
            /**
             * Format: int64
             * @description A timestamp recording when the task was finished.
             */
            finished?: number;
            /** @description The ID of the task. */
            id: string;
            /**
             * Format: int64
             * @description A timestamp recording when the task progress was last updated.
             */
            lastUpdate: number;
            /** @description Information about the progress of the task. */
            message?: string;
            /**
             * Format: int64
             * @description The progress of the task, as a percentage complete.
             */
            progress: number;
            /** @description The result of the task execution. */
            result?: components["schemas"]["JsonNode"];
            /**
             * Format: uri
             * @description The URL of the task.
             */
            self: string;
            /**
             * Format: int64
             * @description A timestamp recording when the task was started.
             */
            started?: number;
            /**
             * @description The status of the task.
             * @enum {string}
             */
            status: "ENQUEUED" | "RUNNING" | "COMPLETE" | "FAILED" | "CANCEL_REQUESTED" | "CANCELLED" | "DEAD";
            /**
             * Format: int64
             * @description A timestamp recording when the task was submitted.
             */
            submitted: number;
            /**
             * Format: int64
             * @description The ID of the user who submitted the task.
             */
            submittedBy: number;
        };
        /** @description Details about a task. */
        TaskProgressBeanObject: {
            /** @description The description of the task. */
            description?: string;
            /**
             * Format: int64
             * @description The execution time of the task, in milliseconds.
             */
            elapsedRuntime: number;
            /**
             * Format: int64
             * @description A timestamp recording when the task was finished.
             */
            finished?: number;
            /** @description The ID of the task. */
            id: string;
            /**
             * Format: int64
             * @description A timestamp recording when the task progress was last updated.
             */
            lastUpdate: number;
            /** @description Information about the progress of the task. */
            message?: string;
            /**
             * Format: int64
             * @description The progress of the task, as a percentage complete.
             */
            progress: number;
            /** @description The result of the task execution. */
            result?: unknown;
            /**
             * Format: uri
             * @description The URL of the task.
             */
            self: string;
            /**
             * Format: int64
             * @description A timestamp recording when the task was started.
             */
            started?: number;
            /**
             * @description The status of the task.
             * @enum {string}
             */
            status: "ENQUEUED" | "RUNNING" | "COMPLETE" | "FAILED" | "CANCEL_REQUESTED" | "CANCELLED" | "DEAD";
            /**
             * Format: int64
             * @description A timestamp recording when the task was submitted.
             */
            submitted: number;
            /**
             * Format: int64
             * @description The ID of the user who submitted the task.
             */
            submittedBy: number;
        };
        /** @description Details about a task. */
        TaskProgressBeanRemoveOptionFromIssuesResult: {
            /** @description The description of the task. */
            description?: string;
            /**
             * Format: int64
             * @description The execution time of the task, in milliseconds.
             */
            elapsedRuntime: number;
            /**
             * Format: int64
             * @description A timestamp recording when the task was finished.
             */
            finished?: number;
            /** @description The ID of the task. */
            id: string;
            /**
             * Format: int64
             * @description A timestamp recording when the task progress was last updated.
             */
            lastUpdate: number;
            /** @description Information about the progress of the task. */
            message?: string;
            /**
             * Format: int64
             * @description The progress of the task, as a percentage complete.
             */
            progress: number;
            /** @description The result of the task execution. */
            result?: components["schemas"]["RemoveOptionFromIssuesResult"];
            /**
             * Format: uri
             * @description The URL of the task.
             */
            self: string;
            /**
             * Format: int64
             * @description A timestamp recording when the task was started.
             */
            started?: number;
            /**
             * @description The status of the task.
             * @enum {string}
             */
            status: "ENQUEUED" | "RUNNING" | "COMPLETE" | "FAILED" | "CANCEL_REQUESTED" | "CANCELLED" | "DEAD";
            /**
             * Format: int64
             * @description A timestamp recording when the task was submitted.
             */
            submitted: number;
            /**
             * Format: int64
             * @description The ID of the user who submitted the task.
             */
            submittedBy: number;
        };
        /** @description Details of the time tracking configuration. */
        TimeTrackingConfiguration: {
            /**
             * @description The default unit of time applied to logged time.
             * @enum {string}
             */
            defaultUnit: "minute" | "hour" | "day" | "week";
            /**
             * @description The format that will appear on an issue's *Time Spent* field.
             * @enum {string}
             */
            timeFormat: "pretty" | "days" | "hours";
            /**
             * Format: double
             * @description The number of days in a working week.
             */
            workingDaysPerWeek: number;
            /**
             * Format: double
             * @description The number of hours in a working day.
             */
            workingHoursPerDay: number;
        };
        /** @description Time tracking details. */
        TimeTrackingDetails: {
            /** @description The original estimate of time needed for this issue in readable format. */
            readonly originalEstimate?: string;
            /**
             * Format: int64
             * @description The original estimate of time needed for this issue in seconds.
             */
            readonly originalEstimateSeconds?: number;
            /** @description The remaining estimate of time needed for this issue in readable format. */
            readonly remainingEstimate?: string;
            /**
             * Format: int64
             * @description The remaining estimate of time needed for this issue in seconds.
             */
            readonly remainingEstimateSeconds?: number;
            /** @description Time worked on this issue in readable format. */
            readonly timeSpent?: string;
            /**
             * Format: int64
             * @description Time worked on this issue in seconds.
             */
            readonly timeSpentSeconds?: number;
        };
        /** @description Details about the time tracking provider. */
        TimeTrackingProvider: {
            /** @description The key for the time tracking provider. For example, *JIRA*. */
            key: string;
            /** @description The name of the time tracking provider. For example, *JIRA provided time tracking*. */
            name?: string;
            /** @description The URL of the configuration page for the time tracking provider app. For example, *\/example/config/url*. This property is only returned if the `adminPageKey` property is set in the module descriptor of the time tracking provider app. */
            readonly url?: string;
        };
        /** @description Details of a workflow transition. */
        Transition: {
            /** @description The description of the transition. */
            description: string;
            /** @description The statuses the transition can start from. */
            from: string[];
            /** @description The ID of the transition. */
            id: string;
            /** @description The name of the transition. */
            name: string;
            /** @description The properties of the transition. */
            properties?: {
                [key: string]: unknown;
            };
            rules?: components["schemas"]["WorkflowRules"];
            screen?: components["schemas"]["TransitionScreenDetails"];
            /** @description The status the transition goes to. */
            to: string;
            /**
             * @description The type of the transition.
             * @enum {string}
             */
            type: "global" | "initial" | "directed";
        };
        /** @description List of issue transitions. */
        Transitions: {
            /** @description Expand options that include additional transitions details in the response. */
            readonly expand?: string;
            /** @description List of issue transitions. */
            readonly transitions?: components["schemas"]["IssueTransition"][];
        };
        /** @description The details of a transition screen. */
        TransitionScreenDetails: {
            /** @description The ID of the screen. */
            id: string;
            /** @description The name of the screen. */
            name?: string;
        };
        /** @description The transition update data. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination. */
        TransitionUpdateDTO: {
            /** @description The post-functions of the transition. */
            actions?: components["schemas"]["WorkflowRuleConfiguration"][];
            conditions?: components["schemas"]["ConditionGroupUpdate"];
            /** @description The custom event ID of the transition. */
            customIssueEventId?: string;
            /** @description The description of the transition. */
            description?: string;
            /**
             * @deprecated
             * @description The statuses and ports that the transition can start from. This field is deprecated - use `toStatusReference`/`links` instead.
             */
            from?: components["schemas"]["StatusReferenceAndPort"][];
            /** @description The ID of the transition. */
            id: string;
            /** @description The statuses the transition can start from, and the mapping of ports between the statuses. */
            links?: components["schemas"]["WorkflowTransitionLinks"][];
            /** @description The name of the transition. */
            name: string;
            /** @description The properties of the transition. */
            properties?: {
                [key: string]: string;
            };
            to?: components["schemas"]["StatusReferenceAndPort"];
            /** @description The status the transition goes to. */
            toStatusReference?: string;
            transitionScreen?: components["schemas"]["WorkflowRuleConfiguration"];
            /** @description The triggers of the transition. */
            triggers?: components["schemas"]["WorkflowTrigger"][];
            /**
             * @description The transition type.
             * @enum {string}
             */
            type: "INITIAL" | "GLOBAL" | "DIRECTED";
            /** @description The validators of the transition. */
            validators?: components["schemas"]["WorkflowRuleConfiguration"][];
        } & {
            [key: string]: unknown;
        };
        /** @description The details of a UI modification's context, which define where to activate the UI modification. */
        UiModificationContextDetails: {
            /** @description The ID of the UI modification context. */
            readonly id?: string;
            /** @description Whether a context is available. For example, when a project is deleted the context becomes unavailable. */
            readonly isAvailable?: boolean;
            /** @description The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard. */
            issueTypeId?: string;
            /** @description The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard. */
            projectId?: string;
            /**
             * @description The view type of the context. Only `GIC`(Global Issue Create), `IssueView` and `IssueTransition` are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.
             * @enum {string}
             */
            viewType?: "GIC" | "IssueView" | "IssueTransition";
        };
        /** @description The details of a UI modification. */
        UiModificationDetails: {
            /** @description List of contexts of the UI modification. The maximum number of contexts is 1000. */
            readonly contexts?: components["schemas"]["UiModificationContextDetails"][];
            /** @description The data of the UI modification. The maximum size of the data is 50000 characters. */
            readonly data?: string;
            /** @description The description of the UI modification. The maximum length is 255 characters. */
            readonly description?: string;
            /** @description The ID of the UI modification. */
            readonly id: string;
            /** @description The name of the UI modification. The maximum length is 255 characters. */
            readonly name: string;
            /** @description The URL of the UI modification. */
            readonly self: string;
        };
        /** @description Identifiers for a UI modification. */
        UiModificationIdentifiers: {
            /** @description The ID of the UI modification. */
            readonly id: string;
            /** @description The URL of the UI modification. */
            readonly self: string;
        };
        UnrestrictedUserEmail: {
            /** @description The accountId of the user */
            accountId?: string;
            /** @description The email of the user */
            email?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of a custom field. */
        UpdateCustomFieldDetails: {
            /** @description The description of the custom field. The maximum length is 40000 characters. */
            description?: string;
            /** @description The name of the custom field. It doesn't have to be unique. The maximum length is 255 characters. */
            name?: string;
            /**
             * @description The searcher that defines the way the field is searched in Jira. It can be set to `null`, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):
             *
             *      *  `cascadingselect`: `cascadingselectsearcher`
             *      *  `datepicker`: `daterange`
             *      *  `datetime`: `datetimerange`
             *      *  `float`: `exactnumber` or `numberrange`
             *      *  `grouppicker`: `grouppickersearcher`
             *      *  `importid`: `exactnumber` or `numberrange`
             *      *  `labels`: `labelsearcher`
             *      *  `multicheckboxes`: `multiselectsearcher`
             *      *  `multigrouppicker`: `multiselectsearcher`
             *      *  `multiselect`: `multiselectsearcher`
             *      *  `multiuserpicker`: `userpickergroupsearcher`
             *      *  `multiversion`: `versionsearcher`
             *      *  `project`: `projectsearcher`
             *      *  `radiobuttons`: `multiselectsearcher`
             *      *  `readonlyfield`: `textsearcher`
             *      *  `select`: `multiselectsearcher`
             *      *  `textarea`: `textsearcher`
             *      *  `textfield`: `textsearcher`
             *      *  `url`: `exacttextsearcher`
             *      *  `userpicker`: `userpickergroupsearcher`
             *      *  `version`: `versionsearcher`
             * @enum {string}
             */
            searcherKey?: "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:daterange" | "com.atlassian.jira.plugin.system.customfieldtypes:datetimerange" | "com.atlassian.jira.plugin.system.customfieldtypes:exactnumber" | "com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:numberrange" | "com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:textsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher";
        };
        /** @description The request for updating the default project classification level. */
        UpdateDefaultProjectClassificationBean: {
            /** @description The ID of the project classification. */
            id: string;
        };
        /** @description The ID of a screen scheme. */
        UpdateDefaultScreenScheme: {
            /** @description The ID of the screen scheme. */
            screenSchemeId: string;
        };
        /** @description A project category. */
        UpdatedProjectCategory: {
            /** @description The name of the project category. */
            readonly description?: string;
            /** @description The ID of the project category. */
            readonly id?: string;
            /** @description The description of the project category. */
            readonly name?: string;
            /** @description The URL of the project category. */
            readonly self?: string;
        };
        /** @description The details of the field configuration scheme. */
        UpdateFieldConfigurationSchemeDetails: {
            /** @description The description of the field configuration scheme. */
            description?: string;
            /** @description The name of the field configuration scheme. The name must be unique. */
            name: string;
        };
        /** @description Details of issue security scheme level. */
        UpdateIssueSecurityLevelDetails: {
            /** @description The description of the issue security scheme level. */
            description?: string;
            /** @description The name of the issue security scheme level. Must be unique. */
            name?: string;
        } & {
            [key: string]: unknown;
        };
        UpdateIssueSecuritySchemeRequestBean: {
            /** @description The description of the security scheme scheme. */
            description?: string;
            /** @description The name of the security scheme scheme. Must be unique. */
            name?: string;
        };
        /** @description Details of a notification scheme. */
        UpdateNotificationSchemeDetails: {
            /** @description The description of the notification scheme. */
            description?: string;
            /** @description The name of the notification scheme. Must be unique. */
            name?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Update priorities in a scheme */
        UpdatePrioritiesInSchemeRequestBean: {
            /** @description Priorities to add to a scheme */
            add?: components["schemas"]["PrioritySchemeChangesWithoutMappings"];
            /** @description Priorities to remove from a scheme */
            remove?: components["schemas"]["PrioritySchemeChangesWithoutMappings"];
        } & {
            [key: string]: unknown;
        };
        /** @description Details of an issue priority. */
        UpdatePriorityDetails: {
            /**
             * Format: int64
             * @description The ID for the avatar for the priority. This parameter is nullable and both iconUrl and avatarId cannot be defined.
             */
            avatarId?: number;
            /** @description The description of the priority. */
            description?: string | null;
            /**
             * @description The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used. Both iconUrl and avatarId cannot be defined.
             * @enum {string|null}
             */
            iconUrl?: "/images/icons/priorities/blocker.png" | "/images/icons/priorities/critical.png" | "/images/icons/priorities/high.png" | "/images/icons/priorities/highest.png" | "/images/icons/priorities/low.png" | "/images/icons/priorities/lowest.png" | "/images/icons/priorities/major.png" | "/images/icons/priorities/medium.png" | "/images/icons/priorities/minor.png" | "/images/icons/priorities/trivial.png" | "/images/icons/priorities/blocker_new.png" | "/images/icons/priorities/critical_new.png" | "/images/icons/priorities/high_new.png" | "/images/icons/priorities/highest_new.png" | "/images/icons/priorities/low_new.png" | "/images/icons/priorities/lowest_new.png" | "/images/icons/priorities/major_new.png" | "/images/icons/priorities/medium_new.png" | "/images/icons/priorities/minor_new.png" | "/images/icons/priorities/trivial_new.png" | null;
            /** @description The name of the priority. Must be unique. */
            name?: string | null;
            /** @description The status color of the priority in 3-digit or 6-digit hexadecimal format. */
            statusColor?: string | null;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of a priority scheme. */
        UpdatePrioritySchemeRequestBean: {
            /**
             * Format: int64
             * @description The default priority of the scheme.
             */
            defaultPriorityId?: number;
            /** @description The description of the priority scheme. */
            description?: string;
            /** @description Instructions to migrate the priorities of issues.
             *
             *     `in` mappings are used to migrate the priorities of issues to priorities used within the priority scheme.
             *
             *     `out` mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.
             *
             *      *  When **priorities** are **added** to the priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.
             *      *  When **priorities** are **removed** from the priority scheme, issues that are using those priorities must be migrated to new priorities used by the priority scheme.
             *
             *          *  An `in` mapping must be provided for each of these priorities.
             *      *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)' priority scheme(s).
             *
             *          *  An `in` mapping must be provided for each of these priorities.
             *      *  When **projects** are **removed** from the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities within the **Default Priority Scheme** that are not used by the priority scheme. This can occur when the **Default Priority Scheme** does not use all the priorities within the current scheme.
             *
             *          *  An `out` mapping must be provided for each of these priorities.
             *
             *     For more information on `in` and `out` mappings, see the child properties documentation for the `PriorityMapping` object below. */
            mappings?: components["schemas"]["PriorityMapping"];
            /** @description The name of the priority scheme. Must be unique. */
            name?: string;
            /** @description The priorities in the scheme. */
            priorities?: components["schemas"]["UpdatePrioritiesInSchemeRequestBean"];
            /** @description The projects in the scheme. */
            projects?: components["schemas"]["UpdateProjectsInSchemeRequestBean"];
        };
        /** @description Details of the updated priority scheme. */
        UpdatePrioritySchemeResponseBean: {
            priorityScheme?: components["schemas"]["PrioritySchemeWithPaginatedPrioritiesAndProjects"];
            /** @description The in-progress issue migration task. */
            readonly task?: components["schemas"]["TaskProgressBeanJsonNode"];
        } & {
            [key: string]: unknown;
        };
        /** @description Details about the project. */
        UpdateProjectDetails: {
            /**
             * @description The default assignee when creating issues for this project.
             * @enum {string}
             */
            assigneeType?: "PROJECT_LEAD" | "UNASSIGNED";
            /**
             * Format: int64
             * @description An integer value for the project's avatar.
             */
            avatarId?: number;
            /**
             * Format: int64
             * @description The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. To remove the project category from the project, set the value to `-1.`
             */
            categoryId?: number;
            /** @description A brief description of the project. */
            description?: string;
            /**
             * Format: int64
             * @description The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
             */
            issueSecurityScheme?: number;
            /** @description Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters. */
            key?: string;
            /** @description This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with `leadAccountId`. */
            lead?: string;
            /** @description The account ID of the project lead. Cannot be provided with `lead`. */
            leadAccountId?: string;
            /** @description The name of the project. */
            name?: string;
            /**
             * Format: int64
             * @description The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
             */
            notificationScheme?: number;
            /**
             * Format: int64
             * @description The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
             */
            permissionScheme?: number;
            /** @description Previous project keys to be released from the current project. Released keys must belong to the current project and not contain the current project key */
            releasedProjectKeys?: string[];
            /** @description A link to information about this project, such as project documentation */
            url?: string;
        };
        /** @description Update projects in a scheme */
        UpdateProjectsInSchemeRequestBean: {
            /** @description Projects to add to a scheme */
            add?: components["schemas"]["PrioritySchemeChangesWithoutMappings"];
            /** @description Projects to remove from a scheme */
            remove?: components["schemas"]["PrioritySchemeChangesWithoutMappings"];
        } & {
            [key: string]: unknown;
        };
        /** @description Details of an issue resolution. */
        UpdateResolutionDetails: {
            /** @description The description of the resolution. */
            description?: string;
            /** @description The name of the resolution. Must be unique. */
            name: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of a screen. */
        UpdateScreenDetails: {
            /** @description The description of the screen. The maximum length is 255 characters. */
            description?: string;
            /** @description The name of the screen. The name must be unique. The maximum length is 255 characters. */
            name?: string;
        };
        /** @description Details of a screen scheme. */
        UpdateScreenSchemeDetails: {
            /** @description The description of the screen scheme. The maximum length is 255 characters. */
            description?: string;
            /** @description The name of the screen scheme. The name must be unique. The maximum length is 255 characters. */
            name?: string;
            /** @description The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted. */
            screens?: components["schemas"]["UpdateScreenTypes"];
        };
        /** @description The IDs of the screens for the screen types of the screen scheme. */
        UpdateScreenTypes: {
            /** @description The ID of the create screen. To remove the screen association, pass a null. */
            create?: string;
            /** @description The ID of the default screen. When specified, must include a screen ID as a default screen is required. */
            default?: string;
            /** @description The ID of the edit screen. To remove the screen association, pass a null. */
            edit?: string;
            /** @description The ID of the view screen. To remove the screen association, pass a null. */
            view?: string;
        };
        /** @description The details of a UI modification. */
        UpdateUiModificationDetails: {
            /** @description List of contexts of the UI modification. The maximum number of contexts is 1000. If provided, replaces all existing contexts. */
            contexts?: components["schemas"]["UiModificationContextDetails"][];
            /** @description The data of the UI modification. The maximum size of the data is 50000 characters. */
            data?: string;
            /** @description The description of the UI modification. The maximum length is 255 characters. */
            description?: string;
            /** @description The name of the UI modification. The maximum length is 255 characters. */
            name?: string;
        };
        UpdateUserToGroupBean: {
            /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
            accountId?: string;
            /** @description This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            name?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
         *
         *      *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
         *      *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
         *      *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values. */
        User: {
            /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests. */
            accountId?: string;
            /**
             * @description The user account type. Can take the following values:
             *
             *      *  `atlassian` regular Atlassian user account
             *      *  `app` system account used for Connect applications and OAuth to represent external systems
             *      *  `customer` Jira Service Desk account representing an external service desk
             * @enum {string}
             */
            readonly accountType?: "atlassian" | "app" | "customer" | "unknown";
            /** @description Whether the user is active. */
            readonly active?: boolean;
            /** @description The application roles the user is assigned to. */
            readonly applicationRoles?: components["schemas"]["SimpleListWrapperApplicationRole"];
            /** @description The avatars of the user. */
            readonly avatarUrls?: components["schemas"]["AvatarUrlsBean"];
            /** @description The display name of the user. Depending on the user’s privacy setting, this may return an alternative value. */
            readonly displayName?: string;
            /** @description The email address of the user. Depending on the user’s privacy setting, this may be returned as null. */
            readonly emailAddress?: string;
            /** @description Expand options that include additional user details in the response. */
            readonly expand?: string;
            /** @description The groups that the user belongs to. */
            readonly groups?: components["schemas"]["SimpleListWrapperGroupName"];
            /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            key?: string;
            /** @description The locale of the user. Depending on the user’s privacy setting, this may be returned as null. */
            readonly locale?: string;
            /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            name?: string;
            /**
             * Format: uri
             * @description The URL of the user.
             */
            readonly self?: string;
            /** @description The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null. */
            readonly timeZone?: string;
        };
        UserBean: {
            /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
            accountId?: string;
            /** @description Whether the user is active. */
            active?: boolean;
            /** @description The avatars of the user. */
            avatarUrls?: components["schemas"]["UserBeanAvatarUrls"];
            /** @description The display name of the user. Depending on the user’s privacy setting, this may return an alternative value. */
            displayName?: string;
            /** @description This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
             *     The key of the user. */
            key?: string;
            /** @description This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
             *     The username of the user. */
            name?: string;
            /**
             * Format: uri
             * @description The URL of the user.
             */
            self?: string;
        };
        UserBeanAvatarUrls: {
            /**
             * Format: uri
             * @description The URL of the user's 16x16 pixel avatar.
             */
            "16x16"?: string;
            /**
             * Format: uri
             * @description The URL of the user's 24x24 pixel avatar.
             */
            "24x24"?: string;
            /**
             * Format: uri
             * @description The URL of the user's 32x32 pixel avatar.
             */
            "32x32"?: string;
            /**
             * Format: uri
             * @description The URL of the user's 48x48 pixel avatar.
             */
            "48x48"?: string;
        };
        UserColumnRequestBody: {
            columns?: string[];
        };
        /** @description A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID. */
        UserContextVariable: {
            /** @description The account ID of the user. */
            accountId: string;
            /**
             * @description Type of custom context variable. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "user";
        };
        /** @description User details permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
         *
         *      *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
         *      *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
         *      *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values. */
        UserDetails: {
            /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
            accountId?: string;
            /** @description The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user) */
            readonly accountType?: string;
            /** @description Whether the user is active. */
            readonly active?: boolean;
            /** @description The avatars of the user. */
            readonly avatarUrls?: components["schemas"]["AvatarUrlsBean"];
            /** @description The display name of the user. Depending on the user’s privacy settings, this may return an alternative value. */
            readonly displayName?: string;
            /** @description The email address of the user. Depending on the user’s privacy settings, this may be returned as null. */
            readonly emailAddress?: string;
            /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            readonly key?: string;
            /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            readonly name?: string;
            /** @description The URL of the user. */
            readonly self?: string;
            /** @description The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null. */
            readonly timeZone?: string;
        };
        /** @description Filter for a User Picker (single) custom field. */
        UserFilter: {
            /** @description Whether the filter is enabled. */
            enabled: boolean;
            /** @description User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided. */
            groups?: string[];
            /** @description Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided. */
            roleIds?: number[];
        };
        /** @description List of user account IDs. */
        UserKey: {
            /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import. */
            accountId?: string;
            /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            key?: string;
        };
        /** @description A paginated list of users sharing the filter. This includes users that are members of the groups or can browse the projects that the filter is shared with. */
        UserList: {
            /**
             * Format: int32
             * @description The index of the last item returned on the page.
             */
            readonly "end-index"?: number;
            /** @description The list of items. */
            readonly items?: components["schemas"]["User"][];
            /**
             * Format: int32
             * @description The maximum number of results that could be on the page.
             */
            readonly "max-results"?: number;
            /**
             * Format: int32
             * @description The number of items on the page.
             */
            readonly size?: number;
            /**
             * Format: int32
             * @description The index of the first item returned on the page.
             */
            readonly "start-index"?: number;
        };
        UserMigrationBean: {
            accountId?: string;
            key?: string;
            username?: string;
        };
        /** @description Details of a permission and its availability to a user. */
        UserPermission: {
            /** @description Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.` */
            deprecatedKey?: boolean;
            /** @description The description of the permission. */
            description?: string;
            /** @description Whether the permission is available to the user in the queried context. */
            havePermission?: boolean;
            /** @description The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. */
            id?: string;
            /** @description The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. */
            key?: string;
            /** @description The name of the permission. */
            name?: string;
            /**
             * @description The type of the permission.
             * @enum {string}
             */
            type?: "GLOBAL" | "PROJECT";
        } & {
            [key: string]: unknown;
        };
        /** @description A user found in a search. */
        UserPickerUser: {
            /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
            accountId?: string;
            /**
             * Format: uri
             * @description The avatar URL of the user.
             */
            avatarUrl?: string;
            /** @description The display name of the user. Depending on the user’s privacy setting, this may be returned as null. */
            displayName?: string;
            /** @description The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag. */
            html?: string;
            /** @description This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            key?: string;
            /** @description This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            name?: string;
        };
        /** @description The level of validation to return from the API. If no values are provided, the default would return `WARNING` and `ERROR` level validation results. */
        ValidationOptionsForCreate: {
            levels?: ("WARNING" | "ERROR")[];
        };
        /** @description The level of validation to return from the API. If no values are provided, the default would return `WARNING` and `ERROR` level validation results. */
        ValidationOptionsForUpdate: {
            levels?: ("WARNING" | "ERROR")[];
        };
        /** @description An operand that is a user-provided value. */
        ValueOperand: {
            /** @description Encoded value, which can be used directly in a JQL query. */
            encodedValue?: string;
            /** @description The operand value. */
            value: string;
        };
        /** @description Details about a project version. */
        Version: {
            /** @description If the expand option `approvers` is used, returns a list containing the approvers for this version. */
            readonly approvers?: components["schemas"]["VersionApprover"][];
            /** @description Indicates that the version is archived. Optional when creating or updating a version. */
            archived?: boolean;
            /** @description The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes. */
            description?: string;
            /** @description If the expand option `driver` is used, returns the Atlassian account ID of the driver. */
            readonly driver?: string;
            /** @description Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
             *
             *      *  `operations` Returns the list of operations available for this version.
             *      *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
             *      *  `driver` Returns the Atlassian account ID of the version driver.
             *      *  `approvers` Returns a list containing approvers for this version.
             *
             *     Optional for create and update. */
            expand?: string;
            /** @description The ID of the version. */
            readonly id?: string;
            /** @description If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*. */
            readonly issuesStatusForFixVersion?: components["schemas"]["VersionIssuesStatus"];
            /**
             * Format: uri
             * @description The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
             */
            moveUnfixedIssuesTo?: string;
            /** @description The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters. */
            name?: string;
            /** @description If the expand option `operations` is used, returns the list of operations available for this version. */
            readonly operations?: components["schemas"]["SimpleLink"][];
            /** @description Indicates that the version is overdue. */
            readonly overdue?: boolean;
            /** @description Deprecated. Use `projectId`. */
            project?: string;
            /**
             * Format: int64
             * @description The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
             */
            projectId?: number;
            /** @description Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version. */
            released?: boolean;
            /**
             * Format: date
             * @description The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
             */
            releaseDate?: string;
            /**
             * Format: uri
             * @description The URL of the version.
             */
            readonly self?: string;
            /**
             * Format: date
             * @description The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
             */
            startDate?: string;
            /** @description The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format. */
            readonly userReleaseDate?: string;
            /** @description The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format. */
            readonly userStartDate?: string;
        };
        /** @description Contains details about a version approver. */
        VersionApprover: {
            /** @description The Atlassian account ID of the approver. */
            readonly accountId?: string;
            /** @description A description of why the user is declining the approval. */
            readonly declineReason?: string;
            /** @description A description of what the user is approving within the specified version. */
            readonly description?: string;
            /** @description The status of the approval, which can be *PENDING*, *APPROVED*, or *DECLINED* */
            readonly status?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Various counts of issues within a version. */
        VersionIssueCounts: {
            /** @description List of custom fields using the version. */
            readonly customFieldUsage?: components["schemas"]["VersionUsageInCustomField"][];
            /**
             * Format: int64
             * @description Count of issues where a version custom field is set to the version.
             */
            readonly issueCountWithCustomFieldsShowingVersion?: number;
            /**
             * Format: int64
             * @description Count of issues where the `affectedVersion` is set to the version.
             */
            readonly issuesAffectedCount?: number;
            /**
             * Format: int64
             * @description Count of issues where the `fixVersion` is set to the version.
             */
            readonly issuesFixedCount?: number;
            /**
             * Format: uri
             * @description The URL of these count details.
             */
            readonly self?: string;
        };
        /** @description Counts of the number of issues in various statuses. */
        VersionIssuesStatus: {
            /**
             * Format: int64
             * @description Count of issues with status *done*.
             */
            readonly done?: number;
            /**
             * Format: int64
             * @description Count of issues with status *in progress*.
             */
            readonly inProgress?: number;
            /**
             * Format: int64
             * @description Count of issues with status *to do*.
             */
            readonly toDo?: number;
            /**
             * Format: int64
             * @description Count of issues with a status other than *to do*, *in progress*, and *done*.
             */
            readonly unmapped?: number;
        } & {
            [key: string]: unknown;
        };
        VersionMoveBean: {
            /**
             * Format: uri
             * @description The URL (self link) of the version after which to place the moved version. Cannot be used with `position`.
             */
            after?: string;
            /**
             * @description An absolute position in which to place the moved version. Cannot be used with `after`.
             * @enum {string}
             */
            position?: "Earlier" | "Later" | "First" | "Last";
        };
        /** @description Associated related work to a version */
        VersionRelatedWork: {
            /** @description The category of the related work */
            category: string;
            /**
             * Format: int64
             * @description The ID of the issue associated with the related work (if there is one). Cannot be updated via the Rest API.
             */
            readonly issueId?: number;
            /** @description The id of the related work. For the native release note related work item, this will be null, and Rest API does not support updating it. */
            readonly relatedWorkId?: string;
            /** @description The title of the related work */
            title?: string;
            /**
             * Format: uri
             * @description The URL of the related work. Will be null for the native release note related work item, but is otherwise required.
             */
            url?: string;
        };
        /** @description Count of a version's unresolved issues. */
        VersionUnresolvedIssuesCount: {
            /**
             * Format: int64
             * @description Count of issues.
             */
            readonly issuesCount?: number;
            /**
             * Format: int64
             * @description Count of unresolved issues.
             */
            readonly issuesUnresolvedCount?: number;
            /**
             * Format: uri
             * @description The URL of these count details.
             */
            readonly self?: string;
        };
        /** @description List of custom fields using the version. */
        VersionUsageInCustomField: {
            /**
             * Format: int64
             * @description The ID of the custom field.
             */
            readonly customFieldId?: number;
            /** @description The name of the custom field. */
            readonly fieldName?: string;
            /**
             * Format: int64
             * @description Count of the issues where the custom field contains the version.
             */
            readonly issueCountWithVersionInCustomField?: number;
        };
        /** @description The group or role to which this item is visible. */
        Visibility: {
            /** @description The ID of the group or the name of the role that visibility of this item is restricted to. */
            identifier?: string | null;
            /**
             * @description Whether visibility of this item is restricted to a group or role.
             * @enum {string}
             */
            type?: "group" | "role";
            /** @description The name of the group or role that visibility of this item is restricted to. Please note that the name of a group is mutable, to reliably identify a group use `identifier`. */
            value?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description The details of votes on an issue. */
        Votes: {
            /** @description Whether the user making this request has voted on the issue. */
            readonly hasVoted?: boolean;
            /**
             * Format: uri
             * @description The URL of these issue vote details.
             */
            readonly self?: string;
            /** @description List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the *View voters and watchers* project permission. */
            readonly voters?: components["schemas"]["User"][];
            /**
             * Format: int64
             * @description The number of votes on the issue.
             */
            readonly votes?: number;
        };
        WarningCollection: {
            warnings?: string[];
        };
        /** @description The details of watchers on an issue. */
        Watchers: {
            /** @description Whether the calling user is watching this issue. */
            readonly isWatching?: boolean;
            /** @description The URL of these issue watcher details. */
            readonly self?: string;
            /**
             * Format: int32
             * @description The number of users watching this issue.
             */
            readonly watchCount?: number;
            /** @description Details of the users watching this issue. */
            readonly watchers?: components["schemas"]["UserDetails"][];
        };
        /** @description A webhook. */
        Webhook: {
            /** @description The Jira events that trigger the webhook. */
            events: ("jira:issue_created" | "jira:issue_updated" | "jira:issue_deleted" | "comment_created" | "comment_updated" | "comment_deleted" | "issue_property_set" | "issue_property_deleted")[];
            /**
             * Format: int64
             * @description The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
             */
            readonly expirationDate?: number;
            /** @description A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates. */
            fieldIdsFilter?: string[];
            /**
             * Format: int64
             * @description The ID of the webhook.
             */
            id: number;
            /** @description A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates. */
            issuePropertyKeysFilter?: string[];
            /** @description The JQL filter that specifies which issues the webhook is sent for. */
            jqlFilter: string;
        };
        /** @description A list of webhooks. */
        WebhookDetails: {
            /** @description The Jira events that trigger the webhook. */
            events: ("jira:issue_created" | "jira:issue_updated" | "jira:issue_deleted" | "comment_created" | "comment_updated" | "comment_deleted" | "issue_property_set" | "issue_property_deleted")[];
            /** @description A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates. */
            fieldIdsFilter?: string[];
            /** @description A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates. */
            issuePropertyKeysFilter?: string[];
            /** @description The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:
             *
             *      *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]`. For custom fields (`cf[id]`), only the epic label custom field is supported.".
             *      *  Operators: `=`, `!=`, `IN`, and `NOT IN`. */
            jqlFilter: string;
        };
        /** @description Details of webhooks to register. */
        WebhookRegistrationDetails: {
            /** @description The URL that specifies where to send the webhooks. This URL must use the same base URL as the Connect app. Only a single URL per app is allowed to be registered. */
            url: string;
            /** @description A list of webhooks. */
            webhooks: components["schemas"]["WebhookDetails"][];
        };
        /** @description The date the refreshed webhooks expire. */
        WebhooksExpirationDate: {
            /**
             * Format: int64
             * @description The expiration date of all the refreshed webhooks.
             */
            readonly expirationDate: number;
        };
        /** @description Details about a workflow. */
        Workflow: {
            /**
             * Format: date-time
             * @description The creation date of the workflow.
             */
            created?: string;
            /** @description The description of the workflow. */
            description: string;
            /** @description Whether the workflow has a draft version. */
            hasDraftWorkflow?: boolean;
            id: components["schemas"]["PublishedWorkflowId"];
            /** @description Whether this is the default workflow. */
            isDefault?: boolean;
            operations?: components["schemas"]["WorkflowOperations"];
            /** @description The projects the workflow is assigned to, through workflow schemes. */
            projects?: components["schemas"]["ProjectDetails"][];
            /** @description The workflow schemes the workflow is assigned to. */
            schemes?: components["schemas"]["WorkflowSchemeIdName"][];
            /** @description The statuses of the workflow. */
            statuses?: components["schemas"]["WorkflowStatus"][];
            /** @description The transitions of the workflow. */
            transitions?: components["schemas"]["Transition"][];
            /**
             * Format: date-time
             * @description The last edited date of the workflow.
             */
            updated?: string;
        };
        /** @description The list of status mappings. */
        WorkflowAssociationStatusMapping: {
            /** @description The ID of the status in the new workflow. */
            newStatusId: string;
            /** @description The ID of the status in the old workflow that isn't present in the new workflow. */
            oldStatusId: string;
        };
        WorkflowCapabilities: {
            /** @description The Connect provided ecosystem rules available. */
            connectRules?: components["schemas"]["AvailableWorkflowConnectRule"][];
            /**
             * @description The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
             * @enum {string}
             */
            editorScope?: "PROJECT" | "GLOBAL";
            /** @description The Forge provided ecosystem rules available. */
            forgeRules?: components["schemas"]["AvailableWorkflowForgeRule"][];
            /** @description The types of projects that this capability set is available for. */
            projectTypes?: ("software" | "service_desk" | "product_discovery" | "business" | "unknown")[];
            /** @description The Atlassian provided system rules available. */
            systemRules?: components["schemas"]["AvailableWorkflowSystemRule"][];
            /** @description The trigger rules available. */
            triggerRules?: components["schemas"]["AvailableWorkflowTriggers"][];
        };
        /** @description A compound workflow transition rule condition. This object returns `nodeType` as `compound`. */
        WorkflowCompoundCondition: {
            /** @description The list of workflow conditions. */
            conditions: components["schemas"]["WorkflowCondition"][];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            nodeType: "compound";
            /**
             * @description The compound condition operator.
             * @enum {string}
             */
            operator: "AND" | "OR";
        };
        /** @description The workflow transition rule conditions tree. */
        WorkflowCondition: components["schemas"]["WorkflowSimpleCondition"] | components["schemas"]["WorkflowCompoundCondition"];
        /** @description The details of the workflows to create. */
        WorkflowCreate: {
            /** @description The description of the workflow to create. */
            description?: string;
            /** @description The name of the workflow to create. */
            name: string;
            startPointLayout?: components["schemas"]["WorkflowLayout"];
            /** @description The statuses associated with this workflow. */
            statuses: components["schemas"]["StatusLayoutUpdate"][];
            /** @description The transitions of this workflow. */
            transitions: components["schemas"]["TransitionUpdateDTO"][];
        };
        /** @description The create workflows payload. */
        WorkflowCreateRequest: {
            scope: components["schemas"]["WorkflowScope"];
            /** @description The statuses to associate with the workflows. */
            statuses: components["schemas"]["WorkflowStatusUpdate"][];
            /** @description The details of the workflows to create. */
            workflows: components["schemas"]["WorkflowCreate"][];
        };
        /** @description Details of the created workflows and statuses. */
        WorkflowCreateResponse: {
            /** @description List of created statuses. */
            statuses?: components["schemas"]["JiraWorkflowStatus"][];
            /** @description List of created workflows. */
            workflows?: components["schemas"]["JiraWorkflow"][];
        };
        WorkflowCreateValidateRequest: {
            payload: components["schemas"]["WorkflowCreateRequest"];
            validationOptions?: components["schemas"]["ValidationOptionsForCreate"];
        };
        /** @description A reference to the location of the error. This will be null if the error does not refer to a specific element. */
        WorkflowElementReference: {
            /** @description A property key. */
            propertyKey?: string;
            /** @description A rule ID. */
            ruleId?: string;
            statusMappingReference?: components["schemas"]["ProjectAndIssueTypePair"];
            /** @description A status reference. */
            statusReference?: string;
            /** @description A transition ID. */
            transitionId?: string;
        };
        /** @description Properties that identify a workflow. */
        WorkflowId: {
            /** @description Whether the workflow is in the draft state. */
            draft: boolean;
            /** @description The name of the workflow. */
            name: string;
        };
        /** @description The classic workflow identifiers. */
        WorkflowIDs: {
            /** @description The entity ID of the workflow. */
            entityId?: string;
            /** @description The name of the workflow. */
            name: string;
        };
        /** @description The starting point for the statuses in the workflow. */
        WorkflowLayout: {
            /**
             * Format: double
             * @description The x axis location.
             */
            x?: number;
            /**
             * Format: double
             * @description The y axis location.
             */
            y?: number;
        } | null;
        /** @description The workflow metadata and issue type IDs which use this workflow. */
        WorkflowMetadataAndIssueTypeRestModel: {
            /** @description The list of issue type IDs for the mapping. */
            issueTypeIds: string[];
            workflow: components["schemas"]["WorkflowMetadataRestModel"];
        };
        /** @description Workflow metadata and usage detail. */
        WorkflowMetadataRestModel: {
            /** @description The description of the workflow. */
            description: string;
            /** @description The ID of the workflow. */
            id: string;
            /** @description The name of the workflow. */
            name: string;
            /** @description Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the workflows in the workflow scheme. */
            usage: components["schemas"]["SimpleUsage"][];
            version: components["schemas"]["DocumentVersion"];
        };
        /** @description Operations allowed on a workflow */
        WorkflowOperations: {
            /** @description Whether the workflow can be deleted. */
            canDelete: boolean;
            /** @description Whether the workflow can be updated. */
            canEdit: boolean;
        };
        WorkflowReadRequest: {
            /** @description The list of projects and issue types to query. */
            projectAndIssueTypes?: components["schemas"]["ProjectAndIssueTypePair"][];
            /** @description The list of workflow IDs to query. */
            workflowIds?: string[];
            /** @description The list of workflow names to query. */
            workflowNames?: string[];
        };
        /** @description Details of workflows and related statuses. */
        WorkflowReadResponse: {
            /** @description List of statuses. */
            statuses?: components["schemas"]["JiraWorkflowStatus"][];
            /** @description List of workflows. */
            workflows?: components["schemas"]["JiraWorkflow"][];
        };
        /** @description The statuses referenced in the workflow. */
        WorkflowReferenceStatus: {
            approvalConfiguration?: components["schemas"]["ApprovalConfiguration"];
            /** @description Indicates if the status is deprecated. */
            deprecated?: boolean;
            layout?: components["schemas"]["WorkflowStatusLayout"];
            /** @description The properties associated with the status. */
            properties?: {
                [key: string]: string;
            };
            /** @description The reference of the status. */
            statusReference?: string;
        };
        /** @description The configuration of the rule. */
        WorkflowRuleConfiguration: {
            /** @description The ID of the rule. */
            id?: string | null;
            /** @description The parameters related to the rule. */
            parameters?: {
                [key: string]: string;
            };
            /** @description The rule key of the rule. */
            ruleKey: string;
        } | null;
        /** @description A collection of transition rules. */
        WorkflowRules: {
            conditionsTree?: components["schemas"]["WorkflowCondition"];
            /** @description The workflow post functions. */
            postFunctions?: components["schemas"]["WorkflowTransitionRule"][];
            /** @description The workflow validators. */
            validators?: components["schemas"]["WorkflowTransitionRule"][];
        };
        /** @description Details of the workflow and its transition rules. */
        WorkflowRulesSearch: {
            /**
             * @description Use expand to include additional information in the response. This parameter accepts `transition` which, for each rule, returns information about the transition the rule is assigned to.
             * @example transition
             */
            expand?: string;
            /** @description The list of workflow rule IDs. */
            ruleIds: string[];
            /**
             * Format: uuid
             * @description The workflow ID.
             * @example a498d711-685d-428d-8c3e-bc03bb450ea7
             */
            workflowEntityId: string;
        };
        /** @description Details of workflow transition rules. */
        WorkflowRulesSearchDetails: {
            /** @description List of workflow rule IDs that do not belong to the workflow or can not be found. */
            invalidRules?: string[];
            /** @description List of valid workflow transition rules. */
            validRules?: components["schemas"]["WorkflowTransitionRules"][];
            /**
             * Format: uuid
             * @description The workflow ID.
             * @example a498d711-685d-428d-8c3e-bc03bb450ea7
             */
            workflowEntityId?: string;
        };
        /** @description Details about a workflow scheme. */
        WorkflowScheme: {
            /** @description The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*. */
            defaultWorkflow?: string;
            /** @description The description of the workflow scheme. */
            description?: string;
            /** @description Whether the workflow scheme is a draft or not. */
            readonly draft?: boolean;
            /**
             * Format: int64
             * @description The ID of the workflow scheme.
             */
            readonly id?: number;
            /** @description The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. */
            issueTypeMappings?: {
                [key: string]: string;
            };
            /** @description The issue types available in Jira. */
            readonly issueTypes?: {
                [key: string]: components["schemas"]["IssueTypeDetails"];
            };
            /** @description The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. */
            readonly lastModified?: string;
            /** @description The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. */
            readonly lastModifiedUser?: components["schemas"]["User"];
            /** @description The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme. */
            name?: string;
            /** @description For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. */
            readonly originalDefaultWorkflow?: string;
            /** @description For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. */
            readonly originalIssueTypeMappings?: {
                [key: string]: string;
            };
            /** Format: uri */
            readonly self?: string;
            /** @description Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:
             *
             *      *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.
             *      *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.
             *      *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.
             *
             *     Defaults to `false`. */
            updateDraftIfNeeded?: boolean;
        };
        /** @description The explicit association between issue types and a workflow in a workflow scheme. */
        WorkflowSchemeAssociation: {
            /** @description The issue types assigned to the workflow. */
            issueTypeIds: string[];
            /** @description The ID of the workflow. */
            workflowId: string;
        };
        /** @description A workflow scheme along with a list of projects that use it. */
        WorkflowSchemeAssociations: {
            /** @description The list of projects that use the workflow scheme. */
            projectIds: string[];
            /** @description The workflow scheme. */
            workflowScheme: components["schemas"]["WorkflowScheme"];
        };
        /** @description The ID and the name of the workflow scheme. */
        WorkflowSchemeIdName: {
            /** @description The ID of the workflow scheme. */
            id: string;
            /** @description The name of the workflow scheme. */
            name: string;
        };
        /** @description An associated workflow scheme and project. */
        WorkflowSchemeProjectAssociation: {
            /** @description The ID of the project. */
            projectId: string;
            /** @description The ID of the workflow scheme. If the workflow scheme ID is `null`, the operation assigns the default workflow scheme. */
            workflowSchemeId?: string;
        };
        /** @description The workflow scheme read request body. */
        WorkflowSchemeReadRequest: {
            /** @description The list of project IDs to query. */
            projectIds?: (string | null)[] | null;
            /** @description The list of workflow scheme IDs to query. */
            workflowSchemeIds?: (string | null)[] | null;
        };
        WorkflowSchemeReadResponse: {
            defaultWorkflow?: components["schemas"]["WorkflowMetadataRestModel"];
            /** @description The description of the workflow scheme. */
            description?: string | null;
            /** @description The ID of the workflow scheme. */
            id: string;
            /** @description The name of the workflow scheme. */
            name: string;
            /** @description The IDs of projects using the workflow scheme. */
            projectIdsUsingScheme: string[];
            scope: components["schemas"]["WorkflowScope"];
            /** @description Indicates if there's an [asynchronous task](#async-operations) for this workflow scheme. */
            taskId?: string | null;
            version: components["schemas"]["DocumentVersion"];
            /** @description Mappings from workflows to issue types. */
            workflowsForIssueTypes: components["schemas"]["WorkflowMetadataAndIssueTypeRestModel"][];
        };
        /** @description The update workflow scheme payload. */
        WorkflowSchemeUpdateRequest: {
            /** @description The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the `defaultWorkflowId` isn't specified, this is set to *Jira Workflow (jira)*. */
            defaultWorkflowId?: string;
            /** @description The new description for this workflow scheme. */
            description: string;
            /** @description The ID of this workflow scheme. */
            id: string;
            /** @description The new name for this workflow scheme. */
            name: string;
            /** @description Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`. */
            statusMappingsByIssueTypeOverride?: components["schemas"]["MappingsByIssueTypeOverride"][];
            /** @description The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`. */
            statusMappingsByWorkflows?: components["schemas"]["MappingsByWorkflow"][];
            version: components["schemas"]["DocumentVersion"];
            /** @description Mappings from workflows to issue types. */
            workflowsForIssueTypes?: components["schemas"]["WorkflowSchemeAssociation"][];
        } & {
            [key: string]: unknown;
        };
        /** @description The request payload to get the required mappings for updating a workflow scheme. */
        WorkflowSchemeUpdateRequiredMappingsRequest: {
            /** @description The ID of the new default workflow for this workflow scheme. Only used in global-scoped workflow schemes. If it isn't specified, is set to *Jira Workflow (jira)*. */
            defaultWorkflowId?: string | null;
            /** @description The ID of the workflow scheme. */
            id: string;
            /** @description The new workflow to issue type mappings for this workflow scheme. */
            workflowsForIssueTypes: components["schemas"]["WorkflowSchemeAssociation"][];
        };
        WorkflowSchemeUpdateRequiredMappingsResponse: {
            /** @description The details of the statuses in the associated workflows. */
            statuses?: components["schemas"]["StatusMetadata"][];
            /** @description The statuses associated with each workflow. */
            statusesPerWorkflow?: components["schemas"]["StatusesPerWorkflow"][];
            /** @description The list of required status mappings by issue type. */
            statusMappingsByIssueTypes?: components["schemas"]["RequiredMappingByIssueType"][];
            /** @description The list of required status mappings by workflow. */
            statusMappingsByWorkflows?: components["schemas"]["RequiredMappingByWorkflows"][];
        };
        /** @description The scope of the workflow. */
        WorkflowScope: {
            project?: components["schemas"]["ProjectId"];
            /**
             * @description The scope of the workflow. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
             * @enum {string}
             */
            type?: "PROJECT" | "GLOBAL";
        };
        /** @description Page of items, including workflows and related statuses. */
        WorkflowSearchResponse: {
            /** @description Whether this is the last page. */
            isLast?: boolean;
            /**
             * Format: int32
             * @description The maximum number of items that could be returned.
             */
            maxResults?: number;
            /** @description If there is another page of results, the URL of the next page. */
            nextPage?: string;
            /** @description The URL of the page. */
            self?: string;
            /**
             * Format: int64
             * @description The index of the first item returned.
             */
            startAt?: number;
            /** @description List of statuses. */
            statuses?: components["schemas"]["JiraWorkflowStatus"][];
            /**
             * Format: int64
             * @description The number of items returned.
             */
            total?: number;
            /** @description List of workflows. */
            values?: components["schemas"]["JiraWorkflow"][];
        };
        /** @description A workflow transition rule condition. This object returns `nodeType` as `simple`. */
        WorkflowSimpleCondition: {
            /** @description EXPERIMENTAL. The configuration of the transition rule. */
            configuration?: Record<string, never>;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            nodeType: "simple";
            /** @description The type of the transition rule. */
            type: string;
        };
        /** @description Details of a workflow status. */
        WorkflowStatus: {
            /** @description The ID of the issue status. */
            id: string;
            /** @description The name of the status in the workflow. */
            name: string;
            /** @description Additional properties that modify the behavior of issues in this status. Supports the properties `jira.issue.editable` and `issueEditable` (deprecated) that indicate whether issues are editable. */
            properties?: {
                [key: string]: unknown;
            };
        };
        /**
         * @deprecated
         * @description The status reference and port that a transition is connected to.
         */
        WorkflowStatusAndPort: {
            /**
             * Format: int32
             * @description The port the transition is connected to this status.
             */
            port?: number | null;
            /** @description The reference of this status. */
            statusReference?: string;
        } | null;
        /** @description The x and y location of the status in the workflow. */
        WorkflowStatusLayout: {
            /**
             * Format: double
             * @description The x axis location.
             */
            x?: number | null;
            /**
             * Format: double
             * @description The y axis location.
             */
            y?: number | null;
        } | null;
        /** @description Details of the status being updated. */
        WorkflowStatusUpdate: {
            /** @description The description of the status. */
            description?: string;
            /** @description The ID of the status. */
            id?: string;
            /** @description The name of the status. */
            name: string;
            /**
             * @description The category of the status.
             * @enum {string}
             */
            statusCategory: "TODO" | "IN_PROGRESS" | "DONE";
            /** @description The reference of the status. */
            statusReference: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of workflows and their transition rules to delete. */
        WorkflowsWithTransitionRulesDetails: {
            /** @description The list of workflows with transition rules to delete. */
            workflows: components["schemas"]["WorkflowTransitionRulesDetails"][];
        };
        /** @description A workflow transition. */
        WorkflowTransition: {
            /**
             * Format: int32
             * @description The transition ID.
             */
            id: number;
            /** @description The transition name. */
            name: string;
        };
        /** @description The statuses the transition can start from, and the mapping of ports between the statuses. */
        WorkflowTransitionLinks: {
            /**
             * Format: int32
             * @description The port that the transition starts from.
             */
            fromPort?: number | null;
            /** @description The status that the transition starts from. */
            fromStatusReference?: string | null;
            /**
             * Format: int32
             * @description The port that the transition goes to.
             */
            toPort?: number | null;
        } | null;
        /** @description Details about the server Jira is running on. */
        WorkflowTransitionProperty: {
            /** @description The ID of the transition property. */
            readonly id?: string;
            /** @description The key of the transition property. Also known as the name of the transition property. */
            readonly key?: string;
            /** @description The value of the transition property. */
            value: string;
        } & {
            [key: string]: unknown;
        };
        /** @description A workflow transition rule. */
        WorkflowTransitionRule: {
            /** @description EXPERIMENTAL. The configuration of the transition rule. */
            configuration?: unknown;
            /** @description The type of the transition rule. */
            type: string;
        };
        /** @description A workflow with transition rules. */
        WorkflowTransitionRules: {
            /** @description The list of conditions within the workflow. */
            conditions?: components["schemas"]["AppWorkflowTransitionRule"][];
            /** @description The list of post functions within the workflow. */
            postFunctions?: components["schemas"]["AppWorkflowTransitionRule"][];
            /** @description The list of validators within the workflow. */
            validators?: components["schemas"]["AppWorkflowTransitionRule"][];
            workflowId: components["schemas"]["WorkflowId"];
        };
        /** @description Details about a workflow configuration update request. */
        WorkflowTransitionRulesDetails: {
            workflowId: components["schemas"]["WorkflowId"];
            /** @description The list of connect workflow rule IDs. */
            workflowRuleIds: string[];
        };
        /** @description Details about a workflow configuration update request. */
        WorkflowTransitionRulesUpdate: {
            /** @description The list of workflows with transition rules to update. */
            workflows: components["schemas"]["WorkflowTransitionRules"][];
        };
        /** @description Details of any errors encountered while updating workflow transition rules for a workflow. */
        WorkflowTransitionRulesUpdateErrorDetails: {
            /** @description A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated. */
            ruleUpdateErrors: {
                [key: string]: string[];
            };
            /** @description The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries. */
            updateErrors: string[];
            workflowId: components["schemas"]["WorkflowId"];
        };
        /** @description Details of any errors encountered while updating workflow transition rules. */
        WorkflowTransitionRulesUpdateErrors: {
            /** @description A list of workflows. */
            updateResults: components["schemas"]["WorkflowTransitionRulesUpdateErrorDetails"][];
        };
        /** @description The transitions of the workflow. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination. */
        WorkflowTransitions: {
            /** @description The post-functions of the transition. */
            actions?: components["schemas"]["WorkflowRuleConfiguration"][];
            conditions?: components["schemas"]["ConditionGroupConfiguration"];
            /** @description The custom event ID of the transition. */
            customIssueEventId?: string | null;
            /** @description The description of the transition. */
            description?: string;
            /**
             * @deprecated
             * @description The statuses and ports that the transition can start from. This field is deprecated - use `toStatusReference`/`links` instead.
             */
            from?: components["schemas"]["WorkflowStatusAndPort"][];
            /** @description The ID of the transition. */
            id?: string;
            /** @description The statuses the transition can start from, and the mapping of ports between the statuses. */
            links?: components["schemas"]["WorkflowTransitionLinks"][];
            /** @description The name of the transition. */
            name?: string;
            /** @description The properties of the transition. */
            properties?: {
                [key: string]: string;
            };
            to?: components["schemas"]["WorkflowStatusAndPort"];
            /** @description The status the transition goes to. */
            toStatusReference?: string;
            transitionScreen?: components["schemas"]["WorkflowRuleConfiguration"];
            /** @description The triggers of the transition. */
            triggers?: components["schemas"]["WorkflowTrigger"][];
            /**
             * @description The transition type.
             * @enum {string}
             */
            type?: "INITIAL" | "GLOBAL" | "DIRECTED";
            /** @description The validators of the transition. */
            validators?: components["schemas"]["WorkflowRuleConfiguration"][];
        };
        /** @description The trigger configuration associated with a workflow. */
        WorkflowTrigger: {
            /** @description The ID of the trigger. */
            id?: string;
            /** @description The parameters of the trigger. */
            parameters: {
                [key: string]: string;
            };
            /** @description The rule key of the trigger. */
            ruleKey: string;
        };
        /** @description The details of the workflows to update. */
        WorkflowUpdate: {
            /** @description The mapping of old to new status ID. */
            defaultStatusMappings?: components["schemas"]["StatusMigration"][];
            /** @description The new description for this workflow. */
            description?: string;
            /** @description The ID of this workflow. */
            id: string;
            startPointLayout?: components["schemas"]["WorkflowLayout"];
            /** @description The statuses associated with this workflow. */
            statuses: components["schemas"]["StatusLayoutUpdate"][];
            /** @description The mapping of old to new status ID for a specific project and issue type. */
            statusMappings?: components["schemas"]["StatusMappingDTO"][];
            /** @description The transitions of this workflow. */
            transitions: components["schemas"]["TransitionUpdateDTO"][];
            version: components["schemas"]["DocumentVersion"];
        } & {
            [key: string]: unknown;
        };
        /** @description The update workflows payload. */
        WorkflowUpdateRequest: {
            /** @description The statuses to associate with the workflows. */
            statuses: components["schemas"]["WorkflowStatusUpdate"][];
            /** @description The details of the workflows to update. */
            workflows: components["schemas"]["WorkflowUpdate"][];
        };
        WorkflowUpdateResponse: {
            /** @description List of updated statuses. */
            statuses?: components["schemas"]["JiraWorkflowStatus"][];
            /** @description If there is a [asynchronous task](#async-operations) operation, as a result of this update. */
            taskId?: string | null;
            /** @description List of updated workflows. */
            workflows?: components["schemas"]["JiraWorkflow"][];
        };
        WorkflowUpdateValidateRequestBean: {
            payload: components["schemas"]["WorkflowUpdateRequest"];
            validationOptions?: components["schemas"]["ValidationOptionsForUpdate"];
        };
        /** @description The workflows that use this status. Only available if the `workflowUsages` expand is requested. */
        WorkflowUsages: {
            /** @description Workflow ID. */
            workflowId?: string;
            /** @description Workflow name. */
            workflowName?: string;
        };
        /** @description The details about a workflow validation error. */
        WorkflowValidationError: {
            /** @description An error code. */
            code?: string;
            elementReference?: components["schemas"]["WorkflowElementReference"];
            /**
             * @description The validation error level.
             * @enum {string}
             */
            level?: "WARNING" | "ERROR";
            /** @description An error message. */
            message?: string;
            /**
             * @description The type of element the error or warning references.
             * @enum {string}
             */
            type?: "RULE" | "STATUS" | "STATUS_LAYOUT" | "STATUS_PROPERTY" | "WORKFLOW" | "TRANSITION" | "TRANSITION_PROPERTY" | "SCOPE" | "STATUS_MAPPING" | "TRIGGER";
        };
        WorkflowValidationErrorList: {
            /** @description The list of validation errors. */
            errors?: components["schemas"]["WorkflowValidationError"][];
        };
        /** @description Details of a worklog. */
        Worklog: {
            /** @description Details of the user who created the worklog. */
            readonly author?: components["schemas"]["UserDetails"];
            /** @description A comment about the worklog in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). Optional when creating or updating a worklog. */
            comment?: unknown;
            /**
             * Format: date-time
             * @description The datetime on which the worklog was created.
             */
            readonly created?: string;
            /** @description The ID of the worklog record. */
            readonly id?: string;
            /** @description The ID of the issue this worklog is for. */
            readonly issueId?: string;
            /** @description Details of properties for the worklog. Optional when creating or updating a worklog. */
            properties?: components["schemas"]["EntityProperty"][];
            /**
             * Format: uri
             * @description The URL of the worklog item.
             */
            readonly self?: string;
            /**
             * Format: date-time
             * @description The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
             */
            started?: string;
            /** @description The time spent working on the issue as days (\#d), hours (\#h), or minutes (\#m or \#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided. */
            timeSpent?: string;
            /**
             * Format: int64
             * @description The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
             */
            timeSpentSeconds?: number;
            /** @description Details of the user who last updated the worklog. */
            readonly updateAuthor?: components["schemas"]["UserDetails"];
            /**
             * Format: date-time
             * @description The datetime on which the worklog was last updated.
             */
            readonly updated?: string;
            /** @description Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog. */
            visibility?: components["schemas"]["Visibility"];
        } & {
            [key: string]: unknown;
        };
        WorklogIdsRequestBean: {
            /** @description A list of worklog IDs. */
            ids: number[];
        };
        WorklogsMoveRequestBean: {
            /** @description A list of worklog IDs. */
            ids?: number[];
            /** @description The issue id or key of the destination issue */
            issueIdOrKey?: string;
        };
        WorkManagementNavigationInfo: {
            boardName?: string;
        };
        /** @description Details about data policy. */
        WorkspaceDataPolicy: {
            /** @description Whether the workspace contains any content inaccessible to the requesting application. */
            readonly anyContentBlocked?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type ActorInputBean = components['schemas']['ActorInputBean'];
export type ActorsMap = components['schemas']['ActorsMap'];
export type AddAtlassianTeamRequest = components['schemas']['AddAtlassianTeamRequest'];
export type AddFieldBean = components['schemas']['AddFieldBean'];
export type AddGroupBean = components['schemas']['AddGroupBean'];
export type AddNotificationsDetails = components['schemas']['AddNotificationsDetails'];
export type AddSecuritySchemeLevelsRequestBean = components['schemas']['AddSecuritySchemeLevelsRequestBean'];
export type AnnouncementBannerConfiguration = components['schemas']['AnnouncementBannerConfiguration'];
export type AnnouncementBannerConfigurationUpdate = components['schemas']['AnnouncementBannerConfigurationUpdate'];
export type Application = components['schemas']['Application'];
export type ApplicationProperty = components['schemas']['ApplicationProperty'];
export type ApplicationRole = components['schemas']['ApplicationRole'];
export type ApprovalConfiguration = components['schemas']['ApprovalConfiguration'];
export type AppWorkflowTransitionRule = components['schemas']['AppWorkflowTransitionRule'];
export type ArchivedIssuesFilterRequest = components['schemas']['ArchivedIssuesFilterRequest'];
export type ArchiveIssueAsyncRequest = components['schemas']['ArchiveIssueAsyncRequest'];
export type AssociatedItemBean = components['schemas']['AssociatedItemBean'];
export type AssociateFieldConfigurationsWithIssueTypesRequest = components['schemas']['AssociateFieldConfigurationsWithIssueTypesRequest'];
export type AssociateSecuritySchemeWithProjectDetails = components['schemas']['AssociateSecuritySchemeWithProjectDetails'];
export type Attachment = components['schemas']['Attachment'];
export type AttachmentArchive = components['schemas']['AttachmentArchive'];
export type AttachmentArchiveEntry = components['schemas']['AttachmentArchiveEntry'];
export type AttachmentArchiveImpl = components['schemas']['AttachmentArchiveImpl'];
export type AttachmentArchiveItemReadable = components['schemas']['AttachmentArchiveItemReadable'];
export type AttachmentArchiveMetadataReadable = components['schemas']['AttachmentArchiveMetadataReadable'];
export type AttachmentMetadata = components['schemas']['AttachmentMetadata'];
export type AttachmentSettings = components['schemas']['AttachmentSettings'];
export type AuditRecordBean = components['schemas']['AuditRecordBean'];
export type AuditRecords = components['schemas']['AuditRecords'];
export type AutoCompleteSuggestion = components['schemas']['AutoCompleteSuggestion'];
export type AutoCompleteSuggestions = components['schemas']['AutoCompleteSuggestions'];
export type AvailableDashboardGadget = components['schemas']['AvailableDashboardGadget'];
export type AvailableDashboardGadgetsResponse = components['schemas']['AvailableDashboardGadgetsResponse'];
export type AvailableWorkflowConnectRule = components['schemas']['AvailableWorkflowConnectRule'];
export type AvailableWorkflowForgeRule = components['schemas']['AvailableWorkflowForgeRule'];
export type AvailableWorkflowSystemRule = components['schemas']['AvailableWorkflowSystemRule'];
export type AvailableWorkflowTriggers = components['schemas']['AvailableWorkflowTriggers'];
export type AvailableWorkflowTriggerTypes = components['schemas']['AvailableWorkflowTriggerTypes'];
export type Avatar = components['schemas']['Avatar'];
export type Avatars = components['schemas']['Avatars'];
export type AvatarUrlsBean = components['schemas']['AvatarUrlsBean'];
export type BulkChangelogRequestBean = components['schemas']['BulkChangelogRequestBean'];
export type BulkChangelogResponseBean = components['schemas']['BulkChangelogResponseBean'];
export type BulkChangeOwnerDetails = components['schemas']['BulkChangeOwnerDetails'];
export type BulkContextualConfiguration = components['schemas']['BulkContextualConfiguration'];
export type BulkCustomFieldOptionCreateRequest = components['schemas']['BulkCustomFieldOptionCreateRequest'];
export type BulkCustomFieldOptionUpdateRequest = components['schemas']['BulkCustomFieldOptionUpdateRequest'];
export type BulkEditActionError = components['schemas']['BulkEditActionError'];
export type BulkEditGetFields = components['schemas']['BulkEditGetFields'];
export type BulkEditShareableEntityRequest = components['schemas']['BulkEditShareableEntityRequest'];
export type BulkEditShareableEntityResponse = components['schemas']['BulkEditShareableEntityResponse'];
export type BulkFetchIssueRequestBean = components['schemas']['BulkFetchIssueRequestBean'];
export type BulkIssueIsWatching = components['schemas']['BulkIssueIsWatching'];
export type BulkIssuePropertyUpdateRequest = components['schemas']['BulkIssuePropertyUpdateRequest'];
export type BulkIssueResults = components['schemas']['BulkIssueResults'];
export type BulkOperationErrorResponse = components['schemas']['BulkOperationErrorResponse'];
export type BulkOperationErrorResult = components['schemas']['BulkOperationErrorResult'];
export type BulkOperationProgress = components['schemas']['BulkOperationProgress'];
export type BulkPermissionGrants = components['schemas']['BulkPermissionGrants'];
export type BulkPermissionsRequestBean = components['schemas']['BulkPermissionsRequestBean'];
export type BulkProjectPermissionGrants = components['schemas']['BulkProjectPermissionGrants'];
export type BulkProjectPermissions = components['schemas']['BulkProjectPermissions'];
export type BulkTransitionGetAvailableTransitions = components['schemas']['BulkTransitionGetAvailableTransitions'];
export type BulkTransitionSubmitInput = components['schemas']['BulkTransitionSubmitInput'];
export type ChangeDetails = components['schemas']['ChangeDetails'];
export type ChangedValueBean = components['schemas']['ChangedValueBean'];
export type ChangedWorklog = components['schemas']['ChangedWorklog'];
export type ChangedWorklogs = components['schemas']['ChangedWorklogs'];
export type ChangeFilterOwner = components['schemas']['ChangeFilterOwner'];
export type Changelog = components['schemas']['Changelog'];
export type ColumnItem = components['schemas']['ColumnItem'];
export type ColumnRequestBody = components['schemas']['ColumnRequestBody'];
export type Comment = components['schemas']['Comment'];
export type ComponentIssuesCount = components['schemas']['ComponentIssuesCount'];
export type ComponentJsonBean = components['schemas']['ComponentJsonBean'];
export type ComponentWithIssueCount = components['schemas']['ComponentWithIssueCount'];
export type CompoundClause = components['schemas']['CompoundClause'];
export type ConditionGroupConfiguration = components['schemas']['ConditionGroupConfiguration'];
export type ConditionGroupUpdate = components['schemas']['ConditionGroupUpdate'];
export type Configuration = components['schemas']['Configuration'];
export type ConfigurationsListParameters = components['schemas']['ConfigurationsListParameters'];
export type ConnectCustomFieldValue = components['schemas']['ConnectCustomFieldValue'];
export type ConnectCustomFieldValues = components['schemas']['ConnectCustomFieldValues'];
export type ConnectModule = components['schemas']['ConnectModule'];
export type ConnectModules = components['schemas']['ConnectModules'];
export type ConnectWorkflowTransitionRule = components['schemas']['ConnectWorkflowTransitionRule'];
export type ContainerForProjectFeatures = components['schemas']['ContainerForProjectFeatures'];
export type ContainerForRegisteredWebhooks = components['schemas']['ContainerForRegisteredWebhooks'];
export type ContainerForWebhookIDs = components['schemas']['ContainerForWebhookIDs'];
export type ContainerOfWorkflowSchemeAssociations = components['schemas']['ContainerOfWorkflowSchemeAssociations'];
export type Context = components['schemas']['Context'];
export type ContextForProjectAndIssueType = components['schemas']['ContextForProjectAndIssueType'];
export type ContextualConfiguration = components['schemas']['ContextualConfiguration'];
export type ConvertedJqlQueries = components['schemas']['ConvertedJQLQueries'];
export type CreateCrossProjectReleaseRequest = components['schemas']['CreateCrossProjectReleaseRequest'];
export type CreateCustomFieldContext = components['schemas']['CreateCustomFieldContext'];
export type CreateCustomFieldRequest = components['schemas']['CreateCustomFieldRequest'];
export type CreateDateFieldRequest = components['schemas']['CreateDateFieldRequest'];
export type CreatedIssue = components['schemas']['CreatedIssue'];
export type CreatedIssues = components['schemas']['CreatedIssues'];
export type CreateExclusionRulesRequest = components['schemas']['CreateExclusionRulesRequest'];
export type CreateIssueSecuritySchemeDetails = components['schemas']['CreateIssueSecuritySchemeDetails'];
export type CreateIssueSourceRequest = components['schemas']['CreateIssueSourceRequest'];
export type CreateNotificationSchemeDetails = components['schemas']['CreateNotificationSchemeDetails'];
export type CreatePermissionHolderRequest = components['schemas']['CreatePermissionHolderRequest'];
export type CreatePermissionRequest = components['schemas']['CreatePermissionRequest'];
export type CreatePlanOnlyTeamRequest = components['schemas']['CreatePlanOnlyTeamRequest'];
export type CreatePlanRequest = components['schemas']['CreatePlanRequest'];
export type CreatePriorityDetails = components['schemas']['CreatePriorityDetails'];
export type CreatePrioritySchemeDetails = components['schemas']['CreatePrioritySchemeDetails'];
export type CreateProjectDetails = components['schemas']['CreateProjectDetails'];
export type CreateResolutionDetails = components['schemas']['CreateResolutionDetails'];
export type CreateSchedulingRequest = components['schemas']['CreateSchedulingRequest'];
export type CreateUiModificationDetails = components['schemas']['CreateUiModificationDetails'];
export type CreateUpdateRoleRequestBean = components['schemas']['CreateUpdateRoleRequestBean'];
export type CreateWorkflowCondition = components['schemas']['CreateWorkflowCondition'];
export type CreateWorkflowDetails = components['schemas']['CreateWorkflowDetails'];
export type CreateWorkflowStatusDetails = components['schemas']['CreateWorkflowStatusDetails'];
export type CreateWorkflowTransitionDetails = components['schemas']['CreateWorkflowTransitionDetails'];
export type CreateWorkflowTransitionRule = components['schemas']['CreateWorkflowTransitionRule'];
export type CreateWorkflowTransitionRulesDetails = components['schemas']['CreateWorkflowTransitionRulesDetails'];
export type CreateWorkflowTransitionScreenDetails = components['schemas']['CreateWorkflowTransitionScreenDetails'];
export type CustomContextVariable = components['schemas']['CustomContextVariable'];
export type CustomFieldConfigurations = components['schemas']['CustomFieldConfigurations'];
export type CustomFieldContext = components['schemas']['CustomFieldContext'];
export type CustomFieldContextDefaultValue = components['schemas']['CustomFieldContextDefaultValue'];
export type CustomFieldContextDefaultValueCascadingOption = components['schemas']['CustomFieldContextDefaultValueCascadingOption'];
export type CustomFieldContextDefaultValueDate = components['schemas']['CustomFieldContextDefaultValueDate'];
export type CustomFieldContextDefaultValueDateTime = components['schemas']['CustomFieldContextDefaultValueDateTime'];
export type CustomFieldContextDefaultValueFloat = components['schemas']['CustomFieldContextDefaultValueFloat'];
export type CustomFieldContextDefaultValueForgeDateTimeField = components['schemas']['CustomFieldContextDefaultValueForgeDateTimeField'];
export type CustomFieldContextDefaultValueForgeGroupField = components['schemas']['CustomFieldContextDefaultValueForgeGroupField'];
export type CustomFieldContextDefaultValueForgeMultiGroupField = components['schemas']['CustomFieldContextDefaultValueForgeMultiGroupField'];
export type CustomFieldContextDefaultValueForgeMultiStringField = components['schemas']['CustomFieldContextDefaultValueForgeMultiStringField'];
export type CustomFieldContextDefaultValueForgeMultiUserField = components['schemas']['CustomFieldContextDefaultValueForgeMultiUserField'];
export type CustomFieldContextDefaultValueForgeNumberField = components['schemas']['CustomFieldContextDefaultValueForgeNumberField'];
export type CustomFieldContextDefaultValueForgeObjectField = components['schemas']['CustomFieldContextDefaultValueForgeObjectField'];
export type CustomFieldContextDefaultValueForgeStringField = components['schemas']['CustomFieldContextDefaultValueForgeStringField'];
export type CustomFieldContextDefaultValueForgeUserField = components['schemas']['CustomFieldContextDefaultValueForgeUserField'];
export type CustomFieldContextDefaultValueLabels = components['schemas']['CustomFieldContextDefaultValueLabels'];
export type CustomFieldContextDefaultValueMultipleGroupPicker = components['schemas']['CustomFieldContextDefaultValueMultipleGroupPicker'];
export type CustomFieldContextDefaultValueMultipleOption = components['schemas']['CustomFieldContextDefaultValueMultipleOption'];
export type CustomFieldContextDefaultValueMultipleVersionPicker = components['schemas']['CustomFieldContextDefaultValueMultipleVersionPicker'];
export type CustomFieldContextDefaultValueMultiUserPicker = components['schemas']['CustomFieldContextDefaultValueMultiUserPicker'];
export type CustomFieldContextDefaultValueProject = components['schemas']['CustomFieldContextDefaultValueProject'];
export type CustomFieldContextDefaultValueReadOnly = components['schemas']['CustomFieldContextDefaultValueReadOnly'];
export type CustomFieldContextDefaultValueSingleGroupPicker = components['schemas']['CustomFieldContextDefaultValueSingleGroupPicker'];
export type CustomFieldContextDefaultValueSingleOption = components['schemas']['CustomFieldContextDefaultValueSingleOption'];
export type CustomFieldContextDefaultValueSingleVersionPicker = components['schemas']['CustomFieldContextDefaultValueSingleVersionPicker'];
export type CustomFieldContextDefaultValueTextArea = components['schemas']['CustomFieldContextDefaultValueTextArea'];
export type CustomFieldContextDefaultValueTextField = components['schemas']['CustomFieldContextDefaultValueTextField'];
export type CustomFieldContextDefaultValueUpdate = components['schemas']['CustomFieldContextDefaultValueUpdate'];
export type CustomFieldContextDefaultValueUrl = components['schemas']['CustomFieldContextDefaultValueURL'];
export type CustomFieldContextOption = components['schemas']['CustomFieldContextOption'];
export type CustomFieldContextProjectMapping = components['schemas']['CustomFieldContextProjectMapping'];
export type CustomFieldContextSingleUserPickerDefaults = components['schemas']['CustomFieldContextSingleUserPickerDefaults'];
export type CustomFieldContextUpdateDetails = components['schemas']['CustomFieldContextUpdateDetails'];
export type CustomFieldCreatedContextOptionsList = components['schemas']['CustomFieldCreatedContextOptionsList'];
export type CustomFieldDefinitionJsonBean = components['schemas']['CustomFieldDefinitionJsonBean'];
export type CustomFieldOption = components['schemas']['CustomFieldOption'];
export type CustomFieldOptionCreate = components['schemas']['CustomFieldOptionCreate'];
export type CustomFieldOptionUpdate = components['schemas']['CustomFieldOptionUpdate'];
export type CustomFieldReplacement = components['schemas']['CustomFieldReplacement'];
export type CustomFieldUpdatedContextOptionsList = components['schemas']['CustomFieldUpdatedContextOptionsList'];
export type CustomFieldValueUpdate = components['schemas']['CustomFieldValueUpdate'];
export type CustomFieldValueUpdateDetails = components['schemas']['CustomFieldValueUpdateDetails'];
export type Dashboard = components['schemas']['Dashboard'];
export type DashboardDetails = components['schemas']['DashboardDetails'];
export type DashboardGadget = components['schemas']['DashboardGadget'];
export type DashboardGadgetPosition = components['schemas']['DashboardGadgetPosition'];
export type DashboardGadgetResponse = components['schemas']['DashboardGadgetResponse'];
export type DashboardGadgetSettings = components['schemas']['DashboardGadgetSettings'];
export type DashboardGadgetUpdateRequest = components['schemas']['DashboardGadgetUpdateRequest'];
export type DataClassificationLevelsBean = components['schemas']['DataClassificationLevelsBean'];
export type DataClassificationTagBean = components['schemas']['DataClassificationTagBean'];
export type DateRangeFilterRequest = components['schemas']['DateRangeFilterRequest'];
export type DefaultLevelValue = components['schemas']['DefaultLevelValue'];
export type DefaultShareScope = components['schemas']['DefaultShareScope'];
export type DefaultWorkflow = components['schemas']['DefaultWorkflow'];
export type DeleteAndReplaceVersionBean = components['schemas']['DeleteAndReplaceVersionBean'];
export type DeprecatedWorkflow = components['schemas']['DeprecatedWorkflow'];
export type DetailedErrorCollection = components['schemas']['DetailedErrorCollection'];
export type DocumentVersion = components['schemas']['DocumentVersion'];
export type DuplicatePlanRequest = components['schemas']['DuplicatePlanRequest'];
export type EntityProperty = components['schemas']['EntityProperty'];
export type EntityPropertyDetails = components['schemas']['EntityPropertyDetails'];
export type Error = components['schemas']['Error'];
export type ErrorCollection = components['schemas']['ErrorCollection'];
export type ErrorCollections = components['schemas']['ErrorCollections'];
export type ErrorMessage = components['schemas']['ErrorMessage'];
export type Errors = components['schemas']['Errors'];
export type EventNotification = components['schemas']['EventNotification'];
export type ExpandPrioritySchemeBean = components['schemas']['ExpandPrioritySchemeBean'];
export type ExpandPrioritySchemePage = components['schemas']['ExpandPrioritySchemePage'];
export type ExportArchivedIssuesTaskProgressResponse = components['schemas']['ExportArchivedIssuesTaskProgressResponse'];
export type FailedWebhook = components['schemas']['FailedWebhook'];
export type FailedWebhooks = components['schemas']['FailedWebhooks'];
export type Field = components['schemas']['Field'];
export type FieldChangedClause = components['schemas']['FieldChangedClause'];
export type FieldConfiguration = components['schemas']['FieldConfiguration'];
export type FieldConfigurationDetails = components['schemas']['FieldConfigurationDetails'];
export type FieldConfigurationIssueTypeItem = components['schemas']['FieldConfigurationIssueTypeItem'];
export type FieldConfigurationItem = components['schemas']['FieldConfigurationItem'];
export type FieldConfigurationItemsDetails = components['schemas']['FieldConfigurationItemsDetails'];
export type FieldConfigurationScheme = components['schemas']['FieldConfigurationScheme'];
export type FieldConfigurationSchemeProjectAssociation = components['schemas']['FieldConfigurationSchemeProjectAssociation'];
export type FieldConfigurationSchemeProjects = components['schemas']['FieldConfigurationSchemeProjects'];
export type FieldConfigurationToIssueTypeMapping = components['schemas']['FieldConfigurationToIssueTypeMapping'];
export type FieldCreateMetadata = components['schemas']['FieldCreateMetadata'];
export type FieldDetails = components['schemas']['FieldDetails'];
export type FieldLastUsed = components['schemas']['FieldLastUsed'];
export type FieldMetadata = components['schemas']['FieldMetadata'];
export type FieldReferenceData = components['schemas']['FieldReferenceData'];
export type Fields = components['schemas']['Fields'];
export type FieldUpdateOperation = components['schemas']['FieldUpdateOperation'];
export type FieldValueClause = components['schemas']['FieldValueClause'];
export type FieldWasClause = components['schemas']['FieldWasClause'];
export type Filter = components['schemas']['Filter'];
export type FilterDetails = components['schemas']['FilterDetails'];
export type FilterSubscription = components['schemas']['FilterSubscription'];
export type FilterSubscriptionsList = components['schemas']['FilterSubscriptionsList'];
export type FoundGroup = components['schemas']['FoundGroup'];
export type FoundGroups = components['schemas']['FoundGroups'];
export type FoundUsers = components['schemas']['FoundUsers'];
export type FoundUsersAndGroups = components['schemas']['FoundUsersAndGroups'];
export type FunctionOperand = components['schemas']['FunctionOperand'];
export type FunctionReferenceData = components['schemas']['FunctionReferenceData'];
export type GetAtlassianTeamResponse = components['schemas']['GetAtlassianTeamResponse'];
export type GetCrossProjectReleaseResponse = components['schemas']['GetCrossProjectReleaseResponse'];
export type GetCustomFieldResponse = components['schemas']['GetCustomFieldResponse'];
export type GetDateFieldResponse = components['schemas']['GetDateFieldResponse'];
export type GetExclusionRulesResponse = components['schemas']['GetExclusionRulesResponse'];
export type GetIssueSourceResponse = components['schemas']['GetIssueSourceResponse'];
export type GetPermissionHolderResponse = components['schemas']['GetPermissionHolderResponse'];
export type GetPermissionResponse = components['schemas']['GetPermissionResponse'];
export type GetPlanOnlyTeamResponse = components['schemas']['GetPlanOnlyTeamResponse'];
export type GetPlanResponse = components['schemas']['GetPlanResponse'];
export type GetPlanResponseForPage = components['schemas']['GetPlanResponseForPage'];
export type GetSchedulingResponse = components['schemas']['GetSchedulingResponse'];
export type GetTeamResponseForPage = components['schemas']['GetTeamResponseForPage'];
export type GlobalScopeBean = components['schemas']['GlobalScopeBean'];
export type Group = components['schemas']['Group'];
export type GroupDetails = components['schemas']['GroupDetails'];
export type GroupLabel = components['schemas']['GroupLabel'];
export type GroupName = components['schemas']['GroupName'];
export type HealthCheckResult = components['schemas']['HealthCheckResult'];
export type Hierarchy = components['schemas']['Hierarchy'];
export type HistoryMetadata = components['schemas']['HistoryMetadata'];
export type HistoryMetadataParticipant = components['schemas']['HistoryMetadataParticipant'];
export type Icon = components['schemas']['Icon'];
export type IconBean = components['schemas']['IconBean'];
export type IdBean = components['schemas']['IdBean'];
export type IdOrKeyBean = components['schemas']['IdOrKeyBean'];
export type IdSearchRequestBean = components['schemas']['IdSearchRequestBean'];
export type IdSearchResults = components['schemas']['IdSearchResults'];
export type IncludedFields = components['schemas']['IncludedFields'];
export type InputStreamSource = components['schemas']['InputStreamSource'];
export type IssueArchivalSyncRequest = components['schemas']['IssueArchivalSyncRequest'];
export type IssueArchivalSyncResponse = components['schemas']['IssueArchivalSyncResponse'];
export type IssueBean = components['schemas']['IssueBean'];
export type IssueBulkDeletePayload = components['schemas']['IssueBulkDeletePayload'];
export type IssueBulkEditField = components['schemas']['IssueBulkEditField'];
export type IssueBulkEditPayload = components['schemas']['IssueBulkEditPayload'];
export type IssueBulkMovePayload = components['schemas']['IssueBulkMovePayload'];
export type IssueBulkOperationsFieldOption = components['schemas']['IssueBulkOperationsFieldOption'];
export type IssueBulkTransitionForWorkflow = components['schemas']['IssueBulkTransitionForWorkflow'];
export type IssueBulkTransitionPayload = components['schemas']['IssueBulkTransitionPayload'];
export type IssueChangeLog = components['schemas']['IssueChangeLog'];
export type IssueChangelogIds = components['schemas']['IssueChangelogIds'];
export type IssueCommentListRequestBean = components['schemas']['IssueCommentListRequestBean'];
export type IssueContextVariable = components['schemas']['IssueContextVariable'];
export type IssueCreateMetadata = components['schemas']['IssueCreateMetadata'];
export type IssueEntityProperties = components['schemas']['IssueEntityProperties'];
export type IssueEntityPropertiesForMultiUpdate = components['schemas']['IssueEntityPropertiesForMultiUpdate'];
export type IssueError = components['schemas']['IssueError'];
export type IssueEvent = components['schemas']['IssueEvent'];
export type IssueFieldOption = components['schemas']['IssueFieldOption'];
export type IssueFieldOptionConfiguration = components['schemas']['IssueFieldOptionConfiguration'];
export type IssueFieldOptionCreateBean = components['schemas']['IssueFieldOptionCreateBean'];
export type IssueFieldOptionScopeBean = components['schemas']['IssueFieldOptionScopeBean'];
export type IssueFilterForBulkPropertyDelete = components['schemas']['IssueFilterForBulkPropertyDelete'];
export type IssueFilterForBulkPropertySet = components['schemas']['IssueFilterForBulkPropertySet'];
export type IssueLimitReportRequest = components['schemas']['IssueLimitReportRequest'];
export type IssueLimitReportResponseBean = components['schemas']['IssueLimitReportResponseBean'];
export type IssueLink = components['schemas']['IssueLink'];
export type IssueLinkType = components['schemas']['IssueLinkType'];
export type IssueLinkTypes = components['schemas']['IssueLinkTypes'];
export type IssueList = components['schemas']['IssueList'];
export type IssueMatches = components['schemas']['IssueMatches'];
export type IssueMatchesForJql = components['schemas']['IssueMatchesForJQL'];
export type IssuePickerSuggestions = components['schemas']['IssuePickerSuggestions'];
export type IssuePickerSuggestionsIssueType = components['schemas']['IssuePickerSuggestionsIssueType'];
export type IssuesAndJqlQueries = components['schemas']['IssuesAndJQLQueries'];
export type IssueSecurityLevelMember = components['schemas']['IssueSecurityLevelMember'];
export type IssueSecuritySchemeToProjectMapping = components['schemas']['IssueSecuritySchemeToProjectMapping'];
export type IssuesJqlMetaDataBean = components['schemas']['IssuesJqlMetaDataBean'];
export type IssuesMetaBean = components['schemas']['IssuesMetaBean'];
export type IssuesUpdateBean = components['schemas']['IssuesUpdateBean'];
export type IssueTransition = components['schemas']['IssueTransition'];
export type IssueTransitionStatus = components['schemas']['IssueTransitionStatus'];
export type IssueTypeCreateBean = components['schemas']['IssueTypeCreateBean'];
export type IssueTypeDetails = components['schemas']['IssueTypeDetails'];
export type IssueTypeIds = components['schemas']['IssueTypeIds'];
export type IssueTypeIdsToRemove = components['schemas']['IssueTypeIdsToRemove'];
export type IssueTypeInfo = components['schemas']['IssueTypeInfo'];
export type IssueTypeIssueCreateMetadata = components['schemas']['IssueTypeIssueCreateMetadata'];
export type IssueTypeScheme = components['schemas']['IssueTypeScheme'];
export type IssueTypeSchemeDetails = components['schemas']['IssueTypeSchemeDetails'];
export type IssueTypeSchemeId = components['schemas']['IssueTypeSchemeID'];
export type IssueTypeSchemeMapping = components['schemas']['IssueTypeSchemeMapping'];
export type IssueTypeSchemeProjectAssociation = components['schemas']['IssueTypeSchemeProjectAssociation'];
export type IssueTypeSchemeProjects = components['schemas']['IssueTypeSchemeProjects'];
export type IssueTypeSchemeUpdateDetails = components['schemas']['IssueTypeSchemeUpdateDetails'];
export type IssueTypeScreenScheme = components['schemas']['IssueTypeScreenScheme'];
export type IssueTypeScreenSchemeDetails = components['schemas']['IssueTypeScreenSchemeDetails'];
export type IssueTypeScreenSchemeId = components['schemas']['IssueTypeScreenSchemeId'];
export type IssueTypeScreenSchemeItem = components['schemas']['IssueTypeScreenSchemeItem'];
export type IssueTypeScreenSchemeMapping = components['schemas']['IssueTypeScreenSchemeMapping'];
export type IssueTypeScreenSchemeMappingDetails = components['schemas']['IssueTypeScreenSchemeMappingDetails'];
export type IssueTypeScreenSchemeProjectAssociation = components['schemas']['IssueTypeScreenSchemeProjectAssociation'];
export type IssueTypeScreenSchemesProjects = components['schemas']['IssueTypeScreenSchemesProjects'];
export type IssueTypeScreenSchemeUpdateDetails = components['schemas']['IssueTypeScreenSchemeUpdateDetails'];
export type IssueTypesWorkflowMapping = components['schemas']['IssueTypesWorkflowMapping'];
export type IssueTypeToContextMapping = components['schemas']['IssueTypeToContextMapping'];
export type IssueTypeUpdateBean = components['schemas']['IssueTypeUpdateBean'];
export type IssueTypeWithStatus = components['schemas']['IssueTypeWithStatus'];
export type IssueTypeWorkflowMapping = components['schemas']['IssueTypeWorkflowMapping'];
export type IssueUpdateDetails = components['schemas']['IssueUpdateDetails'];
export type IssueUpdateMetadata = components['schemas']['IssueUpdateMetadata'];
export type JexpEvaluateCtxIssues = components['schemas']['JexpEvaluateCtxIssues'];
export type JexpEvaluateCtxJqlIssues = components['schemas']['JexpEvaluateCtxJqlIssues'];
export type JExpEvaluateIssuesJqlMetaDataBean = components['schemas']['JExpEvaluateIssuesJqlMetaDataBean'];
export type JExpEvaluateIssuesMetaBean = components['schemas']['JExpEvaluateIssuesMetaBean'];
export type JExpEvaluateJiraExpressionResultBean = components['schemas']['JExpEvaluateJiraExpressionResultBean'];
export type JExpEvaluateMetaDataBean = components['schemas']['JExpEvaluateMetaDataBean'];
export type JexpIssues = components['schemas']['JexpIssues'];
export type JexpJqlIssues = components['schemas']['JexpJqlIssues'];
export type JiraCascadingSelectField = components['schemas']['JiraCascadingSelectField'];
export type JiraColorField = components['schemas']['JiraColorField'];
export type JiraColorInput = components['schemas']['JiraColorInput'];
export type JiraComponentField = components['schemas']['JiraComponentField'];
export type JiraDateField = components['schemas']['JiraDateField'];
export type JiraDateInput = components['schemas']['JiraDateInput'];
export type JiraDateTimeField = components['schemas']['JiraDateTimeField'];
export type JiraDateTimeInput = components['schemas']['JiraDateTimeInput'];
export type JiraDurationField = components['schemas']['JiraDurationField'];
export type JiraExpressionAnalysis = components['schemas']['JiraExpressionAnalysis'];
export type JiraExpressionComplexity = components['schemas']['JiraExpressionComplexity'];
export type JiraExpressionEvalContextBean = components['schemas']['JiraExpressionEvalContextBean'];
export type JiraExpressionEvalRequestBean = components['schemas']['JiraExpressionEvalRequestBean'];
export type JiraExpressionEvaluateContextBean = components['schemas']['JiraExpressionEvaluateContextBean'];
export type JiraExpressionEvaluateRequestBean = components['schemas']['JiraExpressionEvaluateRequestBean'];
export type JiraExpressionEvaluationMetaDataBean = components['schemas']['JiraExpressionEvaluationMetaDataBean'];
export type JiraExpressionForAnalysis = components['schemas']['JiraExpressionForAnalysis'];
export type JiraExpressionResult = components['schemas']['JiraExpressionResult'];
export type JiraExpressionsAnalysis = components['schemas']['JiraExpressionsAnalysis'];
export type JiraExpressionsComplexityBean = components['schemas']['JiraExpressionsComplexityBean'];
export type JiraExpressionsComplexityValueBean = components['schemas']['JiraExpressionsComplexityValueBean'];
export type JiraExpressionValidationError = components['schemas']['JiraExpressionValidationError'];
export type JiraGroupInput = components['schemas']['JiraGroupInput'];
export type JiraIssueFields = components['schemas']['JiraIssueFields'];
export type JiraIssueTypeField = components['schemas']['JiraIssueTypeField'];
export type JiraLabelsField = components['schemas']['JiraLabelsField'];
export type JiraLabelsInput = components['schemas']['JiraLabelsInput'];
export type JiraMultipleGroupPickerField = components['schemas']['JiraMultipleGroupPickerField'];
export type JiraMultipleSelectField = components['schemas']['JiraMultipleSelectField'];
export type JiraMultipleSelectUserPickerField = components['schemas']['JiraMultipleSelectUserPickerField'];
export type JiraMultipleVersionPickerField = components['schemas']['JiraMultipleVersionPickerField'];
export type JiraMultiSelectComponentField = components['schemas']['JiraMultiSelectComponentField'];
export type JiraNumberField = components['schemas']['JiraNumberField'];
export type JiraPriorityField = components['schemas']['JiraPriorityField'];
export type JiraRichTextField = components['schemas']['JiraRichTextField'];
export type JiraRichTextInput = components['schemas']['JiraRichTextInput'];
export type JiraSelectedOptionField = components['schemas']['JiraSelectedOptionField'];
export type JiraSingleGroupPickerField = components['schemas']['JiraSingleGroupPickerField'];
export type JiraSingleLineTextField = components['schemas']['JiraSingleLineTextField'];
export type JiraSingleSelectField = components['schemas']['JiraSingleSelectField'];
export type JiraSingleSelectUserPickerField = components['schemas']['JiraSingleSelectUserPickerField'];
export type JiraSingleVersionPickerField = components['schemas']['JiraSingleVersionPickerField'];
export type JiraStatus = components['schemas']['JiraStatus'];
export type JiraTimeTrackingField = components['schemas']['JiraTimeTrackingField'];
export type JiraUrlField = components['schemas']['JiraUrlField'];
export type JiraUserField = components['schemas']['JiraUserField'];
export type JiraVersionField = components['schemas']['JiraVersionField'];
export type JiraWorkflow = components['schemas']['JiraWorkflow'];
export type JiraWorkflowStatus = components['schemas']['JiraWorkflowStatus'];
export type JqlCountRequestBean = components['schemas']['JQLCountRequestBean'];
export type JqlCountResultsBean = components['schemas']['JQLCountResultsBean'];
export type JqlFunctionPrecomputationBean = components['schemas']['JqlFunctionPrecomputationBean'];
export type JqlFunctionPrecomputationGetByIdRequest = components['schemas']['JqlFunctionPrecomputationGetByIdRequest'];
export type JqlFunctionPrecomputationGetByIdResponse = components['schemas']['JqlFunctionPrecomputationGetByIdResponse'];
export type JqlFunctionPrecomputationUpdateBean = components['schemas']['JqlFunctionPrecomputationUpdateBean'];
export type JqlFunctionPrecomputationUpdateErrorResponse = components['schemas']['JqlFunctionPrecomputationUpdateErrorResponse'];
export type JqlFunctionPrecomputationUpdateRequestBean = components['schemas']['JqlFunctionPrecomputationUpdateRequestBean'];
export type JqlFunctionPrecomputationUpdateResponse = components['schemas']['JqlFunctionPrecomputationUpdateResponse'];
export type JqlPersonalDataMigrationRequest = components['schemas']['JQLPersonalDataMigrationRequest'];
export type JqlQueriesToParse = components['schemas']['JqlQueriesToParse'];
export type JqlQueriesToSanitize = components['schemas']['JqlQueriesToSanitize'];
export type JqlQuery = components['schemas']['JqlQuery'];
export type JqlQueryClause = components['schemas']['JqlQueryClause'];
export type JqlQueryClauseOperand = components['schemas']['JqlQueryClauseOperand'];
export type JqlQueryClauseTimePredicate = components['schemas']['JqlQueryClauseTimePredicate'];
export type JqlQueryField = components['schemas']['JqlQueryField'];
export type JqlQueryFieldEntityProperty = components['schemas']['JqlQueryFieldEntityProperty'];
export type JqlQueryOrderByClause = components['schemas']['JqlQueryOrderByClause'];
export type JqlQueryOrderByClauseElement = components['schemas']['JqlQueryOrderByClauseElement'];
export type JqlQueryToSanitize = components['schemas']['JqlQueryToSanitize'];
export type JqlQueryUnitaryOperand = components['schemas']['JqlQueryUnitaryOperand'];
export type JqlQueryWithUnknownUsers = components['schemas']['JQLQueryWithUnknownUsers'];
export type JqlReferenceData = components['schemas']['JQLReferenceData'];
export type JsonContextVariable = components['schemas']['JsonContextVariable'];
export type JsonNode = components['schemas']['JsonNode'];
export type JsonTypeBean = components['schemas']['JsonTypeBean'];
export type KeywordOperand = components['schemas']['KeywordOperand'];
export type LegacyJackson1ListAttachment = components['schemas']['LegacyJackson1ListAttachment'];
export type LegacyJackson1ListColumnItem = components['schemas']['LegacyJackson1ListColumnItem'];
export type LegacyJackson1ListIssueEvent = components['schemas']['LegacyJackson1ListIssueEvent'];
export type LegacyJackson1ListIssueTypeWithStatus = components['schemas']['LegacyJackson1ListIssueTypeWithStatus'];
export type LegacyJackson1ListProject = components['schemas']['LegacyJackson1ListProject'];
export type LegacyJackson1ListProjectComponent = components['schemas']['LegacyJackson1ListProjectComponent'];
export type LegacyJackson1ListProjectRoleDetails = components['schemas']['LegacyJackson1ListProjectRoleDetails'];
export type LegacyJackson1ListProjectType = components['schemas']['LegacyJackson1ListProjectType'];
export type LegacyJackson1ListUserMigrationBean = components['schemas']['LegacyJackson1ListUserMigrationBean'];
export type LegacyJackson1ListVersion = components['schemas']['LegacyJackson1ListVersion'];
export type LegacyJackson1ListWorklog = components['schemas']['LegacyJackson1ListWorklog'];
export type License = components['schemas']['License'];
export type LicensedApplication = components['schemas']['LicensedApplication'];
export type LicenseMetric = components['schemas']['LicenseMetric'];
export type LinkedIssue = components['schemas']['LinkedIssue'];
export type LinkGroup = components['schemas']['LinkGroup'];
export type LinkIssueRequestJsonBean = components['schemas']['LinkIssueRequestJsonBean'];
export type ListOperand = components['schemas']['ListOperand'];
export type ListWrapperCallbackApplicationRole = components['schemas']['ListWrapperCallbackApplicationRole'];
export type ListWrapperCallbackGroupName = components['schemas']['ListWrapperCallbackGroupName'];
export type Locale = components['schemas']['Locale'];
export type MandatoryFieldValue = components['schemas']['MandatoryFieldValue'];
export type MandatoryFieldValueForAdf = components['schemas']['MandatoryFieldValueForADF'];
export type MappingsByIssueTypeOverride = components['schemas']['MappingsByIssueTypeOverride'];
export type MappingsByWorkflow = components['schemas']['MappingsByWorkflow'];
export type MoveFieldBean = components['schemas']['MoveFieldBean'];
export type MultiIssueEntityProperties = components['schemas']['MultiIssueEntityProperties'];
export type MultipartFile = components['schemas']['MultipartFile'];
export type MultipleCustomFieldValuesUpdate = components['schemas']['MultipleCustomFieldValuesUpdate'];
export type MultipleCustomFieldValuesUpdateDetails = components['schemas']['MultipleCustomFieldValuesUpdateDetails'];
export type NestedResponse = components['schemas']['NestedResponse'];
export type NewUserDetails = components['schemas']['NewUserDetails'];
export type Notification = components['schemas']['Notification'];
export type NotificationEvent = components['schemas']['NotificationEvent'];
export type NotificationRecipients = components['schemas']['NotificationRecipients'];
export type NotificationRecipientsRestrictions = components['schemas']['NotificationRecipientsRestrictions'];
export type NotificationScheme = components['schemas']['NotificationScheme'];
export type NotificationSchemeAndProjectMappingJsonBean = components['schemas']['NotificationSchemeAndProjectMappingJsonBean'];
export type NotificationSchemeEvent = components['schemas']['NotificationSchemeEvent'];
export type NotificationSchemeEventDetails = components['schemas']['NotificationSchemeEventDetails'];
export type NotificationSchemeEventTypeId = components['schemas']['NotificationSchemeEventTypeId'];
export type NotificationSchemeId = components['schemas']['NotificationSchemeId'];
export type NotificationSchemeNotificationDetails = components['schemas']['NotificationSchemeNotificationDetails'];
export type OldToNewSecurityLevelMappingsBean = components['schemas']['OldToNewSecurityLevelMappingsBean'];
export type OperationMessage = components['schemas']['OperationMessage'];
export type Operations = components['schemas']['Operations'];
export type OrderOfCustomFieldOptions = components['schemas']['OrderOfCustomFieldOptions'];
export type OrderOfIssueTypes = components['schemas']['OrderOfIssueTypes'];
export type PageBean2ComponentJsonBean = components['schemas']['PageBean2ComponentJsonBean'];
export type PageBean2JqlFunctionPrecomputationBean = components['schemas']['PageBean2JqlFunctionPrecomputationBean'];
export type PageBeanBulkContextualConfiguration = components['schemas']['PageBeanBulkContextualConfiguration'];
export type PageBeanChangelog = components['schemas']['PageBeanChangelog'];
export type PageBeanComment = components['schemas']['PageBeanComment'];
export type PageBeanComponentWithIssueCount = components['schemas']['PageBeanComponentWithIssueCount'];
export type PageBeanContext = components['schemas']['PageBeanContext'];
export type PageBeanContextForProjectAndIssueType = components['schemas']['PageBeanContextForProjectAndIssueType'];
export type PageBeanContextualConfiguration = components['schemas']['PageBeanContextualConfiguration'];
export type PageBeanCustomFieldContext = components['schemas']['PageBeanCustomFieldContext'];
export type PageBeanCustomFieldContextDefaultValue = components['schemas']['PageBeanCustomFieldContextDefaultValue'];
export type PageBeanCustomFieldContextOption = components['schemas']['PageBeanCustomFieldContextOption'];
export type PageBeanCustomFieldContextProjectMapping = components['schemas']['PageBeanCustomFieldContextProjectMapping'];
export type PageBeanDashboard = components['schemas']['PageBeanDashboard'];
export type PageBeanField = components['schemas']['PageBeanField'];
export type PageBeanFieldConfigurationDetails = components['schemas']['PageBeanFieldConfigurationDetails'];
export type PageBeanFieldConfigurationIssueTypeItem = components['schemas']['PageBeanFieldConfigurationIssueTypeItem'];
export type PageBeanFieldConfigurationItem = components['schemas']['PageBeanFieldConfigurationItem'];
export type PageBeanFieldConfigurationScheme = components['schemas']['PageBeanFieldConfigurationScheme'];
export type PageBeanFieldConfigurationSchemeProjects = components['schemas']['PageBeanFieldConfigurationSchemeProjects'];
export type PageBeanFilterDetails = components['schemas']['PageBeanFilterDetails'];
export type PageBeanGroupDetails = components['schemas']['PageBeanGroupDetails'];
export type PageBeanIssueFieldOption = components['schemas']['PageBeanIssueFieldOption'];
export type PageBeanIssueSecurityLevelMember = components['schemas']['PageBeanIssueSecurityLevelMember'];
export type PageBeanIssueSecuritySchemeToProjectMapping = components['schemas']['PageBeanIssueSecuritySchemeToProjectMapping'];
export type PageBeanIssueTypeScheme = components['schemas']['PageBeanIssueTypeScheme'];
export type PageBeanIssueTypeSchemeMapping = components['schemas']['PageBeanIssueTypeSchemeMapping'];
export type PageBeanIssueTypeSchemeProjects = components['schemas']['PageBeanIssueTypeSchemeProjects'];
export type PageBeanIssueTypeScreenScheme = components['schemas']['PageBeanIssueTypeScreenScheme'];
export type PageBeanIssueTypeScreenSchemeItem = components['schemas']['PageBeanIssueTypeScreenSchemeItem'];
export type PageBeanIssueTypeScreenSchemesProjects = components['schemas']['PageBeanIssueTypeScreenSchemesProjects'];
export type PageBeanIssueTypeToContextMapping = components['schemas']['PageBeanIssueTypeToContextMapping'];
export type PageBeanNotificationScheme = components['schemas']['PageBeanNotificationScheme'];
export type PageBeanNotificationSchemeAndProjectMappingJsonBean = components['schemas']['PageBeanNotificationSchemeAndProjectMappingJsonBean'];
export type PageBeanPriority = components['schemas']['PageBeanPriority'];
export type PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects = components['schemas']['PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects'];
export type PageBeanPriorityWithSequence = components['schemas']['PageBeanPriorityWithSequence'];
export type PageBeanProject = components['schemas']['PageBeanProject'];
export type PageBeanProjectDetails = components['schemas']['PageBeanProjectDetails'];
export type PageBeanResolutionJsonBean = components['schemas']['PageBeanResolutionJsonBean'];
export type PageBeanScreen = components['schemas']['PageBeanScreen'];
export type PageBeanScreenScheme = components['schemas']['PageBeanScreenScheme'];
export type PageBeanScreenWithTab = components['schemas']['PageBeanScreenWithTab'];
export type PageBeanSecurityLevel = components['schemas']['PageBeanSecurityLevel'];
export type PageBeanSecurityLevelMember = components['schemas']['PageBeanSecurityLevelMember'];
export type PageBeanSecuritySchemeWithProjects = components['schemas']['PageBeanSecuritySchemeWithProjects'];
export type PageBeanString = components['schemas']['PageBeanString'];
export type PageBeanUiModificationDetails = components['schemas']['PageBeanUiModificationDetails'];
export type PageBeanUser = components['schemas']['PageBeanUser'];
export type PageBeanUserDetails = components['schemas']['PageBeanUserDetails'];
export type PageBeanUserKey = components['schemas']['PageBeanUserKey'];
export type PageBeanVersion = components['schemas']['PageBeanVersion'];
export type PageBeanWebhook = components['schemas']['PageBeanWebhook'];
export type PageBeanWorkflow = components['schemas']['PageBeanWorkflow'];
export type PageBeanWorkflowScheme = components['schemas']['PageBeanWorkflowScheme'];
export type PageBeanWorkflowTransitionRules = components['schemas']['PageBeanWorkflowTransitionRules'];
export type PagedListUserDetailsApplicationUser = components['schemas']['PagedListUserDetailsApplicationUser'];
export type PageOfChangelogs = components['schemas']['PageOfChangelogs'];
export type PageOfComments = components['schemas']['PageOfComments'];
export type PageOfCreateMetaIssueTypes = components['schemas']['PageOfCreateMetaIssueTypes'];
export type PageOfCreateMetaIssueTypeWithField = components['schemas']['PageOfCreateMetaIssueTypeWithField'];
export type PageOfDashboards = components['schemas']['PageOfDashboards'];
export type PageOfStatuses = components['schemas']['PageOfStatuses'];
export type PageOfWorklogs = components['schemas']['PageOfWorklogs'];
export type PageWithCursorGetPlanResponseForPage = components['schemas']['PageWithCursorGetPlanResponseForPage'];
export type PageWithCursorGetTeamResponseForPage = components['schemas']['PageWithCursorGetTeamResponseForPage'];
export type PaginatedResponseComment = components['schemas']['PaginatedResponseComment'];
export type PaginatedResponseFieldCreateMetadata = components['schemas']['PaginatedResponseFieldCreateMetadata'];
export type PaginatedResponseIssueTypeIssueCreateMetadata = components['schemas']['PaginatedResponseIssueTypeIssueCreateMetadata'];
export type ParsedJqlQueries = components['schemas']['ParsedJqlQueries'];
export type ParsedJqlQuery = components['schemas']['ParsedJqlQuery'];
export type PermissionDetails = components['schemas']['PermissionDetails'];
export type PermissionGrant = components['schemas']['PermissionGrant'];
export type PermissionGrants = components['schemas']['PermissionGrants'];
export type PermissionHolder = components['schemas']['PermissionHolder'];
export type Permissions = components['schemas']['Permissions'];
export type PermissionScheme = components['schemas']['PermissionScheme'];
export type PermissionSchemes = components['schemas']['PermissionSchemes'];
export type PermissionsKeysBean = components['schemas']['PermissionsKeysBean'];
export type PermittedProjects = components['schemas']['PermittedProjects'];
export type Priority = components['schemas']['Priority'];
export type PriorityId = components['schemas']['PriorityId'];
export type PriorityMapping = components['schemas']['PriorityMapping'];
export type PrioritySchemeChangesWithoutMappings = components['schemas']['PrioritySchemeChangesWithoutMappings'];
export type PrioritySchemeId = components['schemas']['PrioritySchemeId'];
export type PrioritySchemeWithPaginatedPrioritiesAndProjects = components['schemas']['PrioritySchemeWithPaginatedPrioritiesAndProjects'];
export type PriorityWithSequence = components['schemas']['PriorityWithSequence'];
export type Project = components['schemas']['Project'];
export type ProjectAndIssueTypePair = components['schemas']['ProjectAndIssueTypePair'];
export type ProjectAvatars = components['schemas']['ProjectAvatars'];
export type ProjectCategory = components['schemas']['ProjectCategory'];
export type ProjectComponent = components['schemas']['ProjectComponent'];
export type ProjectDataPolicies = components['schemas']['ProjectDataPolicies'];
export type ProjectDataPolicy = components['schemas']['ProjectDataPolicy'];
export type ProjectDetails = components['schemas']['ProjectDetails'];
export type ProjectEmailAddress = components['schemas']['ProjectEmailAddress'];
export type ProjectFeature = components['schemas']['ProjectFeature'];
export type ProjectFeatureState = components['schemas']['ProjectFeatureState'];
export type ProjectId = components['schemas']['ProjectId'];
export type ProjectIdentifierBean = components['schemas']['ProjectIdentifierBean'];
export type ProjectIdentifiers = components['schemas']['ProjectIdentifiers'];
export type ProjectIds = components['schemas']['ProjectIds'];
export type ProjectInsight = components['schemas']['ProjectInsight'];
export type ProjectIssueCreateMetadata = components['schemas']['ProjectIssueCreateMetadata'];
export type ProjectIssueSecurityLevels = components['schemas']['ProjectIssueSecurityLevels'];
export type ProjectIssueTypeHierarchy = components['schemas']['ProjectIssueTypeHierarchy'];
export type ProjectIssueTypeMapping = components['schemas']['ProjectIssueTypeMapping'];
export type ProjectIssueTypeMappings = components['schemas']['ProjectIssueTypeMappings'];
export type ProjectIssueTypes = components['schemas']['ProjectIssueTypes'];
export type ProjectIssueTypesHierarchyLevel = components['schemas']['ProjectIssueTypesHierarchyLevel'];
export type ProjectLandingPageInfo = components['schemas']['ProjectLandingPageInfo'];
export type ProjectPermissions = components['schemas']['ProjectPermissions'];
export type ProjectRole = components['schemas']['ProjectRole'];
export type ProjectRoleActorsUpdateBean = components['schemas']['ProjectRoleActorsUpdateBean'];
export type ProjectRoleDetails = components['schemas']['ProjectRoleDetails'];
export type ProjectRoleGroup = components['schemas']['ProjectRoleGroup'];
export type ProjectRoleUser = components['schemas']['ProjectRoleUser'];
export type ProjectScopeBean = components['schemas']['ProjectScopeBean'];
export type ProjectType = components['schemas']['ProjectType'];
export type ProjectWithDataPolicy = components['schemas']['ProjectWithDataPolicy'];
export type PropertyKey = components['schemas']['PropertyKey'];
export type PropertyKeys = components['schemas']['PropertyKeys'];
export type PublishDraftWorkflowScheme = components['schemas']['PublishDraftWorkflowScheme'];
export type PublishedWorkflowId = components['schemas']['PublishedWorkflowId'];
export type RegisteredWebhook = components['schemas']['RegisteredWebhook'];
export type RemoteIssueLink = components['schemas']['RemoteIssueLink'];
export type RemoteIssueLinkIdentifies = components['schemas']['RemoteIssueLinkIdentifies'];
export type RemoteIssueLinkRequest = components['schemas']['RemoteIssueLinkRequest'];
export type RemoteObject = components['schemas']['RemoteObject'];
export type RemoveOptionFromIssuesResult = components['schemas']['RemoveOptionFromIssuesResult'];
export type ReorderIssuePriorities = components['schemas']['ReorderIssuePriorities'];
export type ReorderIssueResolutionsRequest = components['schemas']['ReorderIssueResolutionsRequest'];
export type RequiredMappingByIssueType = components['schemas']['RequiredMappingByIssueType'];
export type RequiredMappingByWorkflows = components['schemas']['RequiredMappingByWorkflows'];
export type Resolution = components['schemas']['Resolution'];
export type ResolutionId = components['schemas']['ResolutionId'];
export type ResolutionJsonBean = components['schemas']['ResolutionJsonBean'];
export type Resource = components['schemas']['Resource'];
export type RestrictedPermission = components['schemas']['RestrictedPermission'];
export type RichText = components['schemas']['RichText'];
export type RoleActor = components['schemas']['RoleActor'];
export type RuleConfiguration = components['schemas']['RuleConfiguration'];
export type SanitizedJqlQueries = components['schemas']['SanitizedJqlQueries'];
export type SanitizedJqlQuery = components['schemas']['SanitizedJqlQuery'];
export type Scope = components['schemas']['Scope'];
export type Screen = components['schemas']['Screen'];
export type ScreenableField = components['schemas']['ScreenableField'];
export type ScreenableTab = components['schemas']['ScreenableTab'];
export type ScreenDetails = components['schemas']['ScreenDetails'];
export type ScreenScheme = components['schemas']['ScreenScheme'];
export type ScreenSchemeDetails = components['schemas']['ScreenSchemeDetails'];
export type ScreenSchemeId = components['schemas']['ScreenSchemeId'];
export type ScreenTypes = components['schemas']['ScreenTypes'];
export type ScreenWithTab = components['schemas']['ScreenWithTab'];
export type SearchAndReconcileRequestBean = components['schemas']['SearchAndReconcileRequestBean'];
export type SearchAndReconcileResults = components['schemas']['SearchAndReconcileResults'];
export type SearchAutoCompleteFilter = components['schemas']['SearchAutoCompleteFilter'];
export type SearchRequestBean = components['schemas']['SearchRequestBean'];
export type SearchResults = components['schemas']['SearchResults'];
export type SecurityLevel = components['schemas']['SecurityLevel'];
export type SecurityLevelMember = components['schemas']['SecurityLevelMember'];
export type SecurityScheme = components['schemas']['SecurityScheme'];
export type SecuritySchemeId = components['schemas']['SecuritySchemeId'];
export type SecuritySchemeLevelBean = components['schemas']['SecuritySchemeLevelBean'];
export type SecuritySchemeLevelMemberBean = components['schemas']['SecuritySchemeLevelMemberBean'];
export type SecuritySchemeMembersRequest = components['schemas']['SecuritySchemeMembersRequest'];
export type SecuritySchemes = components['schemas']['SecuritySchemes'];
export type SecuritySchemeWithProjects = components['schemas']['SecuritySchemeWithProjects'];
export type ServerInformation = components['schemas']['ServerInformation'];
export type ServiceManagementNavigationInfo = components['schemas']['ServiceManagementNavigationInfo'];
export type ServiceRegistry = components['schemas']['ServiceRegistry'];
export type ServiceRegistryTier = components['schemas']['ServiceRegistryTier'];
export type SetDefaultLevelsRequest = components['schemas']['SetDefaultLevelsRequest'];
export type SetDefaultPriorityRequest = components['schemas']['SetDefaultPriorityRequest'];
export type SetDefaultResolutionRequest = components['schemas']['SetDefaultResolutionRequest'];
export type SharePermission = components['schemas']['SharePermission'];
export type SharePermissionInputBean = components['schemas']['SharePermissionInputBean'];
export type SimpleApplicationPropertyBean = components['schemas']['SimpleApplicationPropertyBean'];
export type SimpleErrorCollection = components['schemas']['SimpleErrorCollection'];
export type SimpleLink = components['schemas']['SimpleLink'];
export type SimpleListWrapperApplicationRole = components['schemas']['SimpleListWrapperApplicationRole'];
export type SimpleListWrapperGroupName = components['schemas']['SimpleListWrapperGroupName'];
export type SimpleUsage = components['schemas']['SimpleUsage'];
export type SimplifiedHierarchyLevel = components['schemas']['SimplifiedHierarchyLevel'];
export type SimplifiedIssueTransition = components['schemas']['SimplifiedIssueTransition'];
export type SoftwareNavigationInfo = components['schemas']['SoftwareNavigationInfo'];
export type Status = components['schemas']['Status'];
export type StatusCategory = components['schemas']['StatusCategory'];
export type StatusCreate = components['schemas']['StatusCreate'];
export type StatusCreateRequest = components['schemas']['StatusCreateRequest'];
export type StatusDetails = components['schemas']['StatusDetails'];
export type StatusesPerWorkflow = components['schemas']['StatusesPerWorkflow'];
export type StatusLayoutUpdate = components['schemas']['StatusLayoutUpdate'];
export type StatusMapping = components['schemas']['StatusMapping'];
export type StatusMappingDto = components['schemas']['StatusMappingDTO'];
export type StatusMetadata = components['schemas']['StatusMetadata'];
export type StatusMigration = components['schemas']['StatusMigration'];
export type StatusReferenceAndPort = components['schemas']['StatusReferenceAndPort'];
export type StatusScope = components['schemas']['StatusScope'];
export type StatusUpdate = components['schemas']['StatusUpdate'];
export type StatusUpdateRequest = components['schemas']['StatusUpdateRequest'];
export type StreamingResponseBody = components['schemas']['StreamingResponseBody'];
export type StringList = components['schemas']['StringList'];
export type SubmittedBulkOperation = components['schemas']['SubmittedBulkOperation'];
export type SuggestedIssue = components['schemas']['SuggestedIssue'];
export type SuggestedMappingsForPrioritiesRequestBean = components['schemas']['SuggestedMappingsForPrioritiesRequestBean'];
export type SuggestedMappingsForProjectsRequestBean = components['schemas']['SuggestedMappingsForProjectsRequestBean'];
export type SuggestedMappingsRequestBean = components['schemas']['SuggestedMappingsRequestBean'];
export type SystemAvatars = components['schemas']['SystemAvatars'];
export type TargetClassification = components['schemas']['targetClassification'];
export type TargetMandatoryFields = components['schemas']['targetMandatoryFields'];
export type TargetStatus = components['schemas']['targetStatus'];
export type TargetToSourcesMapping = components['schemas']['targetToSourcesMapping'];
export type TaskProgressBeanJsonNode = components['schemas']['TaskProgressBeanJsonNode'];
export type TaskProgressBeanObject = components['schemas']['TaskProgressBeanObject'];
export type TaskProgressBeanRemoveOptionFromIssuesResult = components['schemas']['TaskProgressBeanRemoveOptionFromIssuesResult'];
export type TimeTrackingConfiguration = components['schemas']['TimeTrackingConfiguration'];
export type TimeTrackingDetails = components['schemas']['TimeTrackingDetails'];
export type TimeTrackingProvider = components['schemas']['TimeTrackingProvider'];
export type Transition = components['schemas']['Transition'];
export type Transitions = components['schemas']['Transitions'];
export type TransitionScreenDetails = components['schemas']['TransitionScreenDetails'];
export type TransitionUpdateDto = components['schemas']['TransitionUpdateDTO'];
export type UiModificationContextDetails = components['schemas']['UiModificationContextDetails'];
export type UiModificationDetails = components['schemas']['UiModificationDetails'];
export type UiModificationIdentifiers = components['schemas']['UiModificationIdentifiers'];
export type UnrestrictedUserEmail = components['schemas']['UnrestrictedUserEmail'];
export type UpdateCustomFieldDetails = components['schemas']['UpdateCustomFieldDetails'];
export type UpdateDefaultProjectClassificationBean = components['schemas']['UpdateDefaultProjectClassificationBean'];
export type UpdateDefaultScreenScheme = components['schemas']['UpdateDefaultScreenScheme'];
export type UpdatedProjectCategory = components['schemas']['UpdatedProjectCategory'];
export type UpdateFieldConfigurationSchemeDetails = components['schemas']['UpdateFieldConfigurationSchemeDetails'];
export type UpdateIssueSecurityLevelDetails = components['schemas']['UpdateIssueSecurityLevelDetails'];
export type UpdateIssueSecuritySchemeRequestBean = components['schemas']['UpdateIssueSecuritySchemeRequestBean'];
export type UpdateNotificationSchemeDetails = components['schemas']['UpdateNotificationSchemeDetails'];
export type UpdatePrioritiesInSchemeRequestBean = components['schemas']['UpdatePrioritiesInSchemeRequestBean'];
export type UpdatePriorityDetails = components['schemas']['UpdatePriorityDetails'];
export type UpdatePrioritySchemeRequestBean = components['schemas']['UpdatePrioritySchemeRequestBean'];
export type UpdatePrioritySchemeResponseBean = components['schemas']['UpdatePrioritySchemeResponseBean'];
export type UpdateProjectDetails = components['schemas']['UpdateProjectDetails'];
export type UpdateProjectsInSchemeRequestBean = components['schemas']['UpdateProjectsInSchemeRequestBean'];
export type UpdateResolutionDetails = components['schemas']['UpdateResolutionDetails'];
export type UpdateScreenDetails = components['schemas']['UpdateScreenDetails'];
export type UpdateScreenSchemeDetails = components['schemas']['UpdateScreenSchemeDetails'];
export type UpdateScreenTypes = components['schemas']['UpdateScreenTypes'];
export type UpdateUiModificationDetails = components['schemas']['UpdateUiModificationDetails'];
export type UpdateUserToGroupBean = components['schemas']['UpdateUserToGroupBean'];
export type User = components['schemas']['User'];
export type UserBean = components['schemas']['UserBean'];
export type UserBeanAvatarUrls = components['schemas']['UserBeanAvatarUrls'];
export type UserColumnRequestBody = components['schemas']['UserColumnRequestBody'];
export type UserContextVariable = components['schemas']['UserContextVariable'];
export type UserDetails = components['schemas']['UserDetails'];
export type UserFilter = components['schemas']['UserFilter'];
export type UserKey = components['schemas']['UserKey'];
export type UserList = components['schemas']['UserList'];
export type UserMigrationBean = components['schemas']['UserMigrationBean'];
export type UserPermission = components['schemas']['UserPermission'];
export type UserPickerUser = components['schemas']['UserPickerUser'];
export type ValidationOptionsForCreate = components['schemas']['ValidationOptionsForCreate'];
export type ValidationOptionsForUpdate = components['schemas']['ValidationOptionsForUpdate'];
export type ValueOperand = components['schemas']['ValueOperand'];
export type Version = components['schemas']['Version'];
export type VersionApprover = components['schemas']['VersionApprover'];
export type VersionIssueCounts = components['schemas']['VersionIssueCounts'];
export type VersionIssuesStatus = components['schemas']['VersionIssuesStatus'];
export type VersionMoveBean = components['schemas']['VersionMoveBean'];
export type VersionRelatedWork = components['schemas']['VersionRelatedWork'];
export type VersionUnresolvedIssuesCount = components['schemas']['VersionUnresolvedIssuesCount'];
export type VersionUsageInCustomField = components['schemas']['VersionUsageInCustomField'];
export type Visibility = components['schemas']['Visibility'];
export type Votes = components['schemas']['Votes'];
export type WarningCollection = components['schemas']['WarningCollection'];
export type Watchers = components['schemas']['Watchers'];
export type Webhook = components['schemas']['Webhook'];
export type WebhookDetails = components['schemas']['WebhookDetails'];
export type WebhookRegistrationDetails = components['schemas']['WebhookRegistrationDetails'];
export type WebhooksExpirationDate = components['schemas']['WebhooksExpirationDate'];
export type Workflow = components['schemas']['Workflow'];
export type WorkflowAssociationStatusMapping = components['schemas']['WorkflowAssociationStatusMapping'];
export type WorkflowCapabilities = components['schemas']['WorkflowCapabilities'];
export type WorkflowCompoundCondition = components['schemas']['WorkflowCompoundCondition'];
export type WorkflowCondition = components['schemas']['WorkflowCondition'];
export type WorkflowCreate = components['schemas']['WorkflowCreate'];
export type WorkflowCreateRequest = components['schemas']['WorkflowCreateRequest'];
export type WorkflowCreateResponse = components['schemas']['WorkflowCreateResponse'];
export type WorkflowCreateValidateRequest = components['schemas']['WorkflowCreateValidateRequest'];
export type WorkflowElementReference = components['schemas']['WorkflowElementReference'];
export type WorkflowId = components['schemas']['WorkflowId'];
export type WorkflowIDs = components['schemas']['WorkflowIDs'];
export type WorkflowLayout = components['schemas']['WorkflowLayout'];
export type WorkflowMetadataAndIssueTypeRestModel = components['schemas']['WorkflowMetadataAndIssueTypeRestModel'];
export type WorkflowMetadataRestModel = components['schemas']['WorkflowMetadataRestModel'];
export type WorkflowOperations = components['schemas']['WorkflowOperations'];
export type WorkflowReadRequest = components['schemas']['WorkflowReadRequest'];
export type WorkflowReadResponse = components['schemas']['WorkflowReadResponse'];
export type WorkflowReferenceStatus = components['schemas']['WorkflowReferenceStatus'];
export type WorkflowRuleConfiguration = components['schemas']['WorkflowRuleConfiguration'];
export type WorkflowRules = components['schemas']['WorkflowRules'];
export type WorkflowRulesSearch = components['schemas']['WorkflowRulesSearch'];
export type WorkflowRulesSearchDetails = components['schemas']['WorkflowRulesSearchDetails'];
export type WorkflowScheme = components['schemas']['WorkflowScheme'];
export type WorkflowSchemeAssociation = components['schemas']['WorkflowSchemeAssociation'];
export type WorkflowSchemeAssociations = components['schemas']['WorkflowSchemeAssociations'];
export type WorkflowSchemeIdName = components['schemas']['WorkflowSchemeIdName'];
export type WorkflowSchemeProjectAssociation = components['schemas']['WorkflowSchemeProjectAssociation'];
export type WorkflowSchemeReadRequest = components['schemas']['WorkflowSchemeReadRequest'];
export type WorkflowSchemeReadResponse = components['schemas']['WorkflowSchemeReadResponse'];
export type WorkflowSchemeUpdateRequest = components['schemas']['WorkflowSchemeUpdateRequest'];
export type WorkflowSchemeUpdateRequiredMappingsRequest = components['schemas']['WorkflowSchemeUpdateRequiredMappingsRequest'];
export type WorkflowSchemeUpdateRequiredMappingsResponse = components['schemas']['WorkflowSchemeUpdateRequiredMappingsResponse'];
export type WorkflowScope = components['schemas']['WorkflowScope'];
export type WorkflowSearchResponse = components['schemas']['WorkflowSearchResponse'];
export type WorkflowSimpleCondition = components['schemas']['WorkflowSimpleCondition'];
export type WorkflowStatus = components['schemas']['WorkflowStatus'];
export type WorkflowStatusAndPort = components['schemas']['WorkflowStatusAndPort'];
export type WorkflowStatusLayout = components['schemas']['WorkflowStatusLayout'];
export type WorkflowStatusUpdate = components['schemas']['WorkflowStatusUpdate'];
export type WorkflowsWithTransitionRulesDetails = components['schemas']['WorkflowsWithTransitionRulesDetails'];
export type WorkflowTransition = components['schemas']['WorkflowTransition'];
export type WorkflowTransitionLinks = components['schemas']['WorkflowTransitionLinks'];
export type WorkflowTransitionProperty = components['schemas']['WorkflowTransitionProperty'];
export type WorkflowTransitionRule = components['schemas']['WorkflowTransitionRule'];
export type WorkflowTransitionRules = components['schemas']['WorkflowTransitionRules'];
export type WorkflowTransitionRulesDetails = components['schemas']['WorkflowTransitionRulesDetails'];
export type WorkflowTransitionRulesUpdate = components['schemas']['WorkflowTransitionRulesUpdate'];
export type WorkflowTransitionRulesUpdateErrorDetails = components['schemas']['WorkflowTransitionRulesUpdateErrorDetails'];
export type WorkflowTransitionRulesUpdateErrors = components['schemas']['WorkflowTransitionRulesUpdateErrors'];
export type WorkflowTransitions = components['schemas']['WorkflowTransitions'];
export type WorkflowTrigger = components['schemas']['WorkflowTrigger'];
export type WorkflowUpdate = components['schemas']['WorkflowUpdate'];
export type WorkflowUpdateRequest = components['schemas']['WorkflowUpdateRequest'];
export type WorkflowUpdateResponse = components['schemas']['WorkflowUpdateResponse'];
export type WorkflowUpdateValidateRequestBean = components['schemas']['WorkflowUpdateValidateRequestBean'];
export type WorkflowUsages = components['schemas']['WorkflowUsages'];
export type WorkflowValidationError = components['schemas']['WorkflowValidationError'];
export type WorkflowValidationErrorList = components['schemas']['WorkflowValidationErrorList'];
export type Worklog = components['schemas']['Worklog'];
export type WorklogIdsRequestBean = components['schemas']['WorklogIdsRequestBean'];
export type WorklogsMoveRequestBean = components['schemas']['WorklogsMoveRequestBean'];
export type WorkManagementNavigationInfo = components['schemas']['WorkManagementNavigationInfo'];
export type WorkspaceDataPolicy = components['schemas']['WorkspaceDataPolicy'];
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
